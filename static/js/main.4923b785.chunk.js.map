{"version":3,"sources":["generators/enricher.js","utils/fileSaver.js","utils/index.js","generators/duckGenerator/index.js","generators/pageGenerator/index.js","generators/pageGenerator/poorPageGenerator/poorPageGenerator.js","generators/pageGenerator/tablePageGenerator/tablePageGenerator.js","generators/pageGenerator/tablePageGenerator/tableGenerator.js","generators/pageGenerator/tablePageGenerator/tableConfigGenerator.js","generators/pageGenerator/tablePageGenerator/tableStylesGenerator.js","generators/index.js","generators/sagaGenerator/index.js","DuckGeneratorPage/InputArray/index.js","DuckGeneratorPage/index.js","logo.svg","App.js","index.js","globalConstants/index.js"],"names":["generationObject","moduleName","actions","moduleNameCamelCase","camelCase","pageName","pascalCase","pageTableName","modalName","enrichedActions","_","map","action","enriched","constants","actionCreators","sagas","actionType","ACTION_TYPES","fetch","setFetching","constantCase","actionName","fetchSuccess","sagaName","valueNames","value","fetchingValue","selectors","propertyName","set","poorSagaAction","poorReducerAction","Object","freeze","enrichActions","fileBuilder","fileBuildingObject","zipFile","prevDeep","type","name","extension","content","fileProps","currDeep","TYPES_OF_FILES","file","directory","newZipFileInstance","folder","each","obj","lines","textArr","filter","line","Boolean","join","generateHeader","generateConstants","result","generateConstant","generateReducerInitState","actionInitValue","res","generateReducerInitStateSnippet","generateReducer","generateReducerSnippet","generateSelectors","generateActionCreators","generateActionSnippet","moduleDescription","generatePoorPage","generateImports","generateMapStateToProps","generateMapDispatchToProps","generateClass","split","str","poorPageGenerator","generateTablePage","tablePageGenerator","generateTable","tableGenerator","generateTableConfig","generateTableConfigFile","generateTableStyles","generateTableStyleFile","enrichedGenerationObject","enricher","generatingComponent","generateDuckFile","duckGenerator","generateSagaFile","fetchActions","poorSagaActions","setActions","generateSagas","actionFetchURL","generateCommonSaga","sagaGenerator","generatePages","pageGenerator","generatedPages","COMPONENT_TYPES","poorPage","tablePage","table","tableConfig","tableStyles","Item","List","Option","Select","InputArray","props","updateState","newState","actionsChanged","setState","get","createNewItem","undefined","DEF_INIT_VALUES","undefinedValue","key","v4","deleteItem","item","_renderAdditionalFields","className","placeholder","onChange","e","changeActionProps","target","initValue","sentenceCase","updatedActions","state","size","bordered","dataSource","this","locale","emptyText","header","onClick","renderItem","DeleteTwoTone","React","Component","Panel","Collapse","TabPane","Tabs","RadioGroup","Radio","Group","TextArea","Input","DuckGeneratorPage","onGenerateFiles","isEmpty","generators","fileStructure","pages","enrichedValues","componentName","modal","filesTree","filename","fileExtension","initZipDeep","zip","JSZip","generateAsync","then","saveAs","catch","console","log","downloadZipFile","notification","info","message","error","defaultActiveKey","rows","tabPosition","tab","displayObjectSize","displayDataTypes","collapseStringsAfterLength","src","App","logo","alt","ReactDOM","render","StrictMode","document","getElementById","nullValue","emptyString","zero","emptyObject","emptyArray","module","exports"],"mappings":"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","file":"static/js/main.4923b785.chunk.js","sourcesContent":["//vendor\nimport { constantCase, camelCase, capitalCase, pascalCase } from 'change-case'; //For converting different types of variables(camelCase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n/**\n * Actions enriching - generating more fields that can be used later\n * @param {*} actions \n * @returns Enriched actions\n */\n function enrichActions(actions) {\n    const enrichedActions = _.map(actions, (action) => {\n        let enriched =  {\n            ...action,\n            constants: {}, //Constant names, can be more than one\n            actionCreators: {}, //Action function names, different for different types of actions\n            sagas: {}, //Action function names, different for different types of actions\n        };\n\n        switch (action.actionType) {\n            case ACTION_TYPES.fetch:\n                enriched.constants = {\n                    setFetching: constantCase(`set fetching ${action.actionName}`),\n                    fetch: constantCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: constantCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.actionCreators = {\n                    setFetching: camelCase(`set fetching ${action.actionName}`),\n                    fetch: camelCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: camelCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionType} ${action.actionName} saga`)\n                }\n\n                //Used to store data inside them\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`),\n                    fetchingValue: camelCase(`fetching ${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                    fetchingValue: camelCase(`select fetching ${action.actionName}`)\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.set:\n                enriched.constants = {\n                    set: constantCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    set: camelCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.poorSagaAction:\n                enriched.constants = {\n                    poorSagaAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionName} saga`)\n                }\n\n                enriched.actionCreators = {\n                    poorSagaAction: camelCase(`${action.actionName}`),\n                }\n                break;\n\n            case ACTION_TYPES.poorReducerAction:\n                enriched.constants = {\n                    poorReducerAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    poorReducerAction: camelCase(`${action.actionName}`),\n                }\n                break;\n        }\n\n        return enriched;\n    })\n    return Object.freeze(enrichedActions);\n}\n\n\n/**\n * Before we start generation we have to enrich generation object - add more fields and pre-generate some variables.\n */\nexport default (generationObject) => {\n    const { moduleName, actions } = generationObject;\n\n    const moduleNameCamelCase = camelCase(moduleName);\n    const pageName = pascalCase(`${moduleName} page`);\n    const pageTableName = pascalCase(`${moduleName} table`);\n    const modalName = pascalCase(`${moduleName} modal`);\n    const enrichedActions = enrichActions(actions);\n\n    return {\n        ...generationObject,\n\n        moduleName: moduleNameCamelCase,\n        actions: enrichedActions,\n        pageName,\n        pageTableName,\n        modalName,\n    };\n}","/*\n    This module is created for handle file saving operations.\n*/\n\n//vendor\nimport _ from \"lodash\";\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\n//proj\nimport { TYPES_OF_FILES } from 'globalConstants';\n\n//own\n\nconst MAX_ZIP_DEEP = 10;\n\n/**\n * Save file on user's local machine. Just provide content you wnat to save.\n * @param { String } text - content of a file\n * \n * @example \n * downloadTxtFile(\"Hello world\", \"hello.txt\")\n */\n export const downloadTxtFile = (text, filename = 'myFile.txt') => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}\n\n/**\n * ***Recursive*** function for building zip file structure by creating nested files/folders or just creating a file on current iteration.\n * @param {*} fileBuildingObject This is one of file or folder objects used for generating;\n * @param {*} zipFile - instance of JSZip file on current iteration.\n * @param {*} prevDeep - previous deep value, used to indicate too deep folders nesting(possibly recursive dead loop)\n */\nconst fileBuilder = (fileBuildingObject, zipFile, prevDeep) => {\n    const { type, name, extension, content, fileProps } = fileBuildingObject;\n    const currDeep = prevDeep + 1;\n    \n    if(currDeep >= MAX_ZIP_DEEP) throw \"Error, max folder deep when generating zip file reached. Make sure you do not have recursive dead loop here!\"\n    if(!name) throw \"No name provided for one of the files\";\n    if(!type) throw \"No type provided for one of the files\";\n\n    switch (type) {\n        case TYPES_OF_FILES.file:\n            zipFile.file(`${name}${extension? extension: \"\"}`, content, fileProps);\n            break;\n\n        case TYPES_OF_FILES.directory:\n            const newZipFileInstance = zipFile.folder(name);\n            _.each(content, (obj) => fileBuilder(obj, newZipFileInstance, currDeep));\n            break;\n    }\n}\n\n/**\n * Used to generate zip file and save it on user's local pc vi saveAs. This used recursive method of building directories structure\n * so it can be used for different purposes and file structures. For object reference see examples.\n * @param {*} filesTree \n * @param {*} filename \n * @param {*} fileExtension\n * \n * @example\n * // example of filesTree:\n * const plug = [\n *      {\n *          type: TYPES_OF_FILES.file,\n *          name: 'helloTxt',\n *          content: \"Hello world\",\n *          extension: '.txt',\n *          fileProps: undefined\n *      },\n *      {\n *          type: TYPES_OF_FILES.directory,\n *          name: 'myDir',\n *          content: [\n *              {\n *                  type: TYPES_OF_FILES.file,\n *                  name: 'helloTxt2',\n *                  extension: '.txt',\n *                  content: \"Hello 2\",\n *                  fileProps: undefined\n *              },\n *              {\n *                  type: TYPES_OF_FILES.file,\n *                  name: 'smile',\n *                  extension: '.png',\n *                  content: \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAvUlEQVRIS+2VQQ6AIAwE7f8fjcGIQSJ0FpRw0CuG6W7p1kIIYZv42dJAMzu8GDFFUhiBEZbAPXAMTLCy3apqBKzBEtw7z4t0gfQyavNaQKouWkZ72VRIgRR2FOYNvgelvbseWC+wBHmFYWDen6fITUFA08e19DZDZ9I8Df8nwNpSoXaiR0M211SgAntF4VSgChtSqKRLc1uQqnthVYV5ipRbfQSGLW0VQMZGWsDqhd7/UrR5l5HzH0hckv7ZAQ7W2K0nyHmFAAAAAElFTkSuQmCC\",\n *                  fileProps: {base64: true},\n *              },\n *          ]\n *      }\n *  ];\n */\nexport const downloadZipFile = (filesTree, filename = 'myFile', fileExtension = '.zip') => {\n    \n    const initZipDeep = 0; //How many folders deep created\n    var zip = new JSZip();\n\n    // Build zip file\n    _.each(filesTree, obj => fileBuilder(obj, zip, initZipDeep));\n\n    // Save file\n    zip.generateAsync({type:\"blob\"})\n        .then(function(content) {\n            saveAs(content, `${filename}${fileExtension}`);\n        })\n        .catch(console.log);\n}","//vendor\nimport _ from \"lodash\";\n\n/**\n * Generate text from array of lines with new line at the end of each.\n * Last line does not have a new line character.\n * All falsy lines will be removed (but empty string remains)\n * @param { Array } text - array of strings\n */\nexport const lines = (textArr) => {\n    const filteredLines = _.filter(textArr, (line) => Boolean(line) || line === \"\"); // Remove all false values except of empty string\n    \n    return filteredLines.join(\"\\n\");\n}\n\nexport * from './fileSaver';","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\nfunction generateConstant({ actionType, constants }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result +=`export const ${constants.fetch} = \\`\\${prefix}/${constants.fetch}\\`;\\n`;\n            result +=`export const ${constants.fetchSuccess} = \\`\\${prefix}/${constants.fetchSuccess}\\`;\\n`;\n            result +=`export const ${constants.setFetching} = \\`\\${prefix}/${constants.setFetching}\\`;\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            result +=`export const ${constants.set} = \\`\\${prefix}/${constants.set}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            result +=`export const ${constants.poorSagaAction} = \\`\\${prefix}/${constants.poorSagaAction}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result +=`export const ${constants.poorReducerAction} = \\`\\${prefix}/${constants.poorReducerAction}\\`;\\n`;\n            break;\n    }\n\n    return result;\n}\n\n/** Reducer snippet is a line that contains variable name */\nfunction generateReducerInitStateSnippet({ actionInitValue, actionType, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            res += `\\t${valueNames.fetchingValue}: false,\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            break;    \n    }\n\n    return res;\n}\n\n\n/**\n * Reducer's state changer inside switch statement\n */\nfunction generateReducerSnippet({ actionType, constants, valueNames }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result = lines([\n                `\\t\\tcase ${constants.fetchSuccess}:`,\n                `\\t\\t\\tconst { ${valueNames.value} } = payload;`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: ${valueNames.value},`,\n                '\\t\\t\\t};',\n                `\\t\\tcase ${constants.setFetching}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.fetchingValue}: payload,`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            result = lines([\n                `\\t\\tcase ${constants.set}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: payload`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result = lines([\n                `\\t\\tcase ${constants.poorReducerAction}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Actions are functions that can be called when you want to change the state\n */\nfunction generateActionSnippet({ actionType, actionName, actionCreators, constants, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += lines([\n                `export const ${actionCreators.fetch} = () => ({`,\n                `\\ttype: \\t${constants.fetch},`,\n                '});\\n',\n                `export const ${actionCreators.fetchSuccess} = ({${valueNames.value}}) => ({`,\n                `\\ttype: \\t${constants.fetchSuccess},`,\n                `\\tpayload: {${valueNames.value}}`,\n                '});\\n',\n                `export const ${actionCreators.setFetching} = (value) => ({`,\n                `\\ttype: \\t${constants.setFetching},`,\n                '\\tpayload: value',\n                '});\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += lines([\n                `export const ${actionCreators.set} = (value) => ({`,\n                `\\ttype: \\t${constants.set},`,\n                '\\tpayload: value',\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            res += lines([\n                `export const ${actionCreators.poorSagaAction} = () => ({`,\n                `\\ttype: \\t${constants.poorSagaAction},`,\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            res += lines([\n                `export const ${actionCreators.poorReducerAction} = () => ({`,\n                `\\ttype: \\t${constants.poorReducerAction},`,\n                '});\\n'\n            ]);\n            break;\n    }\n\n    return res;\n}\n\n/**\n * Module pattern is used here to generate data. This generator is used for creating duck files.\n * \n * @param { String } moduleName - name of the module you want to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    /**\n     * @returns Header of a duck file\n     */\n    function generateHeader() {\n        let result = lines([\n            `/** ------------------------------------- Constants ------------------------------------- **/`,\n            `export const moduleName = '${moduleName}';`,\n            `const prefix = \\`cpb/\\${moduleName}\\`;`,\n            '',\n        ]);\n    \n        return result;\n    }\n\n    /**\n     * @param {*} params.actions - actions to generate constants for\n     */\n    function generateConstants() {\n        let result = \"\";\n\n        _.each(actions, (action) => {\n            result+=generateConstant(action);\n        });\n\n        return result;\n    }\n\n    function generateReducerInitState() {\n        let result = lines([\n            '/** ------------------------------------- Reducer ------------------------------------- **/',\n            'const ReducerState = {\\n',\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerInitStateSnippet(action);\n        });\n        result+= '};\\n';\n\n        return result;\n    }\n\n    function generateReducer() {\n        let result = lines([\n            `export default function reducer(state = ReducerState, action) {`,\n            `\\tconst { type, payload } = action;`,\n            `\\tswitch (type) {\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerSnippet(action);\n        })\n\n        result += lines([\n            `\\t\\tdefault:`,\n            `\\t\\t\\treturn state;`,\n            `\\t}`,\n            `}`,\n        ]);\n    \n        return result;\n    }\n\n    function generateSelectors() {\n        let res = lines([\n            `/* ------------------------------------- Selectors ------------------------------------- */\\n`,\n        ]);\n\n        _.each(actions, ({ actionType, actionName, selectors, valueNames }) => {\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    res += `export const ${selectors.fetchingValue} = state => state[ moduleName ].${valueNames.fetchingValue};\\n\\n`;\n                    break;\n        \n                case ACTION_TYPES.set:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    break;    \n            }\n        });\n    \n        return res;\n    }\n\n    function generateActionCreators() {\n        let result = lines([\n            `/* ------------------------------------- Action Creators -------------------------- */\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateActionSnippet(action);\n        });\n    \n        return result;\n    }\n\n    return {\n        generateHeader,\n        generateConstants,\n        generateReducerInitState,\n        generateReducer,\n        generateSelectors,\n        generateActionCreators,\n    }\n};","\n//own\nimport { lines } from \"utils\";\nimport poorPageGenerator from \"./poorPageGenerator/poorPageGenerator\";\n\nimport tablePageGenerator from \"./tablePageGenerator/tablePageGenerator\";\nimport tableGenerator from \"./tablePageGenerator/tableGenerator\";\nimport tableConfigGenerator from \"./tablePageGenerator/tableConfigGenerator\";\nimport tableStylesGenerator from \"./tablePageGenerator/tableStylesGenerator\";\n\nexport default (generationObject) => {\n    const { moduleDescription, actions} = generationObject;\n\n    /** Poor page, contains nothing except basic layout. */\n    const generatePoorPage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = poorPageGenerator({moduleDescription, actions});\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    };\n\n    /** This is the page where table is invoked for rendering, there can be placed filters, modals, main description of the module etc. */\n    const generateTablePage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = tablePageGenerator(generationObject);\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    }\n\n    /** This file contains table file, there configs and styles are connected */\n    const generateTable = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = tableGenerator(generationObject);\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    }\n\n    /** File that contains table's columns configuration */\n    const generateTableConfig = () => {\n        const { generateTableConfigFile } = tableConfigGenerator(generationObject);\n        return generateTableConfigFile();\n    }\n\n    /** Basic table styles and styles for fixing known issues */\n    const generateTableStyles = () => {\n        const { generateTableStyleFile } = tableStylesGenerator(generationObject);\n        return generateTableStyleFile();\n    }\n\n    return {\n        generatePoorPage,\n\n        generateTablePage,\n        generateTable,\n        generateTableConfig,\n        generateTableStyles,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t<Layout`,\n            `\\t\\t\\t\\t\\ttitle={ <FormattedMessage id={ 'generate.generate' } /> }`,\n            `\\t\\t\\t\\t\\tcontrols={}`,\n            `\\t\\t\\t\\t></Layout>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, pageTableName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import ${pageTableName} from './components/Tables';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t<Layout`,\n            `\\t\\t\\t\\t\\ttitle={ <FormattedMessage id={ 'generate.generate' } /> }`,\n            `\\t\\t\\t\\t\\tcontrols={}`,\n            `\\t\\t\\t\\t>`,\n            `\\t\\t\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t\\t\\t<${pageTableName} />`,\n            `\\t\\t\\t\\t\\t</div>`,\n            `\\t\\t\\t\\t</Layout>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageTableName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button, Table } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            `import { v4 } from 'uuid';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageTableName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ valueNames }) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ valueNames }) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div className={Styles.tableContainer}>`,\n            `\\t\\t\\t\\t<${pageTableName}`,\n            `\\t\\t\\t\\t\\tclassName={Styles.table}`,\n            `\\t\\t\\t\\t\\tdataSource={ inspectionIntervals }`,\n            `\\t\\t\\t\\t\\tcolumns={columns}`,\n            `\\t\\t\\t\\t\\tpagination={pagination}`,\n            `\\t\\t\\t\\t\\tloading={fetchingVehicleInspectionIntervals}`,\n            `\\t\\t\\t\\t\\trowKey={() => v4()}`,\n            `\\t\\t\\t\\t\\tbordered`,\n            `\\t\\t\\t\\t/>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\n\n\n/**\n * This file created for generating config of a table component.\n */\nexport default () => {\n\n    const generateTableConfigFile = () => {\n        return (`    \n// vendor\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { DatePicker, InputNumber } from 'antd';\n\n//Proj\nimport { Numeral } from \"commons\";\n\n//Own\n\n//Choose width for each col, (100% in total or less than 100% if 'auto' is present)\nconst defWidth = {\n}\n\nconst DATETIME_FORMAT = 'DD.MM.YYYY';\n    \nexport function columnsConfig() {    \n    const storeGroupCol = {\n        title:     <FormattedMessage id='vehicle_page.store_group' />,\n        width:     defWidth.storeGroupCol,\n        dataIndex: 'storeGroupName',\n        key:       'storeGroupName',\n    };\n\n    return [\n        storeGroupCol,\n    ];\n}\n    \n        `);\n    }\n\n    return {\n        generateTableConfigFile\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\n\n/**\n * This module created for generating styles of a table component. But there is no need for generating it, we can just take one and return it as a string.\n */\nexport default () => {\n\n    const generateTableStyleFile = () => {\n        return (`    \n.table {\n    min-width: 0 !important;\n    width: 100%;\n}\n\n.table :global(.ant-table-header) {\n    text-transform: uppercase;\n    min-width: 0 !important; /*IMPORTANT it solves antd table issue when scrolling is added*/\n    padding: 0;\n}\n\n.table :global(.ant-pagination) {\n    float: none;\n    justify-content: center;\n    display: flex;\n}\n\n.table :global(th) {\n    padding: 6px 4px 6px 4px !important; /*Remove bug: when text overflows, header shifts left*/\n}\n\n.tableContainer {\n    background-color: transparent;\n    margin: 0.1em 0.2em 2em 0.2em;\n}\n\n        `);\n    }\n\n    return {\n        generateTableStyleFile\n    };\n}","//vendor\nimport { constantCase, camelCase, capitalCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n//own\nimport enricher from './enricher';\nimport duckGenerator from './duckGenerator';\nimport sagaGenerator from './sagaGenerator';\nimport pageGenerator from './pageGenerator';\n\n/**\n * \n * @param {*} params.moduleName \n * @param {*} params.actions  - Array of action objects\n * @example\n *  const actions = [\n *      {\n *          actionName: 'vehicles',\n *          actionType: ACTION_TYPES.fetch,\n *          actionFetchURL: undefined,\n *          actionInitValue: 'undefined',\n *      },\n *      {\n *          actionName: 'vehiclesFetching',\n *          actionType: ACTION_TYPES.set,\n *          actionInitValue: 'undefined',\n *      },\n *  ];\n */\nexport default (generationObject) => {\n    const enrichedGenerationObject = enricher(generationObject);\n    const { generatingComponent } = enrichedGenerationObject;\n\n    function generateDuckFile() {\n        const {\n            generateHeader,\n            generateConstants,\n            generateReducerInitState,\n            generateReducer,\n            generateSelectors,\n            generateActionCreators,\n        } = duckGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateHeader() + \"\\n\\n\"\n            + generateConstants() + \"\\n\"\n            + generateReducerInitState() + \"\\n\"\n            + generateReducer() + \"\\n\\n\"\n            + generateSelectors() + \"\\n\\n\"\n            + generateActionCreators() + \"\\n\";\n\n        return data;\n    }\n\n    function generateSagaFile() {\n        const {\n            generateImports,\n            generateSagas,\n            generateCommonSaga,\n        } = sagaGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateImports() + \"\\n\\n\"\n            + generateSagas() + \"\\n\"\n            + generateCommonSaga() + \"\\n\";\n\n        return data;\n    }\n\n    /**\n     * Generates pages depending on selected page mode(poor page, modal or something else)\n     * @returns Object that contains string representation of different files based on generation mode\n     */\n    function generatePages() {\n        const {\n            generatePoorPage,\n\n            generateTablePage,\n            generateTable,\n            generateTableConfig,\n            generateTableStyles,\n        } = pageGenerator(enrichedGenerationObject);\n\n        let generatedPages = {};\n\n        switch (generatingComponent) {\n            case COMPONENT_TYPES.poorPage:\n                generatedPages.poorPage = generatePoorPage();\n\n            case COMPONENT_TYPES.tablePage:\n                generatedPages.tablePage = generateTablePage();\n                generatedPages.table = generateTable();\n                generatedPages.tableConfig = generateTableConfig();\n                generatedPages.tableStyles = generateTableStyles();        \n        };\n\n        return generatedPages;\n    }\n\n    return {\n        generateDuckFile,\n        generateSagaFile,\n        generatePages,\n    };\n};","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from \"utils\";\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    const fetchActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.fetch)\n    const poorSagaActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.poorSagaAction)\n    const setActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.set)\n\n    function generateImports() {\n        let result = lines([\n            `// vendor`,\n            `import { call, put, all, take, select } from 'redux-saga/effects';`,\n            `import nprogress from 'nprogress';`,\n            `import _ from 'lodash';`,\n            `import moment from 'moment';`,\n            `import { notification } from 'antd';`,\n            ``,\n            `//proj`,\n            `import history from 'store/history';`,\n            `import book from 'routes/book';`,\n            `import { emitError } from 'core/ui/duck';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// own`,\n            `import {`,\n            ..._.map(fetchActions, ({constants}) => `\\t${constants.fetch},`),\n            ``,\n            ..._.map(fetchActions, ({constants}) => `\\t${constants.fetchSuccess},`),\n            ``,\n            ..._.map(poorSagaActions, ({constants}) => `\\t${constants.poorSagaAction},`),\n            ``,\n            ..._.map(setActions, ({constants}) => `\\t${constants.set},`),\n            `} from './duck';`,\n            `\\n`,\n        ]);\n        return result;\n    }\n\n    function generateSagas() {\n        let result = _.map(actions, ({actionType, propertyName, constants, actionCreators, actionFetchURL, sagas}) => {\n\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.fetch});`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(true));`,\n                        ``,\n                        `\\t\\t\\tconst ${propertyName} = yield call(fetchAPI, 'GET', \\`${actionFetchURL? actionFetchURL: \"\"}\\`);`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.fetchSuccess}({${propertyName}}));`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t} finally {`,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(false));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}`,\n                        `\\n`\n                    ]);\n                case ACTION_TYPES.poorSagaAction:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.poorSagaAction});`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}\\n`,\n                    ]);\n            }\n            \n        }).join(\"\");\n\n        return result;\n    }\n\n    function generateCommonSaga() {\n        let result = lines([\n            `export function* saga() {`,\n            `\\tyield all([`,\n\n            ..._.map(actions, ({actionType, sagas}) => {\n                switch (actionType) {\n                    case ACTION_TYPES.fetch:\n                    case ACTION_TYPES.poorSagaAction:\n                        return `\\t\\tcall(${sagas.sagaName}),`;\n                }\n                \n            }),\n\n            `\\t]);`,\n            `}`,\n        ]);\n\n        return result;\n    }\n\n    return {\n        generateImports,\n        generateSagas,\n        generateCommonSaga,\n    }\n};","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n/**\n * Generate array which represents one action. This action contains basic variables gained from the user.\n * \n * action: {\n *      actionName,\n *      actionType,\n *      actionFetchURL,\n *      actionInitValue,\n *      key\n * }\n * \n * @property { Function(actions) } actionsChanged - callback, called when actions are changed\n */\nexport default class InputArray extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //Init state obj\n        this.state = {\n            actions: []\n        };\n    }\n\n    /**\n     * Used to update state and perform additional actions.\n     * Call callback functions if something changed.\n     * @param {*} newState \n     */\n    updateState = (newState) => {\n        const { actionsChanged } = this.props;\n\n        this.setState(newState, () => actionsChanged && actionsChanged(_.get(this, 'state.actions')))\n    }\n\n    /**\n     * Generate new action with initial values setup\n     */\n    createNewItem = () => {\n        this.updateState({\n            actions: [\n                ..._.get(this, 'state.actions'),\n                {\n                    actionName: \"vehicles\",\n                    actionType: ACTION_TYPES.fetch,\n                    actionFetchURL: undefined,\n                    actionInitValue: DEF_INIT_VALUES.undefinedValue,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteItem = (key) => {\n        this.updateState({\n            actions: [\n                ..._.filter(_.get(this, 'state.actions'), (item) => item.key != key),\n            ]\n        })\n    }\n\n    /**\n     * Each action has its additional fields we have to render\n     * @param {*} params.key - action identifier\n     * @param {*} params.actionType - type of an action\n     */\n    _renderAdditionalFields = ({key, actionType, actionFetchURL, actionInitValue}) => {\n        switch (actionType) {\n            case ACTION_TYPES.fetch:\n                return (\n                    <div>\n                        <Input\n                            value={actionFetchURL}\n                            className=\"input\"\n                            placeholder=\"Fetching URL\"\n                            onChange={(e) => this.changeActionProps(key, {actionFetchURL: e.target.value})}\n                        />\n                        <Select\n                            value={actionInitValue}\n                            className=\"select\"\n                            placeholder=\"Init value\"\n                            onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                        >\n                            {_.map(DEF_INIT_VALUES, (value, key) => {\n                                return (\n                                    <Option value={value}>{sentenceCase(key)}</Option>\n                                )\n                            })}\n                        </Select>\n                    </div>\n                )\n            case ACTION_TYPES.set:\n                return (\n                    <Select\n                        value={actionInitValue}\n                        className=\"select\"\n                        placeholder=\"Select init value\"\n                        onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                    >\n                        {_.map(DEF_INIT_VALUES, (value, key) => {\n                            return (\n                                <Option value={value}>{sentenceCase(key)}</Option>\n                            )\n                        })}\n                    </Select>\n                )\n            default:\n                return undefined;\n        }\n\n    }\n\n    /**\n     * When changed input value of an action.\n     * Values will be replaced only if they are provided\n     * @param {*} key - uuid\n     * @param {*} params - action\n     */\n    changeActionProps = (key, {actionName, actionType, actionInitValue, actionFetchURL}) => {\n        const actions = _.get(this, 'state.actions');\n\n        const updatedActions = _.map(actions, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    actionName: actionName? actionName: item.actionName,\n                    actionType: actionType? actionType: item.actionType,\n                    actionInitValue: actionInitValue? actionInitValue: item.actionInitValue,\n                    actionFetchURL: (actionFetchURL || actionFetchURL === \"\")? actionFetchURL: item.actionFetchURL,\n                }\n            else\n                return item;\n        })\n\n        this.updateState({\n            actions: updatedActions\n        })\n    } \n\n\n    render() {\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={_.get(this, 'state.actions')}\n                    locale={{emptyText: (<div>No actions</div>)}}\n                    header={\n                        <Button onClick={() => this.createNewItem()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteItem(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                            key={v4()}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'actionName')}\n                                    className=\"input\"\n                                    onChange={(e) => this.changeActionProps(item.key, {actionName: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'actionType')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeActionProps(item.key, {actionType: key})}\n                                >\n                                    {_.map(ACTION_TYPES, (value, key) => (<Option value={value}>{constantCase(key)}</Option>))}\n                                </Select>\n\n                                <div>\n                                    {this._renderAdditionalFields(item)}\n                                </div>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view'\nimport { pascalCase } from 'change-case';\n\n//proj\nimport generators from \"generators\";\nimport { downloadZipFile } from 'utils';\nimport { COMPONENT_TYPES, TYPES_OF_FILES } from 'globalConstants';\nimport enricher from 'generators/enricher';\n\n//own\nimport InputArray from './InputArray';\nimport \"./styles.css\";\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\nconst RadioGroup = Radio.Group;\nconst TextArea = Input.TextArea;\n\nexport default class DuckGeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moduleName: \"test\",\n            moduleDescription: undefined,\n            generatingComponent: COMPONENT_TYPES.poorPage,\n            actions: [],\n        };\n    }\n\n    onGenerateFiles = () => {\n        const {moduleName, generatingComponent, moduleDescription, actions} = this.state;\n\n        if(!moduleName || _.isEmpty(actions)) {\n            notification.error({message: \"Not enough information provided!\"});\n            return;\n        }\n\n        const { generateDuckFile, generateSagaFile, generatePages } = generators({actions, moduleName, generatingComponent, moduleDescription});\n\n        let fileStructure = undefined;\n        const pages = generatePages();\n        const enrichedValues = enricher({actions, moduleName, generatingComponent, moduleDescription});\n\n        let componentName = \"\";\n        switch (generatingComponent) {\n            case COMPONENT_TYPES.poorPage:\n                componentName = enrichedValues.pageName;\n                fileStructure = [\n                    {\n                        type: TYPES_OF_FILES.directory,\n                        name: `${componentName}`,\n                        content: [\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'redux',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'duck',\n                                        extension: '.js',\n                                        content: generateDuckFile(),\n                                    },\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'saga',\n                                        extension: '.js',\n                                        content: generateSagaFile(),\n                                    },\n                                ]\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'index',\n                                extension: '.js',\n                                content: pages.poorPage,\n                            },\n                        ]\n                    }\n                ];\n                break;\n            case COMPONENT_TYPES.tablePage:\n                componentName = enrichedValues.pageName;\n                fileStructure = [\n                    {\n                        type: TYPES_OF_FILES.directory,\n                        name: `${componentName}`,\n                        content: [\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'components',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.directory,\n                                        name: 'tables',\n                                        content: [\n                                            {\n                                                type: TYPES_OF_FILES.directory,\n                                                name: enrichedValues.pageTableName,\n                                                content: [\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'index',\n                                                        extension: '.js',\n                                                        content: pages.table,\n                                                    },\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'styles',\n                                                        extension: '.m.css',\n                                                        content: pages.tableStyles,\n                                                    },\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'config',\n                                                        extension: '.js',\n                                                        content: pages.tableConfig,\n                                                    },\n                                                ],\n                                            },\n                                            {\n                                                type: TYPES_OF_FILES.file,\n                                                name: 'index',\n                                                extension: '.js',\n                                                content: '//Import and export all',\n                                            }\n                                        ],\n                                    }\n                                ],\n                            },\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'redux',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'duck',\n                                        extension: '.js',\n                                        content: generateDuckFile(),\n                                    },\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'saga',\n                                        extension: '.js',\n                                        content: generateSagaFile(),\n                                    },\n                                ]\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'index',\n                                extension: '.js',\n                                content: pages.tablePage,\n                            },\n                        ]\n                    }\n                ];\n                break;\n            case COMPONENT_TYPES.modal:\n                componentName = pascalCase(`${moduleName} modal`);\n                break;\n        }\n        \n        downloadZipFile(fileStructure);\n\n        notification.info({\n            message: (\n                <div>\n                    <div>{`Module: ${moduleName}`}</div>\n                </div>\n            )\n        });\n    }\n\n    render() {\n\n        const {actions, moduleName, generatingComponent, moduleDescription} = this.state;\n\n        return (\n            <div className=\"mainConst\">\n                <Collapse className=\"collapse\" defaultActiveKey={['1', '2']}>\n                    <Panel header=\"Settings\" key=\"1\">\n                        <div className=\"settingsContainer\">\n                            <Input\n                                placeholder=\"Module name\"\n                                value={moduleName}\n                                onChange={(e) => this.setState({moduleName: e.target.value})}\n                            />\n\n                            <TextArea\n                                placeholder=\"Module description(comment)\"\n                                rows={4}\n                                className=\"textArea\"\n                                onChange={(e) => this.setState({moduleDescription: e.target.value})}\n                            />\n\n                            <div className=\"radioCont\">\n                                Module type:\n                                <br /> \n                                <RadioGroup value={generatingComponent} onChange={(e) => this.setState({generatingComponent: e.target.value})}>\n                                    <Radio value={COMPONENT_TYPES.poorPage}>Poor page</Radio>\n                                    <Radio value={COMPONENT_TYPES.tablePage}>Table page</Radio>\n                                    <Radio value={COMPONENT_TYPES.modal}>Modal</Radio>\n                                </RadioGroup>\n                            </div>\n                        </div>\n                    </Panel>\n                    <Panel header=\"Create actions\" key=\"2\">\n                        <div className=\"settingsContainer\">\n                            <Tabs className=\"tabs\" tabPosition=\"left\">\n                                <TabPane tab=\"Actions generator\" key=\"1\">\n                                    <InputArray\n                                        actionsChanged={(actions) => {\n                                            this.setState({ actions });\n                                        }}\n                                    />\n                                </TabPane>\n                                <TabPane tab=\"Input\" key=\"2\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={this.state}\n                                        />\n                                    </div>\n                                </TabPane>\n                                <TabPane tab=\"Generation object\" key=\"3\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={enricher({actions, moduleName, generatingComponent, moduleDescription})}\n                                        />\n                                    </div>\n                                </TabPane>\n                            </Tabs>\n                        </div>\n                    </Panel>\n                </Collapse>\n\n                <Button className=\"generateButton\" onClick={() => this.onGenerateFiles()}>Generate</Button>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//vedor\nimport 'antd/dist/antd.css'; //Styles for all antd components, if you remove this - antd will not work\n\n//proj\nimport DuckGeteratorPage from './DuckGeneratorPage';\nimport logo from './logo.svg';\n\n//own\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\tBoilerplate reducer\n\t\t\t\t</div>\n\t\t\t</header>\n\n\t\t\t<div>\n\t\t\t\t<DuckGeteratorPage />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n","/**\n * Different types of actions require different processing, for example we have to have at\n * least two duck actions created for \"fetch\" type - FETCH_SOMETHING and FETCH_SOMETHING_SUCCESS\n */\nconst ACTION_TYPES = Object.freeze({\n    fetch: \"fetch\",\n    set: \"set\",\n    poorSagaAction: \"poorSagaAction\",\n    poorReducerAction: \"poorReducerAction\",\n});\n\n/**\n * Sometimes you have to specify default init values, those are strings.\n * Each of them represent real JS value which often used as default initializing value.\n */\nconst DEF_INIT_VALUES = Object.freeze({\n    undefinedValue: 'undefined',\n    nullValue: 'null',\n    emptyString: `\\\"\\\"`,\n    zero: '0',\n    emptyObject: '{}',\n    emptyArray: '[]',\n});\n\n/**\n * There are different types of components to generate. We can generate table, modal or something else.\n */\nconst COMPONENT_TYPES = Object.freeze({\n    poorPage: \"poorPage\",\n    tablePage: \"tablePage\",\n    modal: \"modal\",\n});\n\nconst TYPES_OF_FILES = Object.freeze({\n    file: 'file',\n    directory: 'directory',\n});\n\nmodule.exports = {\n    ACTION_TYPES,\n    DEF_INIT_VALUES,\n    COMPONENT_TYPES,\n    TYPES_OF_FILES\n};"],"sourceRoot":""}