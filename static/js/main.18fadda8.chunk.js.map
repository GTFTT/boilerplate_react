{"version":3,"sources":["routes/Main.js","generators/enricher.js","utils/fileSaver.js","utils/index.js","generators/duckGenerator/index.js","generators/pageGenerator/index.js","generators/pageGenerator/poorPageGenerator/poorPageGenerator.js","generators/pageGenerator/tablePageGenerator/tablePageGenerator.js","generators/pageGenerator/tablePageGenerator/tableGenerator.js","generators/pageGenerator/tablePageGenerator/tableConfigGenerator.js","generators/pageGenerator/tablePageGenerator/tableStylesGenerator.js","generators/pageGenerator/tablePageGenerator/tablesIndexGenerator.js","generators/index.js","generators/sagaGenerator/index.js","generators/messagesGenerator/index.js","pages/FrontendBoilerplateGeneratorPage/ActionsArray/index.js","pages/FrontendBoilerplateGeneratorPage/TranslationsArray/index.js","pages/FrontendBoilerplateGeneratorPage/TableConfigurationsArray/constants.js","pages/FrontendBoilerplateGeneratorPage/TableConfigurationsArray/index.js","pages/FrontendBoilerplateGeneratorPage/index.js","pages/Home/index.js","routes/Public.js","store/history.js","store/middleware.js","store/enhancers.js","store/rootReducer.js","pages/FrontendBoilerplateGeneratorPage/redux/saga.js","store/rootSaga.js","store/store.js","UI/Navigation/logo.svg","UI/Navigation/components/NavigationButton/index.js","UI/Navigation/index.js","UI/Navigation/config.js","App.js","index.js","pages/FrontendBoilerplateGeneratorPage/redux/duck.js","routes/book.js","globalConstants/index.js"],"names":["Routes","Component","hot","module","generationObject","moduleName","generationComponentType","actions","translations","moduleNameCamelCase","tableConfigs","camelCase","pageName","pascalCase","pageTableName","modalName","translationComponentName","COMPONENT_TYPES","poorPage","tablePage","enrichedActions","_","map","action","enriched","constants","actionCreators","sagas","actionType","ACTION_TYPES","fetch","setFetching","constantCase","actionName","fetchSuccess","sagaName","valueNames","value","fetchingValue","selectors","propertyName","set","poorSagaAction","poorReducerAction","Object","freeze","enrichActions","enrichedTranslations","componentName","translation","constantEn","snakeCase","translationName","translationEn","constantUk","translationUk","constantRu","translationRu","formattedMessage","formatMessage","enrichTranslations","fileBuilder","fileBuildingObject","zipFile","prevDeep","type","name","extension","content","fileProps","currDeep","TYPES_OF_FILES","file","directory","newZipFileInstance","folder","each","obj","lines","textArr","filter","line","Boolean","join","generateHeader","generateConstants","result","generateConstant","generateReducerInitState","actionInitValue","res","generateReducerInitStateSnippet","generateReducer","generateReducerSnippet","generateSelectors","generateActionCreators","generateActionSnippet","moduleDescription","generatePoorPage","generateImports","generateMapStateToProps","generateMapDispatchToProps","generateClass","split","str","poorPageGenerator","generateTablePage","tablePageGenerator","generateTable","tableGenerator","generateTableConfig","generateTableConfigFile","generateTableStyles","generateTableStyleFile","generateTablesIndexFile","generateTableIndexFile","tablesIndexGenerator","enrichedGenerationObject","enricher","generateDuckFile","duckGenerator","generateSagaFile","fetchActions","poorSagaActions","setActions","generateSagas","actionFetchURL","generateCommonSaga","sagaGenerator","generatePages","pageGenerator","generatedPages","table","tableConfig","tableStyles","tablesIndexFile","generateMessagesFile","messagesGenerator","Item","List","Option","Select","mapDispatchToProps","ActionsArray","updateActions","props","actionsChanged","createNewAction","undefined","DEF_INIT_VALUES","undefinedValue","key","v4","deleteAction","item","_renderAdditionalFields","className","placeholder","onChange","e","changeActionProps","target","initValue","sentenceCase","updatedActions","this","size","bordered","dataSource","locale","emptyText","header","onClick","renderItem","DeleteTwoTone","get","React","connect","state","selectActions","setTranslations","updateTranslations","createTranslation","deleteTranslation","changeTranslation","options","updatedTranslations","selectTranslations","ALIGN","left","right","center","setTableConfigs","TableConfigurationsArray","updateTableConfigs","createTableConfig","tableConfigTranslationKey","tableConfigName","tableConfigWidth","tableConfigDataIndex","tableConfigAlign","deleteTableConfig","changeTableConfig","updatedTableConfigs","align","selectTableConfigs","Panel","Collapse","TabPane","Tabs","RadioGroup","Radio","Group","TextArea","Input","setModuleName","setModuleDescription","setGenerationComponentType","FrontendBoilerplateGeneratorPage","onGenerateFiles","isEmpty","generators","fileStructure","pages","enrichedValues","modal","filesTree","filename","fileExtension","initZipDeep","zip","JSZip","generateAsync","then","saveAs","catch","console","log","downloadZipFile","notification","info","message","error","defaultActiveKey","rows","TranslationsArray","tabPosition","tab","displayObjectSize","displayDataTypes","collapseStringsAfterLength","src","selectModuleName","selectModuleDescription","selectGenerationComponentType","Home","Public","exact","component","path","book","home","render","frontendBoilerplateGenerator","to","history","createBrowserHistory","routerMiddleware","createRouterMiddleware","sagaMiddleware","createSagaMiddleware","middleware","thunk","logger","createLogger","require","duration","timestamp","collapsed","diff","colors","title","prevState","nextState","push","persistConfig","storage","persistStorage","whitelist","frontendBoilerplateGeneratorPageModule","persistedState","router","connectRouter","appState","frontendBoilerplateGeneratorPageReducer","appReducer","combineReducers","rootReducer","persistReducer","payload","resetedState","LOCATION_CHANGE","keys","reduce","reducer","saga","all","rootSaga","frontendBoilerplateGeneratorPage","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","composeEnhancers","applyMiddleware","persistor","persistStore","run","NavigationButton","label","Navigation","navigationConfig","backendBoilerplateGenerator","children","logo","alt","App","loading","ReactDOM","StrictMode","document","getElementById","prefix","SET_MODULE_NAME","SET_MODULE_DESCRIPTION","SET_GENERATION_COMPONENT_TYPE","SET_ACTIONS","SET_TRANSLATIONS","SET_TABLE_CONFIGS","ReducerState","nullValue","emptyString","zero","emptyObject","emptyArray","false","true","exports"],"mappings":"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","file":"static/js/main.18fadda8.chunk.js","sourcesContent":["// vendor\nimport React, { Component } from \"react\";\nimport { hot } from \"react-hot-loader\";\n\n// proj\n\n// own\nimport Public from \"./Public\";\n\n/**\n * Central route handler, it will decide which routes is currently available\n */\nclass Routes extends Component {\n    render() {\n        return (\n            <Public />\n        );\n    }\n}\n\nexport default hot(module)(Routes)","//vendor\nimport { constantCase, camelCase, capitalCase, pascalCase, snakeCase } from 'change-case'; //For converting different types of variables(camelCase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n/**\n * Actions enriching - generating more fields that can be used later\n * @param {*} actions \n * @returns Enriched actions\n */\nfunction enrichActions(actions) {\n    const enrichedActions = _.map(actions, (action) => {\n        let enriched =  {\n            ...action,\n            constants: {}, //Constant names, can be more than one\n            actionCreators: {}, //Action function names, different for different types of actions\n            sagas: {}, //Action function names, different for different types of actions\n        };\n\n        switch (action.actionType) {\n            case ACTION_TYPES.fetch:\n                enriched.constants = {\n                    setFetching: constantCase(`set fetching ${action.actionName}`),\n                    fetch: constantCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: constantCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.actionCreators = {\n                    setFetching: camelCase(`set fetching ${action.actionName}`),\n                    fetch: camelCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: camelCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionType} ${action.actionName} saga`)\n                }\n\n                //Used to store data inside them\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`),\n                    fetchingValue: camelCase(`fetching ${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                    fetchingValue: camelCase(`select fetching ${action.actionName}`)\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.set:\n                enriched.constants = {\n                    set: constantCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    set: camelCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.poorSagaAction:\n                enriched.constants = {\n                    poorSagaAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionName} saga`)\n                }\n\n                enriched.actionCreators = {\n                    poorSagaAction: camelCase(`${action.actionName}`),\n                }\n                break;\n\n            case ACTION_TYPES.poorReducerAction:\n                enriched.constants = {\n                    poorReducerAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    poorReducerAction: camelCase(`${action.actionName}`),\n                }\n                break;\n        }\n\n        return enriched;\n    })\n    return Object.freeze(enrichedActions);\n}\n\nfunction enrichTranslations(componentName, translations) {\n\n    const enrichedTranslations = _.map(translations, (translation) => {\n        let enriched =  {\n            ...translation,\n            constantEn: `\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\": \"${translation.translationEn || ''}\"`,\n            constantUk: `\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\": \"${translation.translationUk || ''}\"`,\n            constantRu: `\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\": \"${translation.translationRu || ''}\"`,\n            formattedMessage: `<FormattedMessage id=\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\">`,\n            formatMessage: `formatMessage({ id: '${snakeCase(componentName )}.${snakeCase(translation.translationName)}' })`,\n        };\n\n        return enriched;\n    })\n    return Object.freeze(enrichedTranslations);\n}\n\n\n/**\n * Before we start generation we have to enrich generation object - add more fields and pre-generate some variables.\n */\nexport default (generationObject) => {\n    const { moduleName, generationComponentType, actions, translations, tableConfigs } = generationObject;\n\n    const moduleNameCamelCase = camelCase(moduleName);\n    const pageName = pascalCase(`${moduleName} page`);\n    const pageTableName = pascalCase(`${moduleName} table`);\n    const modalName = pascalCase(`${moduleName} modal`);\n\n    //Component name for generating translations\n    const translationComponentName = (generationComponentType in [COMPONENT_TYPES.poorPage, COMPONENT_TYPES.tablePage] )\n        ? pageName\n        : modalName;\n\n    const enrichedActions = enrichActions(actions);\n    const enrichedTranslations = enrichTranslations(translationComponentName, translations);\n\n    const componentName = (generationComponentType == COMPONENT_TYPES.poorPage)\n        ? pageName\n        : (generationComponentType == COMPONENT_TYPES.tablePage)\n            ? pageTableName\n            : modalName;\n\n    return {\n        ...generationObject,\n\n        moduleName: moduleNameCamelCase,\n        componentName, //Current component name\n        actions: enrichedActions,\n        translations: enrichedTranslations,\n        pageName,\n        pageTableName,\n        modalName,\n    };\n}","/*\n    This module is created for handle file saving operations.\n*/\n\n//vendor\nimport _ from \"lodash\";\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\n//proj\nimport { TYPES_OF_FILES } from 'globalConstants';\n\n//own\n\nconst MAX_ZIP_DEEP = 10;\n\n/**\n * Save file on user's local machine. Just provide content you wnat to save.\n * @param { String } text - content of a file\n * \n * @example \n * downloadTxtFile(\"Hello world\", \"hello.txt\")\n */\n export const downloadTxtFile = (text, filename = 'myFile.txt') => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}\n\n/**\n * ***Recursive*** function for building zip file structure by creating nested files/folders or just creating a file on current iteration.\n * @param {*} fileBuildingObject This is one of file or folder objects used for generating;\n * @param {*} zipFile - instance of JSZip file on current iteration.\n * @param {*} prevDeep - previous deep value, used to indicate too deep folders nesting(possibly recursive dead loop)\n */\nconst fileBuilder = (fileBuildingObject, zipFile, prevDeep) => {\n    const { type, name, extension, content, fileProps } = fileBuildingObject;\n    const currDeep = prevDeep + 1;\n    \n    if(currDeep >= MAX_ZIP_DEEP) throw \"Error, max folder deep when generating zip file reached. Make sure you do not have recursive dead loop here!\"\n    if(!name) throw \"No name provided for one of the files\";\n    if(!type) throw \"No type provided for one of the files\";\n\n    switch (type) {\n        case TYPES_OF_FILES.file:\n            zipFile.file(`${name}${extension? extension: \"\"}`, content, fileProps);\n            break;\n\n        case TYPES_OF_FILES.directory:\n            const newZipFileInstance = zipFile.folder(name);\n            _.each(content, (obj) => fileBuilder(obj, newZipFileInstance, currDeep));\n            break;\n    }\n}\n\n/**\n * Used to generate zip file and save it on user's local pc vi saveAs. This used recursive method of building directories structure\n * so it can be used for different purposes and file structures. For object reference see examples.\n * @param {*} filesTree \n * @param {*} filename \n * @param {*} fileExtension\n * \n * @example\n * // example of filesTree:\n * const plug = [\n *      {\n *          type: TYPES_OF_FILES.file,\n *          name: 'helloTxt',\n *          content: \"Hello world\",\n *          extension: '.txt',\n *          fileProps: undefined\n *      },\n *      {\n *          type: TYPES_OF_FILES.directory,\n *          name: 'myDir',\n *          content: [\n *              {\n *                  type: TYPES_OF_FILES.file,\n *                  name: 'helloTxt2',\n *                  extension: '.txt',\n *                  content: \"Hello 2\",\n *                  fileProps: undefined\n *              },\n *              {\n *                  type: TYPES_OF_FILES.file,\n *                  name: 'smile',\n *                  extension: '.png',\n *                  content: \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAvUlEQVRIS+2VQQ6AIAwE7f8fjcGIQSJ0FpRw0CuG6W7p1kIIYZv42dJAMzu8GDFFUhiBEZbAPXAMTLCy3apqBKzBEtw7z4t0gfQyavNaQKouWkZ72VRIgRR2FOYNvgelvbseWC+wBHmFYWDen6fITUFA08e19DZDZ9I8Df8nwNpSoXaiR0M211SgAntF4VSgChtSqKRLc1uQqnthVYV5ipRbfQSGLW0VQMZGWsDqhd7/UrR5l5HzH0hckv7ZAQ7W2K0nyHmFAAAAAElFTkSuQmCC\",\n *                  fileProps: {base64: true},\n *              },\n *          ]\n *      }\n *  ];\n */\nexport const downloadZipFile = (filesTree, filename = 'myFile', fileExtension = '.zip') => {\n    \n    const initZipDeep = 0; //How many folders deep created\n    var zip = new JSZip();\n\n    // Build zip file\n    _.each(filesTree, obj => fileBuilder(obj, zip, initZipDeep));\n\n    // Save file\n    zip.generateAsync({type:\"blob\"})\n        .then(function(content) {\n            saveAs(content, `${filename}${fileExtension}`);\n        })\n        .catch(console.log);\n}","//vendor\nimport _ from \"lodash\";\n\n/**\n * Generate text from array of lines with new line at the end of each.\n * Last line does not have a new line character.\n * All falsy lines will be removed (but empty string remains)\n * @param { Array } text - array of strings\n */\nexport const lines = (textArr) => {\n    const filteredLines = _.filter(textArr, (line) => Boolean(line) || line === \"\"); // Remove all false values except of empty string\n    \n    return filteredLines.join(\"\\n\");\n}\n\nexport * from './fileSaver';","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\nfunction generateConstant({ actionType, constants }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result +=`export const ${constants.fetch} = \\`\\${prefix}/${constants.fetch}\\`;\\n`;\n            result +=`export const ${constants.fetchSuccess} = \\`\\${prefix}/${constants.fetchSuccess}\\`;\\n`;\n            result +=`export const ${constants.setFetching} = \\`\\${prefix}/${constants.setFetching}\\`;\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            result +=`export const ${constants.set} = \\`\\${prefix}/${constants.set}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            result +=`export const ${constants.poorSagaAction} = \\`\\${prefix}/${constants.poorSagaAction}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result +=`export const ${constants.poorReducerAction} = \\`\\${prefix}/${constants.poorReducerAction}\\`;\\n`;\n            break;\n    }\n\n    return result;\n}\n\n/** Reducer snippet is a line that contains variable name */\nfunction generateReducerInitStateSnippet({ actionInitValue, actionType, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            res += `\\t${valueNames.fetchingValue}: false,\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            break;    \n    }\n\n    return res;\n}\n\n\n/**\n * Reducer's state changer inside switch statement\n */\nfunction generateReducerSnippet({ actionType, constants, valueNames }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result = lines([\n                `\\t\\tcase ${constants.fetchSuccess}:`,\n                `\\t\\t\\tconst { ${valueNames.value} } = payload;`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: ${valueNames.value},`,\n                '\\t\\t\\t};',\n                `\\t\\tcase ${constants.setFetching}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.fetchingValue}: payload,`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            result = lines([\n                `\\t\\tcase ${constants.set}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: payload`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result = lines([\n                `\\t\\tcase ${constants.poorReducerAction}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Actions are functions that can be called when you want to change the state\n */\nfunction generateActionSnippet({ actionType, actionName, actionCreators, constants, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += lines([\n                `export const ${actionCreators.fetch} = () => ({`,\n                `\\ttype: \\t${constants.fetch},`,\n                '});\\n',\n                `export const ${actionCreators.fetchSuccess} = ({${valueNames.value}}) => ({`,\n                `\\ttype: \\t${constants.fetchSuccess},`,\n                `\\tpayload: {${valueNames.value}}`,\n                '});\\n',\n                `export const ${actionCreators.setFetching} = (value) => ({`,\n                `\\ttype: \\t${constants.setFetching},`,\n                '\\tpayload: value',\n                '});\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += lines([\n                `export const ${actionCreators.set} = (value) => ({`,\n                `\\ttype: \\t${constants.set},`,\n                '\\tpayload: value',\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            res += lines([\n                `export const ${actionCreators.poorSagaAction} = () => ({`,\n                `\\ttype: \\t${constants.poorSagaAction},`,\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            res += lines([\n                `export const ${actionCreators.poorReducerAction} = () => ({`,\n                `\\ttype: \\t${constants.poorReducerAction},`,\n                '});\\n'\n            ]);\n            break;\n    }\n\n    return res;\n}\n\n/**\n * Module pattern is used here to generate data. This generator is used for creating duck files.\n * \n * @param { String } moduleName - name of the module you want to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    /**\n     * @returns Header of a duck file\n     */\n    function generateHeader() {\n        let result = lines([\n            `/** ------------------------------------- Constants ------------------------------------- **/`,\n            `export const moduleName = '${moduleName}';`,\n            `const prefix = \\`cpb/\\${moduleName}\\`;`,\n            '',\n        ]);\n    \n        return result;\n    }\n\n    /**\n     * @param {*} params.actions - actions to generate constants for\n     */\n    function generateConstants() {\n        let result = \"\";\n\n        _.each(actions, (action) => {\n            result+=generateConstant(action);\n        });\n\n        return result;\n    }\n\n    function generateReducerInitState() {\n        let result = lines([\n            '/** ------------------------------------- Reducer ------------------------------------- **/',\n            'const ReducerState = {\\n',\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerInitStateSnippet(action);\n        });\n        result+= '};\\n';\n\n        return result;\n    }\n\n    function generateReducer() {\n        let result = lines([\n            `export default function reducer(state = ReducerState, action) {`,\n            `\\tconst { type, payload } = action;`,\n            `\\tswitch (type) {\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerSnippet(action);\n        })\n\n        result += lines([\n            `\\t\\tdefault:`,\n            `\\t\\t\\treturn state;`,\n            `\\t}`,\n            `}`,\n        ]);\n    \n        return result;\n    }\n\n    function generateSelectors() {\n        let res = lines([\n            `/* ------------------------------------- Selectors ------------------------------------- */\\n`,\n        ]);\n\n        _.each(actions, ({ actionType, actionName, selectors, valueNames }) => {\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    res += `export const ${selectors.fetchingValue} = state => state[ moduleName ].${valueNames.fetchingValue};\\n\\n`;\n                    break;\n        \n                case ACTION_TYPES.set:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    break;    \n            }\n        });\n    \n        return res;\n    }\n\n    function generateActionCreators() {\n        let result = lines([\n            `/* ------------------------------------- Action Creators -------------------------- */\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateActionSnippet(action);\n        });\n    \n        return result;\n    }\n\n    return {\n        generateHeader,\n        generateConstants,\n        generateReducerInitState,\n        generateReducer,\n        generateSelectors,\n        generateActionCreators,\n    }\n};","\n//own\nimport { lines } from \"utils\";\nimport poorPageGenerator from \"./poorPageGenerator/poorPageGenerator\";\n\nimport tablePageGenerator from \"./tablePageGenerator/tablePageGenerator\";\nimport tableGenerator from \"./tablePageGenerator/tableGenerator\";\nimport tableConfigGenerator from \"./tablePageGenerator/tableConfigGenerator\";\nimport tableStylesGenerator from \"./tablePageGenerator/tableStylesGenerator\";\nimport tablesIndexGenerator from \"./tablePageGenerator/tablesIndexGenerator\";\n\nexport default (generationObject) => {\n    const { moduleDescription, actions} = generationObject;\n\n    /** Poor page, contains nothing except basic layout. */\n    const generatePoorPage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = poorPageGenerator({moduleDescription, actions});\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    };\n\n    /** This is the page where table is invoked for rendering, there can be placed filters, modals, main description of the module etc. */\n    const generateTablePage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = tablePageGenerator(generationObject);\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    }\n\n    /** This file contains table file, there configs and styles are connected */\n    const generateTable = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = tableGenerator(generationObject);\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    }\n\n    /** File that contains table's columns configuration */\n    const generateTableConfig = () => {\n        const { generateTableConfigFile } = tableConfigGenerator(generationObject);\n        return generateTableConfigFile();\n    }\n\n    /** Basic table styles and styles for fixing known issues */\n    const generateTableStyles = () => {\n        const { generateTableStyleFile } = tableStylesGenerator(generationObject);\n        return generateTableStyleFile();\n    }\n\n    /** index.js file for exporting table from tables directory */\n    const generateTablesIndexFile = () => {\n        const { generateTableIndexFile } = tablesIndexGenerator(generationObject);\n        return generateTableIndexFile();\n    }\n\n    return {\n        generatePoorPage,\n\n        generateTablePage,\n        generateTable,\n        generateTableConfig,\n        generateTableStyles,\n        generateTablesIndexFile,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t<Layout`,\n            `\\t\\t\\t\\t\\ttitle={ <FormattedMessage id={ 'generate.generate' } /> }`,\n            `\\t\\t\\t\\t\\tcontrols={}`,\n            `\\t\\t\\t\\t></Layout>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, pageTableName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import ${pageTableName} from './components/tables';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t<Layout`,\n            `\\t\\t\\t\\t\\ttitle={ <FormattedMessage id={ 'generate.generate' } /> }`,\n            `\\t\\t\\t\\t\\tcontrols={}`,\n            `\\t\\t\\t\\t>`,\n            `\\t\\t\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t\\t\\t<${pageTableName} />`,\n            `\\t\\t\\t\\t\\t</div>`,\n            `\\t\\t\\t\\t</Layout>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageTableName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button, Table } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            `import { v4 } from 'uuid';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageTableName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ valueNames }) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ valueNames }) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div className={Styles.tableContainer}>`,\n            `\\t\\t\\t\\t<${pageTableName}`,\n            `\\t\\t\\t\\t\\tclassName={Styles.table}`,\n            `\\t\\t\\t\\t\\tdataSource={ inspectionIntervals }`,\n            `\\t\\t\\t\\t\\tcolumns={columns}`,\n            `\\t\\t\\t\\t\\tpagination={pagination}`,\n            `\\t\\t\\t\\t\\tloading={fetchingVehicleInspectionIntervals}`,\n            `\\t\\t\\t\\t\\trowKey={() => v4()}`,\n            `\\t\\t\\t\\t\\tbordered`,\n            `\\t\\t\\t\\t/>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\n\n\n/**\n * This file created for generating config of a table component.\n */\nexport default () => {\n\n    const generateTableConfigFile = () => {\n        return (`    \n// vendor\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { DatePicker, InputNumber } from 'antd';\n\n//Proj\nimport { Numeral } from \"commons\";\n\n//Own\n\n//Choose width for each col, (100% in total or less than 100% if 'auto' is present)\nconst defWidth = {\n}\n\nconst DATETIME_FORMAT = 'DD.MM.YYYY';\n    \nexport function columnsConfig() {    \n    const storeGroupCol = {\n        title:     <FormattedMessage id='vehicle_page.store_group' />,\n        width:     defWidth.storeGroupCol,\n        dataIndex: 'storeGroupName',\n        key:       'storeGroupName',\n    };\n\n    return [\n        storeGroupCol,\n    ];\n}\n    \n        `);\n    }\n\n    return {\n        generateTableConfigFile\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\n\n/**\n * This module created for generating styles of a table component. But there is no need for generating it, we can just take one and return it as a string.\n */\nexport default () => {\n\n    const generateTableStyleFile = () => {\n        return (`    \n.table {\n    min-width: 0 !important;\n    width: 100%;\n}\n\n.table :global(.ant-table-header) {\n    text-transform: uppercase;\n    min-width: 0 !important; /*IMPORTANT it solves antd table issue when scrolling is added*/\n    padding: 0;\n}\n\n.table :global(.ant-pagination) {\n    float: none;\n    justify-content: center;\n    display: flex;\n}\n\n.table :global(th) {\n    padding: 6px 4px 6px 4px !important; /*Remove bug: when text overflows, header shifts left*/\n}\n\n.tableContainer {\n    background-color: transparent;\n    margin: 0.1em 0.2em 2em 0.2em;\n}\n\n        `);\n    }\n\n    return {\n        generateTableStyleFile\n    };\n}","//vendor\nimport _ from 'lodash';\n\n/**\n * index.js file for exporting table from tables directory\n */\nexport default ({pageTableName}) => {\n\n    const generateTableIndexFile = () => {\n        return (`export { default as ${pageTableName} } from './${pageTableName}';`);\n    }\n\n    return {\n        generateTableIndexFile\n    };\n}","//vendor\nimport { constantCase, camelCase, capitalCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n//own\nimport enricher from './enricher';\nimport duckGenerator from './duckGenerator';\nimport sagaGenerator from './sagaGenerator';\nimport pageGenerator from './pageGenerator';\nimport messagesGenerator from './messagesGenerator';\n\n/**\n * \n * @param {*} params.moduleName \n * @param {*} params.actions  - Array of action objects\n * @example\n *  const actions = [\n *      {\n *          actionName: 'vehicles',\n *          actionType: ACTION_TYPES.fetch,\n *          actionFetchURL: undefined,\n *          actionInitValue: 'undefined',\n *      },\n *      {\n *          actionName: 'vehiclesFetching',\n *          actionType: ACTION_TYPES.set,\n *          actionInitValue: 'undefined',\n *      },\n *  ];\n */\nexport default (generationObject) => {\n    const enrichedGenerationObject = enricher(generationObject);\n    const { generationComponentType } = enrichedGenerationObject;\n\n    function generateDuckFile() {\n        const {\n            generateHeader,\n            generateConstants,\n            generateReducerInitState,\n            generateReducer,\n            generateSelectors,\n            generateActionCreators,\n        } = duckGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateHeader() + \"\\n\\n\"\n            + generateConstants() + \"\\n\"\n            + generateReducerInitState() + \"\\n\"\n            + generateReducer() + \"\\n\\n\"\n            + generateSelectors() + \"\\n\\n\"\n            + generateActionCreators() + \"\\n\";\n\n        return data;\n    }\n\n    function generateSagaFile() {\n        const {\n            generateImports,\n            generateSagas,\n            generateCommonSaga,\n        } = sagaGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateImports() + \"\\n\\n\"\n            + generateSagas() + \"\\n\"\n            + generateCommonSaga() + \"\\n\";\n\n        return data;\n    }\n\n    /**\n     * Generates pages depending on selected page mode(poor page, modal or something else)\n     * @returns Object that contains string representation of different files based on generation mode\n     */\n    function generatePages() {\n        const {\n            generatePoorPage,\n\n            generateTablePage,\n            generateTable,\n            generateTableConfig,\n            generateTableStyles,\n            generateTablesIndexFile,\n        } = pageGenerator(enrichedGenerationObject);\n\n        let generatedPages = {};\n\n        //Return specific object for selected type of page\n        switch (generationComponentType) {\n            case COMPONENT_TYPES.poorPage:\n                generatedPages.poorPage = generatePoorPage();\n\n            case COMPONENT_TYPES.tablePage:\n                generatedPages.tablePage = generateTablePage();\n                generatedPages.table = generateTable();\n                generatedPages.tableConfig = generateTableConfig();\n                generatedPages.tableStyles = generateTableStyles();        \n                generatedPages.tablesIndexFile = generateTablesIndexFile();        \n        };\n\n        return generatedPages;\n    }\n\n    function generateMessagesFile() {\n        const {\n            generateMessagesFile\n        } = messagesGenerator(enrichedGenerationObject);\n\n        return generateMessagesFile();\n\n    }\n\n    return {\n        generateDuckFile,\n        generateSagaFile,\n        generatePages,\n        generateMessagesFile,\n    };\n};","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from \"utils\";\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    const fetchActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.fetch)\n    const poorSagaActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.poorSagaAction)\n    const setActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.set)\n\n    function generateImports() {\n        let result = lines([\n            `// vendor`,\n            `import { call, put, all, take, select } from 'redux-saga/effects';`,\n            `import nprogress from 'nprogress';`,\n            `import _ from 'lodash';`,\n            `import moment from 'moment';`,\n            `import { notification } from 'antd';`,\n            ``,\n            `//proj`,\n            `import history from 'store/history';`,\n            `import book from 'routes/book';`,\n            `import { emitError } from 'core/ui/duck';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// own`,\n            `import {`,\n            ..._.map(fetchActions, ({constants}) => `\\t${constants.fetch},`),\n            ``,\n            ..._.map(fetchActions, ({constants}) => `\\t${constants.fetchSuccess},`),\n            ``,\n            ..._.map(poorSagaActions, ({constants}) => `\\t${constants.poorSagaAction},`),\n            ``,\n            ..._.map(setActions, ({constants}) => `\\t${constants.set},`),\n            `} from './duck';`,\n            `\\n`,\n        ]);\n        return result;\n    }\n\n    function generateSagas() {\n        let result = _.map(actions, ({actionType, propertyName, constants, actionCreators, actionFetchURL, sagas}) => {\n\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.fetch});`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(true));`,\n                        ``,\n                        `\\t\\t\\tconst ${propertyName} = yield call(fetchAPI, 'GET', \\`${actionFetchURL? actionFetchURL: \"\"}\\`);`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.fetchSuccess}({${propertyName}}));`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t} finally {`,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(false));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}`,\n                        `\\n`\n                    ]);\n                case ACTION_TYPES.poorSagaAction:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.poorSagaAction});`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}\\n`,\n                    ]);\n            }\n            \n        }).join(\"\");\n\n        return result;\n    }\n\n    function generateCommonSaga() {\n        let result = lines([\n            `export function* saga() {`,\n            `\\tyield all([`,\n\n            ..._.map(actions, ({actionType, sagas}) => {\n                switch (actionType) {\n                    case ACTION_TYPES.fetch:\n                    case ACTION_TYPES.poorSagaAction:\n                        return `\\t\\tcall(${sagas.sagaName}),`;\n                }\n                \n            }),\n\n            `\\t]);`,\n            `}`,\n        ]);\n\n        return result;\n    }\n\n    return {\n        generateImports,\n        generateSagas,\n        generateCommonSaga,\n    }\n};","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\n\n/**\n * This module generates messages.json file, it contains all the translations of a component.\n * Those translations can be used later in other places.\n */\nexport default (generationObject) => {\n    const { translations } = generationObject;\n\n    const generateMessagesFile = () => {\n        return lines([\n            `{`,\n            `\\t\"en\": {`,\n            _.map(translations, ({ constantEn }) => `\\t\\t${constantEn}`).join(',\\n'),\n            `\\t},`,\n\n            `\\t\"ru\": {`,\n            _.map(translations, ({ constantRu }) => `\\t\\t${constantRu}`).join(',\\n'),\n            `\\t},`,\n\n            `\\t\"uk\": {`,\n            _.map(translations, ({ constantUk }) => `\\t\\t${constantUk}`).join(',\\n'),\n            `\\t},`,\n            `}`,\n        ]);\n    }\n\n    return {\n        generateMessagesFile\n    };\n}","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\nimport {\n    setActions,\n    selectActions,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n\nconst mapStateToProps = state => ({\n    actions: selectActions(state),\n});\n\nconst mapDispatchToProps = {\n    setActions,\n};\n\n\n/**\n * Generate array which represents one action. This action contains basic variables gained from the user.\n * \n * @property { Function(actions) } actionsChanged - callback, called when actions are changed\n */\nclass ActionsArray extends React.Component {\n    /**\n     * Used to update actions.\n     * @param {*} params.actions - new actions to replace old with \n     */\n    updateActions = ({ actions }) => {\n        const { actionsChanged, setActions } = this.props;\n\n        setActions( actions );\n\n        // this.setState({actions}, () => actionsChanged && actionsChanged(_.get(this, 'state.actions')))\n    }\n\n    /**\n     * Generate new action with initial values setup\n     */\n    createNewAction = () => {\n        const { actions } = this.props;\n\n        this.updateActions({\n            actions: [\n                ...actions,\n                {\n                    actionName: \"test\",\n                    actionType: ACTION_TYPES.fetch,\n                    actionFetchURL: undefined,\n                    actionInitValue: DEF_INIT_VALUES.undefinedValue,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteAction = (key) => {\n        const { actions } = this.props;\n\n        this.updateActions({\n            actions: [\n                ..._.filter(actions, (item) => item.key != key),\n            ]\n        })\n    }\n\n    /**\n     * Each action has its additional fields we have to render\n     * @param {*} params.key - action identifier\n     * @param {*} params.actionType - type of an action\n     */\n    _renderAdditionalFields = ({key, actionType, actionFetchURL, actionInitValue}) => {\n        switch (actionType) {\n            case ACTION_TYPES.fetch:\n                return (\n                    <div>\n                        <Input\n                            value={actionFetchURL}\n                            className=\"input\"\n                            placeholder=\"Fetching URL\"\n                            onChange={(e) => this.changeActionProps(key, {actionFetchURL: e.target.value})}\n                        />\n                        <Select\n                            value={actionInitValue}\n                            className=\"select\"\n                            placeholder=\"Init value\"\n                            onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                        >\n                            {_.map(DEF_INIT_VALUES, (value, key) => {\n                                return (\n                                    <Option value={value}>{sentenceCase(key)}</Option>\n                                )\n                            })}\n                        </Select>\n                    </div>\n                )\n            case ACTION_TYPES.set:\n                return (\n                    <Select\n                        value={actionInitValue}\n                        className=\"select\"\n                        placeholder=\"Select init value\"\n                        onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                    >\n                        {_.map(DEF_INIT_VALUES, (value, key) => {\n                            return (\n                                <Option value={value}>{sentenceCase(key)}</Option>\n                            )\n                        })}\n                    </Select>\n                )\n            default:\n                return undefined;\n        }\n\n    }\n\n    /**\n     * When changed input value of an action.\n     * Values will be replaced only if they are provided\n     * @param {*} key - uuid\n     * @param {*} params - action\n     */\n    changeActionProps = (key, {actionName, actionType, actionInitValue, actionFetchURL}) => {\n        const { actions } = this.props;\n\n        const updatedActions = _.map(actions, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    actionName: (actionName || actionName === \"\")? actionName: item.actionName,\n                    actionFetchURL: (actionFetchURL || actionFetchURL === \"\")? actionFetchURL: item.actionFetchURL,\n                    \n                    actionType: actionType? actionType: item.actionType,\n                    actionInitValue: actionInitValue? actionInitValue: item.actionInitValue,\n                }\n            else\n                return item;\n        })\n\n        this.updateActions({\n            actions: updatedActions\n        })\n    } \n\n\n    render() {\n        const { actions } = this.props;\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={actions}\n                    locale={{emptyText: (<div>No actions</div>)}}\n                    header={\n                        <Button onClick={() => this.createNewAction()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteAction(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                            key={item.key}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'actionName')}\n                                    className=\"input\"\n                                    onChange={(e) => this.changeActionProps(item.key, {actionName: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'actionType')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeActionProps(item.key, {actionType: key})}\n                                >\n                                    {_.map(ACTION_TYPES, (value, key) => (<Option value={value}>{constantCase(key)}</Option>))}\n                                </Select>\n\n                                <div>\n                                    {this._renderAdditionalFields(item)}\n                                </div>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionsArray);","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\nimport {\n    setTranslations,\n    selectTranslations,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\n\n\nconst mapStateToProps = state => ({\n    translations: selectTranslations(state),\n});\n\nconst mapDispatchToProps = {\n    setTranslations,\n};\n\n\n/**\n * Generate array of translations. Used to generate translation files\n * \n */\nclass ActionsArray extends React.Component {\n    /**\n     * Used to update translations.\n     * @param {*} params.translations - new translations to replace old with \n     */\n    updateTranslations = ({ translations }) => {\n        const { setTranslations } = this.props;\n\n        setTranslations( translations );\n    }\n\n    /**\n     * Generate new translation with initial values setup\n     */\n    createTranslation = () => {\n        const { translations } = this.props;\n\n        this.updateTranslations({\n            translations: [\n                ...translations,\n                {\n                    translationName: \"test\",\n                    translationEn: undefined,\n                    translationUk: undefined,\n                    translationRu: undefined,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteTranslation = (key) => {\n        const { translations } = this.props;\n\n        this.updateTranslations({\n            translations: [\n                ..._.filter(translations, (item) => item.key != key),\n            ]\n        })\n    }\n    /**\n     * Change value of a translation object.\n     * Values will be replaced only if they were provided.\n     * @param {*} key - uuid\n     * @param {*} params - translation\n     */\n    changeTranslation = (key, options) => {\n        const { translations } = this.props;\n\n        const updatedTranslations = _.map(translations, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    translationName: (\"translationName\" in options)\n                        ? options.translationName\n                        : item.translationName,\n\n                    translationEn: (\"translationEn\" in options)\n                        ? options.translationEn\n                        : item.translationEn,\n\n                    translationUk: (\"translationUk\" in options)\n                        ? options.translationUk\n                        : item.translationUk,\n\n                    translationRu: (\"translationRu\" in options)\n                        ? options.translationRu\n                        : item.translationRu,\n                }\n            else\n                return item;\n        })\n\n        this.updateTranslations({\n            translations: updatedTranslations\n        })\n    } \n\n\n    render() {\n        const { translations } = this.props;\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={translations}\n                    locale={{emptyText: (<div>No translations</div>)}}\n                    header={\n                        <Button onClick={() => this.createTranslation()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteTranslation(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                            key={item.key}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'translationName')}\n                                    placeholder=\"Name\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationName: e.target.value})}\n                                />\n                                <Input\n                                    value={_.get(item, 'translationEn')}\n                                    placeholder=\"English\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationEn: e.target.value})}\n                                />\n                                <Input\n                                    value={_.get(item, 'translationUk')}\n                                    placeholder=\"Українська\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationUk: e.target.value})}\n                                />\n                                <Input\n                                    value={_.get(item, 'translationRu')}\n                                    placeholder=\"Русский\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationRu: e.target.value})}\n                                />\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionsArray);","\n/** Align properties of a table cell of ant.design table */\nconst ALIGN = Object.freeze({\n    left: 'left',\n    right: 'right',\n    center: 'center',\n});\n\nexport {\n    ALIGN,\n}","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { connect } from \"react-redux\";\n\n//proj\nimport {\n    setTableConfigs,\n    selectTableConfigs,\n    selectTranslations,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\nimport { ALIGN } from './constants';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n\nconst mapStateToProps = state => ({\n    tableConfigs: selectTableConfigs(state),\n    translations: selectTranslations(state),\n});\n\nconst mapDispatchToProps = {\n    setTableConfigs,\n};\n\n\n/**\n * Generate array of table configurations. Used to generate tables and their configs.\n */\nclass TableConfigurationsArray extends React.Component {\n\n\n    updateTableConfigs = ({ tableConfigs }) => {\n        const { setTableConfigs } = this.props;\n\n        setTableConfigs( tableConfigs );\n    }\n\n    createTableConfig = () => {\n        const { tableConfigs } = this.props;\n\n        this.updateTableConfigs({\n            tableConfigs: [\n                ...tableConfigs,\n                {\n                    tableConfigTranslationKey: undefined,\n                    tableConfigName: \"test\",\n                    tableConfigWidth: undefined,\n                    tableConfigDataIndex: undefined,\n                    tableConfigAlign: ALIGN.right,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteTableConfig = (key) => {\n        const { tableConfigs } = this.props;\n\n        this.updateTableConfigs({\n            tableConfigs: [\n                ..._.filter(tableConfigs, (item) => item.key != key),\n            ]\n        })\n    }\n\n    changeTableConfig = (key, options) => {\n        const { tableConfigs } = this.props;\n\n        const updatedTableConfigs = _.map(tableConfigs, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    tableConfigTranslationKey: (\"tableConfigTranslationKey\" in options)\n                        ? options.tableConfigTranslationKey\n                        : item.tableConfigTranslationKey,\n\n                    tableConfigName: (\"tableConfigName\" in options)\n                        ? options.tableConfigName\n                        : item.tableConfigName,\n\n                    tableConfigWidth: (\"tableConfigWidth\" in options)\n                        ? options.tableConfigWidth\n                        : item.tableConfigWidth,\n\n                    tableConfigDataIndex: (\"tableConfigDataIndex\" in options)\n                        ? options.tableConfigDataIndex\n                        : item.tableConfigDataIndex,\n\n                    tableConfigAlign: (\"tableConfigAlign\" in options)\n                        ? options.tableConfigAlign\n                        : item.tableConfigAlign,\n                }\n            else\n                return item;\n        })\n\n        this.updateTableConfigs({\n            tableConfigs: updatedTableConfigs\n        })\n    } \n\n\n    render() {\n        const { tableConfigs, translations } = this.props;\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={tableConfigs}\n                    locale={{emptyText: (<div>No table configs</div>)}}\n                    header={\n                        <Button onClick={() => this.createTableConfig()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteTableConfig(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                            key={item.key}\n                        >\n                            <div className={\"item\"}>\n                                <Select\n                                    value={_.get(item, 'tableConfigTranslationKey')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeTableConfig(item.key, {tableConfigTranslationKey: key})}\n                                >\n                                    {_.map(translations, (translation) => (<Option value={translation.key}>{_.get(translation, 'translationName')}</Option>))}\n                                </Select>\n                                \n                                <Input\n                                    value={_.get(item, 'tableConfigName')}\n                                    placeholder=\"Name\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTableConfig(item.key, {tableConfigName: e.target.value})}\n                                />\n\n                                <Input\n                                    value={_.get(item, 'tableConfigWidth')}\n                                    placeholder=\"Width\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTableConfig(item.key, {tableConfigWidth: e.target.value})}\n                                />\n\n                                <Input\n                                    value={_.get(item, 'tableConfigDataIndex')}\n                                    placeholder=\"Data index\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTableConfig(item.key, {tableConfigDataIndex: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'tableConfigAlign')}\n                                    className=\"select\"\n                                    onChange={(align) => this.changeTableConfig(item.key, {tableConfigAlign: align})}\n                                >\n                                    {_.map(ALIGN, (align) => (<Option value={align}>{align}</Option>))}\n                                </Select>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableConfigurationsArray);","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view'\nimport { pascalCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport generators from \"generators\";\nimport { downloadZipFile } from 'utils';\nimport { COMPONENT_TYPES, TYPES_OF_FILES } from 'globalConstants';\nimport enricher from 'generators/enricher';\n\n//own\nimport ActionsArray from './ActionsArray';\nimport TranslationsArray from './TranslationsArray';\nimport TableConfigurationsArray from './TableConfigurationsArray';\nimport \"./styles.css\";\nimport {\n    setModuleName,\n    setModuleDescription,\n    setGenerationComponentType,\n\n    selectModuleName,\n    selectModuleDescription,\n    selectGenerationComponentType,\n    selectActions,\n    selectTranslations,\n    selectTableConfigs,\n} from './redux/duck';\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\nconst RadioGroup = Radio.Group;\nconst TextArea = Input.TextArea;\n\n\nconst mapStateToProps = state => ({\n    moduleName: selectModuleName(state),\n    moduleDescription: selectModuleDescription(state),\n    generationComponentType: selectGenerationComponentType(state),\n    actions: selectActions(state),\n    translations: selectTranslations(state),\n    tableConfigs: selectTableConfigs(state),\n});\n\nconst mapDispatchToProps = {\n    setModuleName,\n    setModuleDescription,\n    setGenerationComponentType,\n};\n\nclass FrontendBoilerplateGeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onGenerateFiles = () => {\n        const { moduleName, generationComponentType, moduleDescription, actions, translations, tableConfigs } = this.props;\n\n        if(!moduleName || _.isEmpty(actions)) {\n            notification.error({message: \"Not enough information provided!\"});\n            return;\n        }\n\n        const generationObject = { moduleName, generationComponentType, moduleDescription, actions, translations, tableConfigs };\n\n        const { generateDuckFile, generateSagaFile, generatePages, generateMessagesFile } = generators(generationObject);\n\n        let fileStructure = undefined;\n        const pages = generatePages();\n        const enrichedValues = enricher(generationObject);\n\n        let componentName = \"\";\n        switch (generationComponentType) {\n            case COMPONENT_TYPES.poorPage:\n                componentName = enrichedValues.pageName;\n                fileStructure = [\n                    {\n                        type: TYPES_OF_FILES.directory,\n                        name: `${componentName}`,\n                        content: [\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'redux',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'duck',\n                                        extension: '.js',\n                                        content: generateDuckFile(),\n                                    },\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'saga',\n                                        extension: '.js',\n                                        content: generateSagaFile(),\n                                    },\n                                ]\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'index',\n                                extension: '.js',\n                                content: pages.poorPage,\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'messages',\n                                extension: '.json',\n                                content: generateMessagesFile(),\n                            },\n                        ]\n                    }\n                ];\n                break;\n            case COMPONENT_TYPES.tablePage:\n                componentName = enrichedValues.pageName;\n                fileStructure = [\n                    {\n                        type: TYPES_OF_FILES.directory,\n                        name: `${componentName}`,\n                        content: [\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'components',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.directory,\n                                        name: 'tables',\n                                        content: [\n                                            {\n                                                type: TYPES_OF_FILES.directory,\n                                                name: enrichedValues.pageTableName,\n                                                content: [\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'index',\n                                                        extension: '.js',\n                                                        content: pages.table,\n                                                    },\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'styles',\n                                                        extension: '.m.css',\n                                                        content: pages.tableStyles,\n                                                    },\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'config',\n                                                        extension: '.js',\n                                                        content: pages.tableConfig,\n                                                    },\n                                                ],\n                                            },\n                                            {\n                                                type: TYPES_OF_FILES.file,\n                                                name: 'index',\n                                                extension: '.js',\n                                                content: pages.tablesIndexFile,\n                                            }\n                                        ],\n                                    }\n                                ],\n                            },\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'redux',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'duck',\n                                        extension: '.js',\n                                        content: generateDuckFile(),\n                                    },\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'saga',\n                                        extension: '.js',\n                                        content: generateSagaFile(),\n                                    },\n                                ]\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'index',\n                                extension: '.js',\n                                content: pages.tablePage,\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'messages',\n                                extension: '.json',\n                                content: generateMessagesFile(),\n                            },\n                        ]\n                    }\n                ];\n                break;\n            case COMPONENT_TYPES.modal:\n                componentName = pascalCase(`${moduleName} modal`);\n                break;\n        }\n        \n        downloadZipFile(fileStructure);\n\n        notification.info({\n            message: (\n                <div>\n                    <div>{`Module: ${moduleName}`}</div>\n                </div>\n            )\n        });\n    }\n\n    render() {\n        const {\n            actions,\n            moduleName,\n            moduleDescription,\n            generationComponentType,\n            translations,\n            tableConfigs,\n\n            setModuleName,\n            setModuleDescription,\n            setGenerationComponentType,\n        } = this.props;\n\n        const generationObject = { moduleName, generationComponentType, moduleDescription, actions, translations, tableConfigs };\n\n        return (\n            <div className=\"mainConst\">\n                <Button className=\"generateButton\" onClick={() => this.onGenerateFiles()}>Generate</Button>\n\n                <Collapse className=\"collapse\" defaultActiveKey={['settings']}>\n                    <Panel header=\"Settings\" key=\"settings\">\n                        <div className=\"settingsContainer\">\n                            <Input\n                                placeholder=\"Module name\"\n                                value={moduleName}\n                                onChange={(e) => setModuleName(e.target.value)}\n                            />\n\n                            <TextArea\n                                placeholder=\"Module description(comment)\"\n                                rows={2}\n                                className=\"textArea\"\n                                onChange={(e) => setModuleDescription(e.target.value)}\n                            />\n\n                            <div className=\"radioCont\">\n                                Module type:\n                                <br /> \n                                <RadioGroup\n                                    value={generationComponentType}\n                                    onChange={(e) => setGenerationComponentType(e.target.value)}\n                                >\n                                    <Radio value={COMPONENT_TYPES.poorPage}>Poor page</Radio>\n                                    <Radio value={COMPONENT_TYPES.tablePage}>Table page</Radio>\n                                    <Radio value={COMPONENT_TYPES.modal}>Modal</Radio>\n                                </RadioGroup>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    <Panel header=\"Translations\" key=\"translations\">\n                        <TranslationsArray />\n                    </Panel>\n\n                    <Panel header=\"Table configuration\" key=\"tableConfigs\">\n                        <TableConfigurationsArray />\n                    </Panel>\n                    \n                    <Panel header=\"Create actions\" key=\"actions\">\n                        <div className=\"settingsContainer\">\n                            <Tabs className=\"tabs\" tabPosition=\"top\">\n                                <TabPane tab=\"Actions generator\" key=\"1\">\n                                    <ActionsArray />\n                                </TabPane>\n                                <TabPane tab=\"Input\" key=\"2\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                        />\n                                    </div>\n                                </TabPane>\n                                <TabPane tab=\"Generation object\" key=\"3\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={enricher(generationObject)}\n                                        />\n                                    </div>\n                                </TabPane>\n                            </Tabs>\n                        </div>\n                    </Panel>\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FrontendBoilerplateGeneratorPage);","//vendor\nimport React from 'react';\nimport _ from 'lodash';\n\n//own\nimport \"./styles.css\";\n\n/**\n * Home page, contains basic information about the project.\n */\nexport default class Home extends React.Component {\n    render() {\n\n        return (\n            <div>\n                <p>\n                    This project is supposed to reduce boilerplate by providing tool for auto generating code patterns.\n                    This program can generate redux files for now.\n                </p>\n                <p>\n                    To navigate hover black box on the top left corner.\n                </p>\n            </div>\n        );\n    }\n}","// vendor\nimport React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router';\n\n// proj\nimport {\n    FrontendBoilerplateGeneratorPage,\n    Home,\n } from 'pages';\n\nimport book from './book';\n\n/**\n * All those components will be available by users without authentication\n */\nexport default class Public extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route\n                    exact\n                    component={ Home }\n                    path={ book.home }\n                />\n                <Route\n                    exact\n                    render={ props => <FrontendBoilerplateGeneratorPage { ...props } /> }\n                    path={ book.frontendBoilerplateGenerator }\n                />\n\n                <Redirect to={ book.home } /> {/*Redirect to the default page*/}\n            </Switch>\n        );\n    }\n}\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;","// vendor\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// proj\nimport history from './history';\n\nconst routerMiddleware = createRouterMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [ thunk, sagaMiddleware, routerMiddleware ];\n\n/** redux-logger imported inside if statement to prevent it from being injected into a bundle */\nif (/*__LOCAL__ || __DEV__*/ true) { //TODO Create .env\n    const { createLogger } = require(\"redux-logger\");\n\n    const logger = createLogger({\n        duration:  true,\n        timestamp: true,\n        collapsed: true,\n        diff:      true,\n        colors:    {\n            title:     () => 'deepskyblue',\n            prevState: () => 'dodgerblue',\n            action:    () => 'greenyellow',\n            nextState: () => 'OliveDrab',\n            error:     () => 'firebrick',\n        },\n    });\n\n    middleware.push(logger);\n}\n\nexport { sagaMiddleware, middleware };\n","// Core\nimport { compose } from 'redux'; // Used to compose some other components to enhance store usability, docs: https://redux.js.org/api/compose\n\n/**\n * In development mode add devtools for redux, it is useful for debugging\n * @returns Enhanced compose function\n */\nexport const composeEnhancers = () => {\n    const dev = process.env.NODE_ENV === 'development';\n\n    const devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\n    return devtools && dev ? devtools : compose;\n};\n","// vendor\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { persistReducer } from 'redux-persist';\nimport { default as persistStorage } from 'redux-persist/lib/storage'; // defaults to localStorage for web and AsyncStorage for react-native\nimport { LOCATION_CHANGE } from 'connected-react-router';\nimport _ from 'lodash';\n\n// proj\n\nimport frontendBoilerplateGeneratorPageReducer, {moduleName as frontendBoilerplateGeneratorPageModule} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n// own\nimport history from './history';\n\nexport const persistConfig = {\n    key:       'persistedStore',\n    storage:   persistStorage,\n    whitelist: [\n        frontendBoilerplateGeneratorPageModule,\n    ],\n};\n\n/** Persisted state will no change after reloading of the page */\nconst persistedState = {\n    // [ frontendBoilerplateGeneratorPageModule ]:   frontendBoilerplateGeneratorPageReducer,\n    router:                        connectRouter(history),\n};\n\n/** There should be placed object that have storage that will be dropped after reload */\nconst appState = {\n    [ frontendBoilerplateGeneratorPageModule ]:   frontendBoilerplateGeneratorPageReducer,\n};\n\nconst appReducer = combineReducers({ ...persistedState, ...appState });\n\nconst reducer = (state, action) => {\n    const { type, payload } = action;\n    let resetedState = null;\n\n    if (\n        type === LOCATION_CHANGE &&\n        _.get(payload, 'location.pathname') !==\n            _.get(state, 'router.location.pathname')\n    ) {\n        resetedState = Object.keys(persistedState).reduce(\n            (resetedState, moduleName) => {\n                resetedState[ moduleName ] = state[ moduleName ];\n\n                return resetedState;\n            },\n            {},\n        );\n    }\n\n    return appReducer(resetedState || state, action);\n};\n\nconst rootReducer = persistReducer(persistConfig, (state, action) => {\n    return reducer(state, action);\n});\n\nexport default rootReducer;\n","// vendor\nimport { call, put, all, take, select } from 'redux-saga/effects';\nimport _ from 'lodash';\n\n//proj\n\n// own\nimport {\n    fetchVehiclesSuccess,\n    fetchVehicleOrdersSuccess,\n\n    setFetchingVehicleOrders,\n    setFetchingVehicles,\n\n    selectSort,\n    selectFilters,\n    selectExpandedVehicleId,\n\n    FETCH_VEHICLES,\n    FETCH_VEHICLE_ORDERS,\n    selectVehicleOrdersSort,\n\n} from './duck';\n// export function* fetchVehicleOrdersSaga() {\n//     while (true) {\n//         try {\n//             yield take(FETCH_VEHICLE_ORDERS);\n\n//             yield put(setFetchingVehicleOrders(true));\n\n//             const vehicleId = yield select(selectExpandedVehicleId);\n\n//             const sort = yield select(selectVehicleOrdersSort);\n\n//             yield nprogress.start();\n\n//             const {orders, stats} = yield call(fetchAPI, 'GET', `orders/vehicle/${vehicleId}`, {page: sort.page});\n\n//             yield put(fetchVehicleOrdersSuccess({orders, stats}));\n//         } catch (error) {\n//             yield put(emitError(error));\n//         } finally {\n//             yield nprogress.done();\n//             yield put(setFetchingVehicleOrders(false));\n//         }\n//     }\n// }\n\n\nexport function* saga() {\n    yield all([\n        // call(fetchVehiclesSaga),\n        // call(fetchVehicleOrdersSaga),\n    ]);\n}\n","// vendor\nimport { all } from 'redux-saga/effects';\n\n//own\n\nimport { saga as frontendBoilerplateGeneratorPage } from 'pages/FrontendBoilerplateGeneratorPage/redux/saga';\n\nexport default function* rootSaga() {\n    yield all([\n        frontendBoilerplateGeneratorPage(),\n    ]);\n}","// vendor\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\n\n// own\nimport { middleware, sagaMiddleware } from './middleware';\nimport { composeEnhancers } from './enhancers';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers()(applyMiddleware(...middleware)),\n);\n\nexport const persistor = persistStore(store);\n\nexport default store;\n\nsagaMiddleware.run(rootSaga);\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//vendor\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\n\n//proj\n\n//own\nimport \"./styles.css\";\n\n/**\n * Central navigation file, contains controls and commonly used stuff.\n * To configure available nav buttons visit config.js file.\n * \n * @property { * } label - Button text\n * @property { * } path - internal path to the page\n */\nexport default class NavigationButton extends React.Component {\n    render() {\n        const {\n            label,\n            path,\n        } = this.props;\n\n        return (\n            <div>\n                <Link\n                    to={path}\n                >\n                    <div className=\"menuButton\">\n                        {label}\n                    </div>\n                </Link>\n            </div>\n        );\n    }\n}","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport logo from \"./logo.svg\";\nimport { v4 } from 'uuid';\n\n//proj\n\n//own\nimport \"./styles.css\";\nimport config from './config';\nimport NavigationButton from './components/NavigationButton';\n\n/**\n * Central navigation file, contains controls and commonly used stuff.\n * To configure available nav buttons visit config.js file.\n */\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.navigationConfig = config();\n    }\n\n    render() {\n        const { children } = this.props;\n\n        return (\n            <div className=\"mainCont\">\n                <header className=\"header\">\n                    <img src={logo} className=\"logo\" alt=\"logo\" />\n                    <div className=\"title\">\n                        Boilerplate reducer\n                    </div>\n                </header>\n                <div className=\"sideMenu\">\n                    <div className=\"sideMenuContent\">\n                        {this.navigationConfig && _.map(this.navigationConfig, ({title, path}) => {\n                            return (\n                                <NavigationButton\n                                    label={title}\n                                    path={path}\n                                    key={v4()}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className=\"children\">\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}","//proj\nimport book from \"routes/book\";\n\n/**\n * Configure each navigation button\n */\nexport default () => {\n\n    return [\n        {\n            title: \"HOME\",\n            path: book.home\n        },\n        {\n            title: \"FRONT GENERATOR\",\n            path: book.frontendBoilerplateGenerator,\n        },\n        {\n            title: \"BACK GENERATOR\",\n            path: book.backendBoilerplateGenerator,\n        },\n    ];\n}","//vedor\nimport 'antd/dist/antd.css'; //Styles for all antd components, if you remove this - antd will not work\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ConnectedRouter } from 'connected-react-router';\n\n//proj\nimport store, { persistor } from './store/store';\nimport history from './store/history';\nimport Routes from './routes/Main';\nimport { Navigation } from 'UI';\n\n//own\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Provider store={ store }>\n                <PersistGate loading={ null } persistor={ persistor }>\n\t\t\t\t\t<ConnectedRouter history={ history }>\n\t\t\t\t\t\t<div className=\"App\">\n                            <Navigation>\n\t\t\t\t\t\t    \t<Routes />\n                            </Navigation>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ConnectedRouter>\n                </PersistGate>\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n","//proj\nimport { COMPONENT_TYPES, TYPES_OF_FILES } from 'globalConstants';\n\n/** Constants **/\n\nexport const moduleName = 'frontendBoilerplateGeneratorPage';\nconst prefix = `cpb/${moduleName}`;\n\nexport const SET_MODULE_NAME = `${prefix}/SET_MODULE_NAME`;\nexport const SET_MODULE_DESCRIPTION = `${prefix}/SET_MODULE_DESCRIPTION`;\nexport const SET_GENERATION_COMPONENT_TYPE = `${prefix}/SET_GENERATION_COMPONENT_TYPE`;\n\nexport const SET_ACTIONS = `${prefix}/SET_ACTIONS`;\nexport const SET_TRANSLATIONS = `${prefix}/SET_TRANSLATIONS`;\nexport const SET_TABLE_CONFIGS = `${prefix}/SET_TABLE_CONFIGS`;\n\n/** Reducer **/\nconst ReducerState = {\n    moduleName: \"test\",\n    moduleDescription: undefined,\n    generationComponentType: COMPONENT_TYPES.poorPage,\n    actions: [],\n    translations: [],\n    tableConfigs: [],\n};\n\nexport default function reducer(state = ReducerState, action) {\n    const { type, payload } = action;\n    switch (type) {\n        case SET_MODULE_NAME:\n            return {\n                ...state,\n                moduleName: payload\n            };\n\n        case SET_MODULE_DESCRIPTION:\n            return {\n                ...state,\n                moduleDescription: payload\n            };\n\n        case SET_GENERATION_COMPONENT_TYPE:\n            return {\n                ...state, \n                generationComponentType: payload\n            };\n\n        case SET_ACTIONS:\n\t\t\treturn {\n\t\t\t\t...state, \n\t\t\t\tactions: payload\n\t\t\t};\n\n        case SET_TRANSLATIONS:\n            return {\n                ...state, \n                translations: payload\n            };\n        \n        case SET_TABLE_CONFIGS:\n\t\t\treturn {\n\t\t\t\t...state, \n\t\t\t\ttableConfigs: payload\n\t\t\t};\n\n        default: return state;\n    }\n}\n\n/** Selectors **/\n\nexport const selectModuleName = state => state[ moduleName ].moduleName;\nexport const selectModuleDescription = state => state[ moduleName ].moduleDescription;\nexport const selectGenerationComponentType = state => state[ moduleName ].generationComponentType;\n\nexport const selectActions = state => state[ moduleName ].actions;\nexport const selectTranslations = state => state[ moduleName ].translations;\nexport const selectTableConfigs = state => state[ moduleName ].tableConfigs;\n\n/** Action Creators **/\n\nexport const setModuleName = (value) => ({\n\ttype: \tSET_MODULE_NAME,\n\tpayload: value\n});\n\nexport const setModuleDescription = (value) => ({\n\ttype: \tSET_MODULE_DESCRIPTION,\n\tpayload: value\n});\n\nexport const setGenerationComponentType = (value) => ({\n\ttype: \tSET_GENERATION_COMPONENT_TYPE,\n\tpayload: value\n});\n\nexport const setActions = (value) => ({\n\ttype: \tSET_ACTIONS,\n\tpayload: value\n});\n\nexport const setTranslations = (value) => ({\n\ttype: \tSET_TRANSLATIONS,\n\tpayload: value\n});\n\nexport const setTableConfigs = (value) => ({\n\ttype: \tSET_TABLE_CONFIGS,\n\tpayload: value\n});","/** declare routes paths */\n\nconst book = Object.freeze({\n    frontendBoilerplateGenerator: '/frontend_boilerplate_generator',\n    backendBoilerplateGenerator: '/backend_boilerplate_generator',\n    home: '/home',\n});\n\nexport default book;\n","/**\n * Different types of actions require different processing, for example we have to have at\n * least two duck actions created for \"fetch\" type - FETCH_SOMETHING and FETCH_SOMETHING_SUCCESS\n */\nconst ACTION_TYPES = Object.freeze({\n    fetch: \"fetch\",\n    set: \"set\",\n    poorSagaAction: \"poorSagaAction\",\n    poorReducerAction: \"poorReducerAction\",\n});\n\n/**\n * Sometimes you have to specify default init values, those are strings.\n * Each of them represent real JS value which often used as default initializing value.\n */\nconst DEF_INIT_VALUES = Object.freeze({\n    undefinedValue: 'undefined',\n    nullValue: 'null',\n    emptyString: `\\\"\\\"`,\n    zero: '0',\n    emptyObject: '{}',\n    emptyArray: '[]',\n    false: 'false',\n    true: 'true',\n});\n\n/**\n * There are different types of components to generate. We can generate table, modal or something else.\n */\nconst COMPONENT_TYPES = Object.freeze({\n    poorPage: \"poorPage\",\n    tablePage: \"tablePage\",\n    modal: \"modal\",\n});\n\nconst TYPES_OF_FILES = Object.freeze({\n    file: 'file',\n    directory: 'directory',\n});\n\nmodule.exports = {\n    ACTION_TYPES,\n    DEF_INIT_VALUES,\n    COMPONENT_TYPES,\n    TYPES_OF_FILES\n};"],"sourceRoot":""}