{"version":3,"sources":["generators/duckGenerator/index.js","generators/index.js","generators/sagaGenerator/index.js","utils/index.js","DuckGeneratorPage/InputArray/index.js","DuckGeneratorPage/index.js","logo.svg","App.js","index.js","globalConstants/index.js"],"names":["lines","text","_","compact","join","moduleName","actions","generateHeader","generateConstants","result","each","action","actionType","constants","ACTION_TYPES","fetch","fetchSuccess","setFetching","set","generateConstant","generateReducerInitState","actionName","valueNames","res","value","fetchingValue","generateReducerInitStateSnippet","generateReducer","generateReducerSnippet","generateSelectors","selectors","generateActionCreators","actionCreators","constantCase","String","camelCase","generateActionSnippet","enrichedActions","map","enriched","sagas","sagaName","propertyName","Object","freeze","enrichActions","console","log","generateDuckFile","duckGenerator","generateSagaFile","fetchActions","filter","obj","setActions","generateImports","generateSagas","actionFetchURL","generateCommonSaga","sagaGenerator","downloadTxtFile","filename","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","Item","List","Option","Select","InputArray","props","updateState","newState","actionsChanged","setState","get","createNewItem","key","v4","deleteItem","item","onChangeInputValue","newInputValues","state","size","bordered","dataSource","this","locale","emptyText","header","onClick","renderItem","DeleteTwoTone","className","onChange","e","target","React","Component","Panel","Collapse","DuckGeneratorPage","onGenerateFiles","isEmpty","generators","notification","info","message","error","undefined","defaultActiveKey","placeholder","name","collapsed","displayObjectSize","displayDataTypes","collapseStringsAfterLength","style","fontSize","width","src","App","logo","alt","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0ca646c7.chunk.js","sourcesContent":["import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\n\n/**\n * Geerate lines with new line at the end of each piece of text\n * @param {*} text - array of strings\n */\nfunction lines(text) {\n    return _.compact(text).join(\"\\n\");\n}\n\nfunction generateConstant({ actionType, constants }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result +=`export const ${constants.fetch} = \\`\\${prefix}/${constants.fetch}\\`;\\n`;\n            result +=`export const ${constants.fetchSuccess} = \\`\\${prefix}/${constants.fetchSuccess}\\`;\\n`;\n            result +=`export const ${constants.setFetching} = \\`\\${prefix}/${constants.setFetching}\\`;\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            result +=`export const ${constants.set} = \\`\\${prefix}/${constants.set}\\`;\\n`;\n            break;\n    }\n\n    return result;\n}\n\n/** Reducer snippet is a line that contains variable name */\nfunction generateReducerInitStateSnippet({ actionName, actionType, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += `\\t${valueNames.value},\\n`;\n            res += `\\t${valueNames.fetchingValue},\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            res += `\\t${valueNames.value},\\n`;\n            break;    \n    }\n\n    return res;\n}\n\n\n/**\n * Reducer's state changer inside switch statement\n */\nfunction generateReducerSnippet({ actionType, constants, valueNames }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result = lines([\n                `\\t\\tcase ${constants.fetchSuccess}:`,\n                `\\t\\t\\tconst { ${valueNames.value} } = payload;`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: ${valueNames.value},`,\n                '\\t\\t\\t};',\n                `\\t\\tcase ${constants.setFetching}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.fetchingValue}: payload,`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            result = lines([\n                `\\t\\tcase ${constants.set}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: payload`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Actions are functions that can be called when you want to change the state\n */\nfunction generateActionSnippet({ actionType, actionName, actionCreators, constants, valueNames }) {\n    const actionConstant = constantCase(String(`${actionType} ${actionName}`));\n    const functionName = camelCase(String(`${actionType} ${actionName}`));\n\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += lines([\n                `export const ${actionCreators.fetch} = () => ({`,\n                `\\ttype: \\t${constants.fetch},`,\n                '});\\n',\n                `export const ${actionCreators.fetchSuccess} = ({${valueNames.value}}) => ({`,\n                `\\ttype: \\t${constants.fetchSuccess},`,\n                `\\tpayload: {${valueNames.value}}`,\n                '});\\n',\n                `export const ${actionCreators.setFetching} = (value) => ({`,\n                `\\ttype: \\t${constants.setFetching},`,\n                '\\tpayload: value',\n                '});\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += lines([\n                `export const ${actionCreators.set} = (value) => ({`,\n                `\\ttype: \\t${constants.set},`,\n                '\\tpayload: value',\n                '});\\n'\n            ]);\n            break;    \n    }\n\n    return res;\n}\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    /**\n     * @returns Header of a duck file\n     */\n    function generateHeader() {\n        let result = lines([\n            `/** ------------------------------------- Constants ------------------------------------- **/`,\n            `export const moduleName = '${moduleName}';`,\n            `const prefix = \\`cpb/\\${moduleName}\\`;`,\n            '',\n        ]);\n    \n        return result;\n    }\n\n    /**\n     * @param {*} params.actions - actions to generate constants for\n     */\n    function generateConstants() {\n        let result = \"\";\n\n        _.each(actions, (action) => {\n            result+=generateConstant(action);\n        });\n\n        return result;\n    }\n\n    function generateReducerInitState() {\n        let result = lines([\n            '/** ------------------------------------- Reducer ------------------------------------- **/',\n            'const ReducerState = {\\n',\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerInitStateSnippet(action);\n        });\n        result+= '};\\n';\n\n        return result;\n    }\n\n    function generateReducer() {\n        let result = lines([\n            `export default function reducer(state = ReducerState, action) {`,\n            `\\tconst { type, payload } = action;`,\n            `\\tswitch (type) {\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerSnippet(action);\n        })\n\n        result += lines([\n            `\\t\\tdefault:`,\n            `\\t\\t\\treturn state;`,\n            `\\t}`,\n            `}`,\n        ]);\n    \n        return result;\n    }\n\n    function generateSelectors() {\n        let res = lines([\n            `/* ------------------------------------- Selectors ------------------------------------- */\\n`,\n        ]);\n\n        _.each(actions, ({ actionType, actionName, selectors, valueNames }) => {\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    res += `export const ${selectors.fetchingValue} = state => state[ moduleName ].${valueNames.fetchingValue};\\n\\n`;\n                    break;\n        \n                case ACTION_TYPES.set:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    break;    \n            }\n        });\n    \n        return res;\n    }\n\n    function generateActionCreators() {\n        let result = lines([\n            `/* ------------------------------------- Action Creators -------------------------- */\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateActionSnippet(action);\n        });\n    \n        return result;\n    }\n\n    return {\n        generateHeader,\n        generateConstants,\n        generateReducerInitState,\n        generateReducer,\n        generateSelectors,\n        generateActionCreators,\n    }\n};","//vendor\nimport { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\n\n//own\nimport duckGenerator from './duckGenerator';\nimport sagaGenerator from './sagaGenerator';\n\n/**\n * Actions enriching - generating more fields that can be used later\n * @param {*} actions \n * @returns Enriched actions\n */\nfunction enrichActions(actions) {\n    const enrichedActions = _.map(actions, (action) => {\n        let enriched =  {\n            ...action,\n            constants: {}, //Constant names, can be more than one\n            actionCreators: {}, //Action function names, different for different types of actions\n            sagas: {}, //Action function names, different for different types of actions\n        };\n\n        switch (action.actionType) {\n            case ACTION_TYPES.fetch:\n                enriched.constants = {\n                    setFetching: constantCase(`set fetching ${action.actionName}`),\n                    fetch: constantCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: constantCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.actionCreators = {\n                    setFetching: camelCase(`set fetching ${action.actionName}`),\n                    fetch: camelCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: camelCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionType} ${action.actionName} saga`)\n                }\n\n                //Used to store data inside them\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`),\n                    fetchingValue: camelCase(`fetching ${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                    fetchingValue: camelCase(`select fetching ${action.actionName}`)\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.set:\n                enriched.constants = {\n                    set: constantCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    set: camelCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n        }\n\n        return enriched;\n    })\n    return Object.freeze(enrichedActions);\n}\n\n\n/**\n * \n * @param {*} params.moduleName \n * @param {*} params.actions  - Array of action objects\n * @example\n *  const actions = [\n *      {\n *          actionName: 'vehicles',\n *          actionType: ACTION_TYPES.fetch\n *      },\n *      {\n *          actionName: 'recommendations',\n *          actionType: ACTION_TYPES.fetch\n *      },\n *      {\n *          actionName: 'vehiclesFetching',\n *          actionType: ACTION_TYPES.set\n *      },\n *  ];\n */\nexport default ({moduleName, actions}) => {\n\n    const enrichedActions = enrichActions(actions);\n\n    console.log(\"enrichedActions: \", enrichedActions);\n    \n    function generateDuckFile() {\n        const {\n            generateHeader,\n            generateConstants,\n            generateReducerInitState,\n            generateReducer,\n            generateSelectors,\n            generateActionCreators,\n        } = duckGenerator({moduleName, actions: enrichedActions});\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateHeader() + \"\\n\\n\"\n            + generateConstants() + \"\\n\"\n            + generateReducerInitState() + \"\\n\"\n            + generateReducer() + \"\\n\\n\"\n            + generateSelectors() + \"\\n\\n\"\n            + generateActionCreators() + \"\\n\";\n\n        return data;\n    }\n\n    function generateSagaFile() {\n        const {\n            generateImports,\n            generateSagas,\n            generateCommonSaga,\n        } = sagaGenerator({moduleName, actions: enrichedActions});\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateImports() + \"\\n\\n\"\n            + generateSagas() + \"\\n\"\n            + generateCommonSaga() + \"\\n\";\n\n        return data;\n    }\n\n    return {\n        generateDuckFile,\n        generateSagaFile,\n    };\n}","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    const fetchActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.fetch)\n    const setActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.set)\n\n    function generateImports() {\n        let result = \n        `\n// vendor\nimport { call, put, all, take, select } from 'redux-saga/effects';\nimport nprogress from 'nprogress';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { notification } from 'antd';\nimport history from 'store/history';\n\n//proj\nimport book from 'routes/book';\nimport { emitError } from 'core/ui/duck';\nimport { fetchAPI } from 'utils';\n\n// own\nimport {\n    ${_.map(fetchActions, ({constants}) => constants.fetch).join(\",\\n\")}\n\n    ${_.map(fetchActions, ({actionCreators}) => actionCreators.fetchSuccess).join(\",\\n\")}\n\n    ${_.map(setActions, ({actionCreators}) => actionCreators.set).join(\",\\n\")}\n} from './duck';\n        `\n        return result;\n    }\n\n    function generateSagas() {\n        let result = _.map(fetchActions, ({propertyName, constants, actionCreators, actionFetchURL, sagas,}) => {\n            return `\nexport function* ${sagas.sagaName}() {\n    while (true) {\n        try {\n            yield take(${constants.fetch});\n\n            yield put(${actionCreators.setFetching}(true));\n\n            const ${propertyName} = yield call(fetchAPI, 'GET', \\`${actionFetchURL? actionFetchURL: \"\"}\\`);\n\n            yield put(${actionCreators.fetchSuccess}({${propertyName}}));\n\n        } catch (error) {\n            yield put(emitError(error));\n        } finally {\n            yield put(${actionCreators.setFetching}(false));\n        }\n    }\n}\\n\n            `\n        })\n        return result;\n    }\n\n    function generateCommonSaga() {\n        let result = \n\n        `\nexport function* saga() {\n    yield all([\n        ${_.map(fetchActions, ({sagas}) => `call(${sagas.sagaName}),\\n`)}\n    ]);\n}\n        `\n        return result;\n    }\n\n    return {\n        generateImports,\n        generateSagas,\n        generateCommonSaga,\n    }\n};","\n\n\n/**\n * Save file on user's local machine. Just provide content you wnat to save.\n * @param { String } text - content of a file\n */\nexport const downloadTxtFile = (text, filename = 'myFile.txt') => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { constantCase } from 'change-case';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n/**\n * Generate array which represents one action.\n * \n * @property { Function(actions) } actionsChanged - callback, called when actions are changed\n */\nexport default class InputArray extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //Init state obj\n        this.state = {\n            actions: []\n        };\n    }\n\n    /**\n     * Used to update state and perform additional actions.\n     * Call callback functions if something changed.\n     * @param {*} newState \n     */\n    updateState = (newState) => {\n        const { actionsChanged } = this.props;\n\n        this.setState(newState, () => actionsChanged && actionsChanged(_.get(this, 'state.actions')))\n    }\n\n    createNewItem = () => {\n        this.updateState({\n            actions: [\n                ..._.get(this, 'state.actions'),\n                {\n                    actionName: \"vehicles\",\n                    actionType: ACTION_TYPES.fetch,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteItem = (key) => {\n        this.updateState({\n            actions: [\n                ..._.filter(_.get(this, 'state.actions'), (item) => item.key != key),\n            ]\n        })\n    }\n\n    /**\n     * When changed input value of an action.\n     * Values will be replaced only if they are provided\n     * @param {*} key - uuid\n     * @param {*} params - action\n     */\n    onChangeInputValue = (key, {actionName, actionType}) => {\n        const actions = _.get(this, 'state.actions');\n\n        const newInputValues = _.map(actions, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    actionName: actionName? actionName: item.actionName,\n                    actionType: actionType? actionType: item.actionType,\n                }\n            else\n                return item;\n        })\n\n        this.updateState({\n            actions: newInputValues\n        })\n    } \n\n\n    render() {\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={_.get(this, 'state.actions')}\n                    locale={{emptyText: (<div>No actions</div>)}}\n                    header={\n                        <Button onClick={() => this.createNewItem()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteItem(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    className=\"input\"\n                                    value={_.get(item, 'actionName')}\n                                    onChange={(e) => this.onChangeInputValue(item.key, {actionName: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'actionType')}\n                                    className=\"select\"\n                                    onChange={(key) => this.onChangeInputValue(item.key, {actionType: key})}\n                                >\n                                    <Option value={ACTION_TYPES.fetch}>{constantCase(ACTION_TYPES.fetch)}</Option>\n                                    <Option value={ACTION_TYPES.set}>{constantCase(ACTION_TYPES.set)}</Option>\n                                </Select>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification } from 'antd';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view'\n\n//proj\nimport generators from \"generators\";\nimport { downloadTxtFile } from '../utils';\n\n//own\nimport InputArray from './InputArray';\nimport \"./styles.css\";\n\nconst Panel = Collapse.Panel;\n\nexport default class DuckGeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moduleName: undefined,\n            actions: [],\n        };\n    }\n\n    onGenerateFiles = () => {\n        const {moduleName, actions} = this.state;\n\n        if(!moduleName || _.isEmpty(actions)) {\n            notification.error({message: \"Not enough information provided!\"});\n            return;\n        }\n\n        const { generateDuckFile, generateSagaFile } = generators({actions, moduleName});\n        \n        downloadTxtFile(generateDuckFile(), \"duck.txt\");\n        downloadTxtFile(generateSagaFile(), \"saga.txt\");\n\n        notification.info({\n            message: (\n                <div>\n                    <div>{`Module: ${moduleName}`}</div>\n                </div>\n            )\n        });\n    }\n\n    render() {\n\n        const { actions } = this.state;\n\n        return (\n            <div>\n                <Collapse defaultActiveKey={['1', '2']}>\n                    <Panel header=\"Enter module name\" key=\"1\">\n                        <Input\n                            placeholder=\"Module name\"\n                            onChange={(e) => this.setState({moduleName: e.target.value})}\n                        />\n                    </Panel>\n                    <Panel header=\"Create actions\" key=\"2\">\n                        <InputArray\n                            actionsChanged={(actions) => {\n                                this.setState({ actions });\n                            }}\n                        />\n                    </Panel>\n                </Collapse>\n\n                <Button className=\"generateButton\" onClick={() => this.onGenerateFiles()}>Generate file</Button>\n\n                <div className=\"jsonContainer\">\n                    <ReactJson\n                        name={false}\n                        collapsed={false}\n                        displayObjectSize={false}\n                        displayDataTypes={false}\n                        collapseStringsAfterLength={true}\n                        style={{fontSize: '0.5em', width: '100%'}} src={actions} />\n                </div>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//vedor\nimport 'antd/dist/antd.css'; //Styles for all antd components, if you remove this - antd will not work\n\n//proj\nimport DuckGeteratorPage from './DuckGeneratorPage';\nimport logo from './logo.svg';\n\n//own\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\tBoilerplate reducer\n\t\t\t\t</div>\n\t\t\t</header>\n\n\t\t\t<div>\n\t\t\t\t<DuckGeteratorPage />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n","/**\n * Different types of actions require different processing, for example we have to have at\n * least two duck actions created for \"fetch\" type - FETCH_SOMETHING and FETCH_SOMETHING_SUCCESS\n */\nconst ACTION_TYPES = {\n    fetch: \"fetch\",\n    set: \"set\",\n}\n\nmodule.exports = {\n    ACTION_TYPES,\n};"],"sourceRoot":""}