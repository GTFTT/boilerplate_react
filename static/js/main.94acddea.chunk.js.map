{"version":3,"sources":["globalConstants/index.js","generators/enricher.js","utils/index.js","generators/duckGenerator/index.js","generators/pageGenerator/index.js","generators/pageGenerator/poorPageGenerator.js","generators/index.js","generators/sagaGenerator/index.js","DuckGeneratorPage/InputArray/index.js","DuckGeneratorPage/index.js","logo.svg","App.js","index.js"],"names":["ACTION_TYPES","Object","freeze","fetch","set","poorSagaAction","poorReducerAction","DEF_INIT_VALUES","undefinedValue","nullValue","emptyString","zero","emptyObject","emptyArray","COMPONENT_TYPES","poorPage","tablePage","modal","module","exports","generationObject","moduleName","actions","moduleNameCamelCase","camelCase","pageName","pascalCase","modalName","enrichedActions","_","map","action","enriched","constants","actionCreators","sagas","actionType","setFetching","constantCase","actionName","fetchSuccess","sagaName","valueNames","value","fetchingValue","selectors","propertyName","enrichActions","downloadTxtFile","text","filename","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","lines","textArr","filter","line","Boolean","join","generateHeader","generateConstants","result","each","generateConstant","generateReducerInitState","actionInitValue","res","generateReducerInitStateSnippet","generateReducer","generateReducerSnippet","generateSelectors","generateActionCreators","generateActionSnippet","moduleDescription","generatingComponent","generatePoorPage","generateImports","generateMapStateToProps","generateMapDispatchToProps","generateClass","split","str","poorPageGenerator","enrichedGenerationObject","enricher","console","log","generateDuckFile","duckGenerator","generateSagaFile","fetchActions","obj","poorSagaActions","setActions","generateSagas","actionFetchURL","generateCommonSaga","sagaGenerator","generatePage","pageGenerator","Item","List","Option","Select","InputArray","props","updateState","newState","actionsChanged","setState","get","createNewItem","undefined","key","v4","deleteItem","item","_renderAdditionalFields","className","placeholder","onChange","e","changeActionProps","target","initValue","sentenceCase","updatedActions","state","size","bordered","dataSource","this","locale","emptyText","header","onClick","renderItem","DeleteTwoTone","React","Component","Panel","Collapse","TabPane","Tabs","RadioGroup","Radio","Group","TextArea","Input","DuckGeneratorPage","onGenerateFiles","isEmpty","generators","notification","info","message","error","defaultActiveKey","rows","tabPosition","tab","name","displayObjectSize","displayDataTypes","collapseStringsAfterLength","src","App","logo","alt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.94acddea.chunk.js","sourcesContent":["/**\n * Different types of actions require different processing, for example we have to have at\n * least two duck actions created for \"fetch\" type - FETCH_SOMETHING and FETCH_SOMETHING_SUCCESS\n */\nconst ACTION_TYPES = Object.freeze({\n    fetch: \"fetch\",\n    set: \"set\",\n    poorSagaAction: \"poorSagaAction\",\n    poorReducerAction: \"poorReducerAction\",\n});\n\n/**\n * Sometimes you have to specify default init values, those are strings.\n * Each of them represent real JS value which often used as default initializing value.\n */\nconst DEF_INIT_VALUES = Object.freeze({\n    undefinedValue: 'undefined',\n    nullValue: 'null',\n    emptyString: `\\\"\\\"`,\n    zero: '0',\n    emptyObject: '{}',\n    emptyArray: '[]',\n});\n\n/**\n * There are different types of components to generate. We can generate table, modal or something else.\n */\nconst COMPONENT_TYPES = Object.freeze({\n    poorPage: \"poorPage\",\n    tablePage: \"tablePage\",\n    modal: \"modal\",\n});\n\nmodule.exports = {\n    ACTION_TYPES,\n    DEF_INIT_VALUES,\n    COMPONENT_TYPES,\n};","//vendor\nimport { constantCase, camelCase, capitalCase, pascalCase } from 'change-case'; //For converting different types of variables(camelCase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n/**\n * Actions enriching - generating more fields that can be used later\n * @param {*} actions \n * @returns Enriched actions\n */\n function enrichActions(actions) {\n    const enrichedActions = _.map(actions, (action) => {\n        let enriched =  {\n            ...action,\n            constants: {}, //Constant names, can be more than one\n            actionCreators: {}, //Action function names, different for different types of actions\n            sagas: {}, //Action function names, different for different types of actions\n        };\n\n        switch (action.actionType) {\n            case ACTION_TYPES.fetch:\n                enriched.constants = {\n                    setFetching: constantCase(`set fetching ${action.actionName}`),\n                    fetch: constantCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: constantCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.actionCreators = {\n                    setFetching: camelCase(`set fetching ${action.actionName}`),\n                    fetch: camelCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: camelCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionType} ${action.actionName} saga`)\n                }\n\n                //Used to store data inside them\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`),\n                    fetchingValue: camelCase(`fetching ${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                    fetchingValue: camelCase(`select fetching ${action.actionName}`)\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.set:\n                enriched.constants = {\n                    set: constantCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    set: camelCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.poorSagaAction:\n                enriched.constants = {\n                    poorSagaAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionName} saga`)\n                }\n\n                enriched.actionCreators = {\n                    poorSagaAction: camelCase(`${action.actionName}`),\n                }\n\n            case ACTION_TYPES.poorReducerAction:\n                enriched.constants = {\n                    poorReducerAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    poorReducerAction: camelCase(`${action.actionName}`),\n                }\n                break;\n        }\n\n        return enriched;\n    })\n    return Object.freeze(enrichedActions);\n}\n\n\n/**\n * Before we start generation we have to enrich generation object - add more fields and pre-generate some variables.\n */\nexport default (generationObject) => {\n    const { moduleName, actions } = generationObject;\n\n    const moduleNameCamelCase = camelCase(moduleName);\n    const pageName = pascalCase(`${moduleName} page`);\n    const modalName = pascalCase(`${moduleName} modal`);\n    const enrichedActions = enrichActions(actions);\n\n    return {\n        ...generationObject,\n\n        moduleName: moduleNameCamelCase,\n        actions: enrichedActions,\n        pageName,\n        modalName,\n    };\n}","//vendor\nimport _ from \"lodash\";\n\n/**\n * Save file on user's local machine. Just provide content you wnat to save.\n * @param { String } text - content of a file\n */\nexport const downloadTxtFile = (text, filename = 'myFile.txt') => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}\n\n/**\n * Generate text from array of lines with new line at the end of each.\n * Last line does not have a new line character.\n * @param { Array } text - array of strings\n */\nexport const lines = (textArr) => {\n    const filteredLines = _.filter(textArr, (line) => Boolean(line) || line === \"\"); // Remove all false values except of empty string\n    \n    return filteredLines.join(\"\\n\");\n}","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\nfunction generateConstant({ actionType, constants }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result +=`export const ${constants.fetch} = \\`\\${prefix}/${constants.fetch}\\`;\\n`;\n            result +=`export const ${constants.fetchSuccess} = \\`\\${prefix}/${constants.fetchSuccess}\\`;\\n`;\n            result +=`export const ${constants.setFetching} = \\`\\${prefix}/${constants.setFetching}\\`;\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            result +=`export const ${constants.set} = \\`\\${prefix}/${constants.set}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            result +=`export const ${constants.poorSagaAction} = \\`\\${prefix}/${constants.poorSagaAction}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result +=`export const ${constants.poorReducerAction} = \\`\\${prefix}/${constants.poorReducerAction}\\`;\\n`;\n            break;\n    }\n\n    return result;\n}\n\n/** Reducer snippet is a line that contains variable name */\nfunction generateReducerInitStateSnippet({ actionInitValue, actionType, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            res += `\\t${valueNames.fetchingValue}: false,\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            break;    \n    }\n\n    return res;\n}\n\n\n/**\n * Reducer's state changer inside switch statement\n */\nfunction generateReducerSnippet({ actionType, constants, valueNames }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result = lines([\n                `\\t\\tcase ${constants.fetchSuccess}:`,\n                `\\t\\t\\tconst { ${valueNames.value} } = payload;`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: ${valueNames.value},`,\n                '\\t\\t\\t};',\n                `\\t\\tcase ${constants.setFetching}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.fetchingValue}: payload,`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            result = lines([\n                `\\t\\tcase ${constants.set}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: payload`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result = lines([\n                `\\t\\tcase ${constants.poorReducerAction}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Actions are functions that can be called when you want to change the state\n */\nfunction generateActionSnippet({ actionType, actionName, actionCreators, constants, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += lines([\n                `export const ${actionCreators.fetch} = () => ({`,\n                `\\ttype: \\t${constants.fetch},`,\n                '});\\n',\n                `export const ${actionCreators.fetchSuccess} = ({${valueNames.value}}) => ({`,\n                `\\ttype: \\t${constants.fetchSuccess},`,\n                `\\tpayload: {${valueNames.value}}`,\n                '});\\n',\n                `export const ${actionCreators.setFetching} = (value) => ({`,\n                `\\ttype: \\t${constants.setFetching},`,\n                '\\tpayload: value',\n                '});\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += lines([\n                `export const ${actionCreators.set} = (value) => ({`,\n                `\\ttype: \\t${constants.set},`,\n                '\\tpayload: value',\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            res += lines([\n                `export const ${actionCreators.poorSagaAction} = () => ({`,\n                `\\ttype: \\t${constants.poorSagaAction},`,\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            res += lines([\n                `export const ${actionCreators.poorReducerAction} = () => ({`,\n                `\\ttype: \\t${constants.poorReducerAction},`,\n                '});\\n'\n            ]);\n            break;\n    }\n\n    return res;\n}\n\n/**\n * Module pattern is used here to generate data. This generator is used for creating duck files.\n * \n * @param { String } moduleName - name of the module you want to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    /**\n     * @returns Header of a duck file\n     */\n    function generateHeader() {\n        let result = lines([\n            `/** ------------------------------------- Constants ------------------------------------- **/`,\n            `export const moduleName = '${moduleName}';`,\n            `const prefix = \\`cpb/\\${moduleName}\\`;`,\n            '',\n        ]);\n    \n        return result;\n    }\n\n    /**\n     * @param {*} params.actions - actions to generate constants for\n     */\n    function generateConstants() {\n        let result = \"\";\n\n        _.each(actions, (action) => {\n            result+=generateConstant(action);\n        });\n\n        return result;\n    }\n\n    function generateReducerInitState() {\n        let result = lines([\n            '/** ------------------------------------- Reducer ------------------------------------- **/',\n            'const ReducerState = {\\n',\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerInitStateSnippet(action);\n        });\n        result+= '};\\n';\n\n        return result;\n    }\n\n    function generateReducer() {\n        let result = lines([\n            `export default function reducer(state = ReducerState, action) {`,\n            `\\tconst { type, payload } = action;`,\n            `\\tswitch (type) {\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerSnippet(action);\n        })\n\n        result += lines([\n            `\\t\\tdefault:`,\n            `\\t\\t\\treturn state;`,\n            `\\t}`,\n            `}`,\n        ]);\n    \n        return result;\n    }\n\n    function generateSelectors() {\n        let res = lines([\n            `/* ------------------------------------- Selectors ------------------------------------- */\\n`,\n        ]);\n\n        _.each(actions, ({ actionType, actionName, selectors, valueNames }) => {\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    res += `export const ${selectors.fetchingValue} = state => state[ moduleName ].${valueNames.fetchingValue};\\n\\n`;\n                    break;\n        \n                case ACTION_TYPES.set:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    break;    \n            }\n        });\n    \n        return res;\n    }\n\n    function generateActionCreators() {\n        let result = lines([\n            `/* ------------------------------------- Action Creators -------------------------- */\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateActionSnippet(action);\n        });\n    \n        return result;\n    }\n\n    return {\n        generateHeader,\n        generateConstants,\n        generateReducerInitState,\n        generateReducer,\n        generateSelectors,\n        generateActionCreators,\n    }\n};","\n//own\nimport { lines } from \"utils\";\nimport poorPageGenerator from \"./poorPageGenerator\"\n\nexport default ({pageName, moduleDescription, generatingComponent, actions}) => {\n\n    const generatePoorPage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = poorPageGenerator({moduleDescription, actions});\n\n        return lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n    };\n\n    return {\n        generatePoorPage\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, moduleDescription, actions}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `\\t${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `\\t${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `\\t${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `\\t${actionCreators.poorReducerAction},`\n            ),\n            `};`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t${valueNames.value}: ${selectors.value}(state),`,\n                    `\\t${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, actionCreators}) => lines([\n                    `\\t${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, actionCreators}) => `\\t${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n            `\\tconstructor(props) {`,\n            `\\t\\tsuper(props);`,\n            `\\t}`,\n            ``,\n            `\\trender() {`,\n            `\\t\\tconst {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `\\t\\t\\t${valueNames.value},`,\n                    `\\t\\t\\t${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `\\t\\t\\t${valueNames.value},`\n            ),\n            `\\t\\t} = this.props;`,\n            ``,\n            `\\t\\treturn (`,\n            `\\t\\t\\t<div>`,\n            `\\t\\t\\t\\t<Layout`,\n            `\\t\\t\\t\\t\\ttitle={ <FormattedMessage id={ 'generate.generate' } /> }`,\n            `\\t\\t\\t\\t\\tcontrols={}`,\n            `\\t\\t\\t\\t></Layout>`,\n            `\\t\\t\\t</div>`,\n            `\\t\\t)`,\n            `\\t}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport { constantCase, camelCase, capitalCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n//own\nimport enricher from './enricher';\nimport duckGenerator from './duckGenerator';\nimport sagaGenerator from './sagaGenerator';\nimport pageGenerator from './pageGenerator';\n\n/**\n * \n * @param {*} params.moduleName \n * @param {*} params.actions  - Array of action objects\n * @example\n *  const actions = [\n *      {\n *          actionName: 'vehicles',\n *          actionType: ACTION_TYPES.fetch,\n *          actionFetchURL: undefined,\n *          actionInitValue: 'undefined',\n *      },\n *      {\n *          actionName: 'vehiclesFetching',\n *          actionType: ACTION_TYPES.set,\n *          actionInitValue: 'undefined',\n *      },\n *  ];\n */\nexport default (generationObject) => {\n    const enrichedGenerationObject = enricher(generationObject);\n    const { generatingComponent } = enrichedGenerationObject;\n\n    console.log(\"enrichedGenerationObject: \", enrichedGenerationObject);\n    \n    function generateDuckFile() {\n        const {\n            generateHeader,\n            generateConstants,\n            generateReducerInitState,\n            generateReducer,\n            generateSelectors,\n            generateActionCreators,\n        } = duckGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateHeader() + \"\\n\\n\"\n            + generateConstants() + \"\\n\"\n            + generateReducerInitState() + \"\\n\"\n            + generateReducer() + \"\\n\\n\"\n            + generateSelectors() + \"\\n\\n\"\n            + generateActionCreators() + \"\\n\";\n\n        return data;\n    }\n\n    function generateSagaFile() {\n        const {\n            generateImports,\n            generateSagas,\n            generateCommonSaga,\n        } = sagaGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateImports() + \"\\n\\n\"\n            + generateSagas() + \"\\n\"\n            + generateCommonSaga() + \"\\n\";\n\n        return data;\n    }\n\n    function generatePage() {\n        const {\n            generatePoorPage,\n        } = pageGenerator(enrichedGenerationObject)\n\n        switch (generatingComponent) {\n            case COMPONENT_TYPES.poorPage:\n                return generatePoorPage();\n        \n            default:\n                return undefined;\n        };\n    }\n\n    return {\n        generateDuckFile,\n        generateSagaFile,\n        generatePage,\n    };\n};","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from \"utils\";\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    const fetchActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.fetch)\n    const poorSagaActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.poorSagaAction)\n    const setActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.set)\n\n    function generateImports() {\n        let result = lines([\n            `// vendor`,\n            `import { call, put, all, take, select } from 'redux-saga/effects';`,\n            `import nprogress from 'nprogress';`,\n            `import _ from 'lodash';`,\n            `import moment from 'moment';`,\n            `import { notification } from 'antd';`,\n            ``,\n            `//proj`,\n            `import history from 'store/history';`,\n            `import book from 'routes/book';`,\n            `import { emitError } from 'core/ui/duck';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// own`,\n            `import {`,\n            ..._.map(fetchActions, ({constants}) => `\\t${constants.fetch},`),\n            ``,\n            ..._.map(fetchActions, ({constants}) => `\\t${constants.fetchSuccess},`),\n            ``,\n            ..._.map(poorSagaActions, ({constants}) => `\\t${constants.poorSagaAction},`),\n            ``,\n            ..._.map(setActions, ({constants}) => `\\t${constants.set},`),\n            `} from './duck';`,\n            `\\n`,\n        ]);\n        return result;\n    }\n\n    function generateSagas() {\n        let result = _.map(actions, ({actionType, propertyName, constants, actionCreators, actionFetchURL, sagas}) => {\n\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.fetch});`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(true));`,\n                        ``,\n                        `\\t\\t\\tconst ${propertyName} = yield call(fetchAPI, 'GET', \\`${actionFetchURL? actionFetchURL: \"\"}\\`);`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.fetchSuccess}({${propertyName}}));`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t} finally {`,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(false));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}`,\n                        `\\n`\n                    ]);\n                case ACTION_TYPES.poorSagaAction:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.poorSagaAction});`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}\\n`,\n                    ]);\n            }\n            \n        }).join(\"\");\n\n        return result;\n    }\n\n    function generateCommonSaga() {\n        let result = lines([\n            `export function* saga() {`,\n            `\\tyield all([`,\n\n            ..._.map(actions, ({actionType, sagas}) => {\n                switch (actionType) {\n                    case ACTION_TYPES.fetch:\n                    case ACTION_TYPES.poorSagaAction:\n                        return `\\t\\tcall(${sagas.sagaName}),`;\n                }\n                \n            }),\n\n            `\\t]);`,\n            `}`,\n        ]);\n\n        return result;\n    }\n\n    return {\n        generateImports,\n        generateSagas,\n        generateCommonSaga,\n    }\n};","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n/**\n * Generate array which represents one action. This action contains basic variables gained from the user.\n * \n * action: {\n *      actionName,\n *      actionType,\n *      actionFetchURL,\n *      actionInitValue,\n *      key\n * }\n * \n * @property { Function(actions) } actionsChanged - callback, called when actions are changed\n */\nexport default class InputArray extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //Init state obj\n        this.state = {\n            actions: []\n        };\n    }\n\n    /**\n     * Used to update state and perform additional actions.\n     * Call callback functions if something changed.\n     * @param {*} newState \n     */\n    updateState = (newState) => {\n        const { actionsChanged } = this.props;\n\n        this.setState(newState, () => actionsChanged && actionsChanged(_.get(this, 'state.actions')))\n    }\n\n    /**\n     * Generate new action with initial values setup\n     */\n    createNewItem = () => {\n        this.updateState({\n            actions: [\n                ..._.get(this, 'state.actions'),\n                {\n                    actionName: \"vehicles\",\n                    actionType: ACTION_TYPES.fetch,\n                    actionFetchURL: undefined,\n                    actionInitValue: DEF_INIT_VALUES.undefinedValue,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteItem = (key) => {\n        this.updateState({\n            actions: [\n                ..._.filter(_.get(this, 'state.actions'), (item) => item.key != key),\n            ]\n        })\n    }\n\n    /**\n     * Each action has its additional fields we have to render\n     * @param {*} params.key - action identifier\n     * @param {*} params.actionType - type of an action\n     */\n    _renderAdditionalFields = ({key, actionType, actionFetchURL, actionInitValue}) => {\n        switch (actionType) {\n            case ACTION_TYPES.fetch:\n                return (\n                    <div>\n                        <Input\n                            value={actionFetchURL}\n                            className=\"input\"\n                            placeholder=\"Fetching URL\"\n                            onChange={(e) => this.changeActionProps(key, {actionFetchURL: e.target.value})}\n                        />\n                        <Select\n                            value={actionInitValue}\n                            className=\"select\"\n                            placeholder=\"Init value\"\n                            onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                        >\n                            {_.map(DEF_INIT_VALUES, (value, key) => {\n                                return (\n                                    <Option value={value}>{sentenceCase(key)}</Option>\n                                )\n                            })}\n                        </Select>\n                    </div>\n                )\n            case ACTION_TYPES.set:\n                return (\n                    <Select\n                        value={actionInitValue}\n                        className=\"select\"\n                        placeholder=\"Select init value\"\n                        onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                    >\n                        {_.map(DEF_INIT_VALUES, (value, key) => {\n                            return (\n                                <Option value={value}>{sentenceCase(key)}</Option>\n                            )\n                        })}\n                    </Select>\n                )\n            default:\n                return undefined;\n        }\n\n    }\n\n    /**\n     * When changed input value of an action.\n     * Values will be replaced only if they are provided\n     * @param {*} key - uuid\n     * @param {*} params - action\n     */\n    changeActionProps = (key, {actionName, actionType, actionInitValue, actionFetchURL}) => {\n        const actions = _.get(this, 'state.actions');\n\n        const updatedActions = _.map(actions, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    actionName: actionName? actionName: item.actionName,\n                    actionType: actionType? actionType: item.actionType,\n                    actionInitValue: actionInitValue? actionInitValue: item.actionInitValue,\n                    actionFetchURL: (actionFetchURL || actionFetchURL === \"\")? actionFetchURL: item.actionFetchURL,\n                }\n            else\n                return item;\n        })\n\n        this.updateState({\n            actions: updatedActions\n        })\n    } \n\n\n    render() {\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={_.get(this, 'state.actions')}\n                    locale={{emptyText: (<div>No actions</div>)}}\n                    header={\n                        <Button onClick={() => this.createNewItem()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteItem(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'actionName')}\n                                    className=\"input\"\n                                    onChange={(e) => this.changeActionProps(item.key, {actionName: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'actionType')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeActionProps(item.key, {actionType: key})}\n                                >\n                                    {_.map(ACTION_TYPES, (value, key) => (<Option value={value}>{constantCase(key)}</Option>))}\n                                </Select>\n\n                                <div>\n                                    {this._renderAdditionalFields(item)}\n                                </div>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view'\n\n//proj\nimport generators from \"generators\";\nimport { downloadTxtFile } from '../utils';\nimport { COMPONENT_TYPES } from 'globalConstants';\nimport enricher from 'generators/enricher';\n\n//own\nimport InputArray from './InputArray';\nimport \"./styles.css\";\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\nconst RadioGroup = Radio.Group;\nconst TextArea = Input.TextArea;\n\nexport default class DuckGeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moduleName: \"test\",\n            moduleDescription: undefined,\n            generatingComponent: COMPONENT_TYPES.poorPage,\n            actions: [],\n        };\n    }\n\n    onGenerateFiles = () => {\n        const {moduleName, generatingComponent, moduleDescription, actions} = this.state;\n\n        if(!moduleName || _.isEmpty(actions)) {\n            notification.error({message: \"Not enough information provided!\"});\n            return;\n        }\n\n        const { generateDuckFile, generateSagaFile, generatePage } = generators({actions, moduleName, generatingComponent, moduleDescription});\n        \n        downloadTxtFile(generateDuckFile(), \"duck.txt\");\n        downloadTxtFile(generateSagaFile(), \"saga.txt\");\n        downloadTxtFile(generatePage(), \"page.txt\");\n\n        notification.info({\n            message: (\n                <div>\n                    <div>{`Module: ${moduleName}`}</div>\n                </div>\n            )\n        });\n    }\n\n    render() {\n\n        const {actions, moduleName, generatingComponent, moduleDescription} = this.state;\n\n        return (\n            <div className=\"mainConst\">\n                <Collapse className=\"collapse\" defaultActiveKey={['1', '2']}>\n                    <Panel header=\"Settings\" key=\"1\">\n                        <div className=\"settingsContainer\">\n                            <Input\n                                placeholder=\"Module name\"\n                                value={moduleName}\n                                onChange={(e) => this.setState({moduleName: e.target.value})}\n                            />\n\n                            <TextArea\n                                placeholder=\"Module description(comment)\"\n                                rows={4}\n                                className=\"textArea\"\n                                onChange={(e) => this.setState({moduleDescription: e.target.value})}\n                            />\n\n                            <div className=\"radioCont\">\n                                Module type:\n                                <br /> \n                                <RadioGroup value={generatingComponent} onChange={(e) => this.setState({generatingComponent: e.target.value})}>\n                                    <Radio value={COMPONENT_TYPES.poorPage}>Poor page</Radio>\n                                    <Radio value={COMPONENT_TYPES.tablePage}>Table page</Radio>\n                                    <Radio value={COMPONENT_TYPES.modal}>Modal</Radio>\n                                </RadioGroup>\n                            </div>\n                        </div>\n                    </Panel>\n                    <Panel header=\"Create actions\" key=\"2\">\n                        <div className=\"settingsContainer\">\n                            <Tabs className=\"tabs\" tabPosition=\"left\">\n                                <TabPane tab=\"Actions generator\" key=\"1\">\n                                    <InputArray\n                                        actionsChanged={(actions) => {\n                                            this.setState({ actions });\n                                        }}\n                                    />\n                                </TabPane>\n                                <TabPane tab=\"Input\" key=\"2\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={this.state}\n                                        />\n                                    </div>\n                                </TabPane>\n                                <TabPane tab=\"Generation object\" key=\"3\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={enricher({actions, moduleName, generatingComponent, moduleDescription})}\n                                        />\n                                    </div>\n                                </TabPane>\n                            </Tabs>\n                        </div>\n                    </Panel>\n                </Collapse>\n\n                <Button className=\"generateButton\" onClick={() => this.onGenerateFiles()}>Generate</Button>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//vedor\nimport 'antd/dist/antd.css'; //Styles for all antd components, if you remove this - antd will not work\n\n//proj\nimport DuckGeteratorPage from './DuckGeneratorPage';\nimport logo from './logo.svg';\n\n//own\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\tBoilerplate reducer\n\t\t\t\t</div>\n\t\t\t</header>\n\n\t\t\t<div>\n\t\t\t\t<DuckGeteratorPage />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}