{"version":3,"sources":["../node_modules/prettier sync","routes/Main.js","utils/fileSaver.js","utils/fileParsers.js","utils/index.js","generators/enricher.js","generators/duckGenerator/index.js","generators/pageGenerator/index.js","generators/pageGenerator/poorPageGenerator/poorPageGenerator.js","generators/pageGenerator/tablePageGenerator/tablePageGenerator.js","generators/pageGenerator/tablePageGenerator/tableGenerator.js","generators/pageGenerator/tablePageGenerator/tableConfigGenerator.js","generators/pageGenerator/tablePageGenerator/tableStylesGenerator.js","generators/pageGenerator/tablePageGenerator/tablesIndexGenerator.js","generators/index.js","generators/sagaGenerator/index.js","generators/stylesGenerator/index.js","generators/messagesGenerator/index.js","pages/FrontendBoilerplateGeneratorPage/components/ActionsArray/actionsAdditionalFields.js","pages/FrontendBoilerplateGeneratorPage/components/ActionsArray/index.js","pages/FrontendBoilerplateGeneratorPage/components/TranslationsArray/translationsAdditionalFields.js","pages/FrontendBoilerplateGeneratorPage/components/TranslationsArray/index.js","pages/FrontendBoilerplateGeneratorPage/components/TableConfigurationsArray/constants.js","pages/FrontendBoilerplateGeneratorPage/components/TableConfigurationsArray/index.js","pages/FrontendBoilerplateGeneratorPage/index.js","pages/Home/index.js","routes/Public.js","store/history.js","store/middleware.js","store/enhancers.js","store/rootReducer.js","pages/FrontendBoilerplateGeneratorPage/redux/saga.js","store/rootSaga.js","store/store.js","UI/Navigation/logo.svg","UI/Navigation/components/NavigationButton/index.js","UI/Navigation/index.js","UI/Navigation/config.js","App.js","index.js","pages/FrontendBoilerplateGeneratorPage/redux/duck.js","routes/book.js","globalConstants/index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Routes","Component","hot","fileBuilder","fileBuildingObject","zipFile","prevDeep","type","name","extension","content","fileProps","currDeep","TYPES_OF_FILES","file","directory","newZipFileInstance","folder","_","each","obj","parseJsx","text","prettier","format","semi","tabWidth","parser","plugins","parserBabel","error","console","lines","textArr","filter","line","Boolean","join","generationObject","moduleName","generationComponentType","actions","translations","tableConfigs","moduleNameCamelCase","camelCase","pageName","pascalCase","pageTableName","modalName","translationComponentName","COMPONENT_TYPES","poorPage","tablePage","includes","enrichedActions","map","action","enriched","constants","actionCreators","sagas","actionType","ACTION_TYPES","fetch","setFetching","constantCase","actionName","setValueFilters","fetchSuccess","sagaName","valueNames","value","statsValue","filtersValue","fetchingValue","selectors","propertyName","set","poorSagaAction","poorReducerAction","Object","freeze","enrichActions","enrichedTranslations","componentName","translation","constantEn","snakeCase","translationName","translationEn","constantUk","translationUk","constantRu","translationRu","formattedMessage","formatMessage","enrichTranslations","enrichedTableConfigs","tableConfig","translationOfCurrentConfig","get","key","tableConfigTranslationKey","tableConfigName","enrichTableConfigs","dataSourceAction","notification","warning","message","generateHeader","generateConstants","result","generateConstant","generateReducerInitState","actionInitValue","res","generateReducerInitStateSnippet","generateReducer","generateReducerSnippet","generateSelectors","generateActionCreators","generateActionSnippet","generatePoorPage","moduleDescription","generateImports","generateMapStateToProps","generateMapDispatchToProps","generateClass","titleTranslation","split","str","poorPageGenerator","generateTablePage","tablePageGenerator","generateTable","tableGenerator","generateTableConfig","generateTableConfigFile","tableConfigWidth","tableConfigDataIndex","tableConfigAlign","tableConfigGenerator","generateTableStyles","generateTableStyleFile","generateTablesIndexFile","generateTableIndexFile","tablesIndexGenerator","enrichedGenerationObject","enricher","generateDuckFile","duckGenerator","data","generateSagaFile","fetchActions","poorSagaActions","setActions","generateSagas","actionFetchURL","generateCommonSaga","sagaGenerator","generateStylesFile","generateStyleFile","generatePages","pageGenerator","generatedPages","table","tableStyles","tablesIndexFile","generateMessagesFile","messagesGenerator","Option","Select","renderAdditionalFields","options","changeActionProps","className","placeholder","onChange","target","renderAdditionalSettings","isDataSource","initValueSelect","span","initValue","DEF_INIT_VALUES","sentenceCase","checked","Item","List","mapDispatchToProps","ActionsArray","updateActions","props","actionsChanged","createNewAction","undefined","undefinedValue","v4","deleteAction","item","updatedActions","this","size","bordered","dataSource","locale","emptyText","header","onClick","renderItem","title","trigger","log","SettingOutlined","DeleteTwoTone","React","connect","state","selectActions","isPageTitle","changeTranslation","setTranslations","updateTranslations","createTranslation","deleteTranslation","updatedTranslations","selectTranslations","ALIGN","left","right","center","setTableConfigs","TableConfigurationsArray","updateTableConfigs","createTableConfig","deleteTableConfig","changeTableConfig","updatedTableConfigs","align","selectTableConfigs","Panel","Collapse","TabPane","Tabs","RadioGroup","Radio","Group","TextArea","Input","setModuleName","setModuleDescription","setGenerationComponentType","FrontendBoilerplateGeneratorPage","onGenerateFiles","isEmpty","generators","fileStructure","pages","enrichedValues","modal","filesTree","filename","fileExtension","initZipDeep","zip","JSZip","generateAsync","then","saveAs","catch","downloadZipFile","info","parentComponentName","style","width","textAlign","fontSize","defaultActiveKey","rows","TranslationsArray","tabPosition","tab","displayObjectSize","displayDataTypes","collapseStringsAfterLength","src","selectModuleName","selectModuleDescription","selectGenerationComponentType","Home","Public","exact","component","path","book","home","render","frontendBoilerplateGenerator","to","history","createBrowserHistory","routerMiddleware","createRouterMiddleware","sagaMiddleware","createSagaMiddleware","middleware","thunk","logger","createLogger","require","duration","timestamp","collapsed","diff","colors","prevState","nextState","push","persistConfig","storage","persistStorage","whitelist","frontendBoilerplateGeneratorPageModule","persistedState","router","connectRouter","appState","frontendBoilerplateGeneratorPageReducer","appReducer","combineReducers","rootReducer","persistReducer","payload","resetedState","LOCATION_CHANGE","reduce","reducer","saga","all","rootSaga","frontendBoilerplateGeneratorPage","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","composeEnhancers","applyMiddleware","persistor","persistStore","run","NavigationButton","label","Navigation","navigationConfig","backendBoilerplateGenerator","children","logo","alt","App","loading","ReactDOM","StrictMode","document","getElementById","prefix","SET_MODULE_NAME","SET_MODULE_DESCRIPTION","SET_GENERATION_COMPONENT_TYPE","SET_ACTIONS","SET_TRANSLATIONS","SET_TABLE_CONFIGS","ReducerState","nullValue","emptyString","zero","emptyObject","emptyArray","false","true"],"mappings":"yGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,8JCInBC,E,4JACF,WACI,OACI,cAAC,IAAD,Q,GAHSC,aAQNC,kBAAIL,EAAJK,CAAYF,K,kTCmBrBG,EAAc,SAAdA,EAAeC,EAAoBC,EAASC,GAC9C,IAAQC,EAA8CH,EAA9CG,KAAMC,EAAwCJ,EAAxCI,KAAMC,EAAkCL,EAAlCK,UAAWC,EAAuBN,EAAvBM,QAASC,EAAcP,EAAdO,UAClCC,EAAWN,EAAW,EAE5B,GAAGM,GA7Bc,GA6BY,KAAM,+GACnC,IAAIJ,EAAM,KAAM,wCAChB,IAAID,EAAM,KAAM,wCAEhB,OAAQA,GACJ,KAAKM,iBAAeC,KAChBT,EAAQS,KAAR,UAAgBN,GAAhB,OAAuBC,GAAsB,IAAMC,EAASC,GAC5D,MAEJ,KAAKE,iBAAeE,UAChB,IAAMC,EAAqBX,EAAQY,OAAOT,GAC1CU,IAAEC,KAAKT,GAAS,SAACU,GAAD,OAASjB,EAAYiB,EAAKJ,EAAoBJ,Q,mCClCpES,EAAW,SAACC,GACd,IACI,OAAOC,IAASC,OAAOF,EAAM,CAACG,MAAM,EAAMC,SAAU,EAAGC,OAAQ,QAASC,QAAS,CAACC,OACpF,MAAMC,GACJC,QAAQD,MAAMA,GAElB,OAAOR,GCjBEU,EAAQ,SAACC,GAGlB,OAFsBf,IAAEgB,OAAOD,GAAS,SAACE,GAAD,OAAUC,QAAQD,IAAkB,KAATA,KAE9CE,KAAK,O,kBC6If,eAACC,GACZ,IAAQC,EAA6ED,EAA7EC,WAAYC,EAAiEF,EAAjEE,wBAAyBC,EAAwCH,EAAxCG,QAASC,EAA+BJ,EAA/BI,aAAcC,EAAiBL,EAAjBK,aAE9DC,EAAsBC,YAAUN,GAChCO,EAAWC,YAAW,GAAD,OAAIR,EAAJ,UACrBS,EAAgBD,YAAW,GAAD,OAAIR,EAAJ,WAC1BU,EAAYF,YAAW,GAAD,OAAIR,EAAJ,WAGtBW,EAA4B,CAACC,kBAAgBC,SAAUD,kBAAgBE,WAAWC,SAASd,GAC3FM,EACAG,EAEAM,EAzJV,SAAuBd,GACnB,IAAMc,EAAkBrC,IAAEsC,IAAIf,GAAS,SAACgB,GACpC,IAAIC,EAAQ,2BACLD,GADK,IAERE,UAAW,GACXC,eAAgB,GAChBC,MAAO,KAGX,OAAQJ,EAAOK,YACX,KAAKC,eAAaC,MACdN,EAASC,UAAY,CACjBM,YAAaC,YAAa,gBAAD,OAAiBT,EAAOU,aACjDC,gBAAiBF,YAAa,OAAD,OAAQT,EAAOU,WAAf,aAC7BH,MAAOE,YAAa,GAAD,OAAIT,EAAOK,WAAX,YAAyBL,EAAOU,aACnDE,aAAcH,YAAa,GAAD,OAAIT,EAAOK,WAAX,YAAyBL,EAAOU,WAAhC,cAG9BT,EAASE,eAAiB,CACtBK,YAAapB,YAAU,gBAAD,OAAiBY,EAAOU,aAC9CC,gBAAiBvB,YAAU,OAAD,OAAQY,EAAOU,WAAf,aAC1BH,MAAOnB,YAAU,GAAD,OAAIY,EAAOK,WAAX,YAAyBL,EAAOU,aAChDE,aAAcxB,YAAU,GAAD,OAAIY,EAAOK,WAAX,YAAyBL,EAAOU,WAAhC,cAG3BT,EAASG,MAAQ,CACbS,SAAUzB,YAAU,GAAD,OAAIY,EAAOK,WAAX,YAAyBL,EAAOU,WAAhC,WAIvBT,EAASa,WAAa,CAClBC,MAAO3B,YAAU,GAAD,OAAIY,EAAOU,aAC3BM,WAAY5B,YAAU,GAAD,OAAIY,EAAOU,WAAX,WACrBO,aAAc7B,YAAU,GAAD,OAAIY,EAAOU,WAAX,aACvBQ,cAAe9B,YAAU,YAAD,OAAaY,EAAOU,cAGhDT,EAASkB,UAAY,CACjBJ,MAAO3B,YAAU,UAAD,OAAWY,EAAOU,aAClCM,WAAY5B,YAAU,UAAD,OAAWY,EAAOU,WAAlB,WACrBO,aAAc7B,YAAU,UAAD,OAAWY,EAAOU,WAAlB,aACvBQ,cAAe9B,YAAU,mBAAD,OAAoBY,EAAOU,cAGvDT,EAASmB,aAAehC,YAAUY,EAAOU,YACzC,MAEJ,KAAKJ,eAAae,IACdpB,EAASC,UAAY,CACjBmB,IAAKZ,YAAa,GAAD,OAAIT,EAAOK,WAAX,YAAyBL,EAAOU,cAGrDT,EAASE,eAAiB,CACtBkB,IAAKjC,YAAU,GAAD,OAAIY,EAAOK,WAAX,YAAyBL,EAAOU,cAGlDT,EAASa,WAAa,CAClBC,MAAO3B,YAAU,GAAD,OAAIY,EAAOU,cAG/BT,EAASkB,UAAY,CACjBJ,MAAO3B,YAAU,UAAD,OAAWY,EAAOU,cAGtCT,EAASmB,aAAehC,YAAUY,EAAOU,YACzC,MAEJ,KAAKJ,eAAagB,eACdrB,EAASC,UAAY,CACjBoB,eAAgBb,YAAa,GAAD,OAAIT,EAAOU,cAG3CT,EAASG,MAAQ,CACbS,SAAUzB,YAAU,GAAD,OAAIY,EAAOU,WAAX,WAGvBT,EAASE,eAAiB,CACtBmB,eAAgBlC,YAAU,GAAD,OAAIY,EAAOU,cAExC,MAEJ,KAAKJ,eAAaiB,kBACdtB,EAASC,UAAY,CACjBqB,kBAAmBd,YAAa,GAAD,OAAIT,EAAOU,cAG9CT,EAASE,eAAiB,CACtBoB,kBAAmBnC,YAAU,GAAD,OAAIY,EAAOU,cAKnD,OAAOT,KAEX,OAAOuB,OAAOC,OAAO3B,GA2DG4B,CAAc1C,GAChC2C,EAnDV,SAA4BC,EAAe3C,GAEvC,IAAM0C,EAAuBlE,IAAEsC,IAAId,GAAc,SAAC4C,GAU9C,OATY,2BACLA,GADK,IAERC,WAAW,IAAD,OAAMC,YAAUH,GAAhB,YAAmCG,YAAUF,EAAYG,iBAAzD,eAAgFH,EAAYI,eAAiB,GAA7G,KACVC,WAAW,IAAD,OAAMH,YAAUH,GAAhB,YAAmCG,YAAUF,EAAYG,iBAAzD,eAAgFH,EAAYM,eAAiB,GAA7G,KACVC,WAAW,IAAD,OAAML,YAAUH,GAAhB,YAAmCG,YAAUF,EAAYG,iBAAzD,eAAgFH,EAAYQ,eAAiB,GAA7G,KACVC,iBAAiB,yBAAD,OAA2BP,YAAUH,GAArC,YAAwDG,YAAUF,EAAYG,iBAA9E,QAChBO,cAAc,wBAAD,OAA0BR,YAAUH,GAApC,YAAuDG,YAAUF,EAAYG,iBAA7E,aAKrB,OAAOR,OAAOC,OAAOE,GAqCQa,CAAmB/C,EAA0BR,GACpEwD,EAnCV,SAA4BvD,EAAcyC,GAEtC,IAAMc,EAAuBhF,IAAEsC,IAAIb,GAAc,SAACwD,GAC9C,IAAMC,EAA6BlF,IAAEmF,IAAInF,IAAEgB,OAAOkD,GAAsB,SAAAhE,GAAG,OAAIA,EAAIkF,MAAQH,EAAYI,6BAA4B,OAQnI,OAPY,2BACLJ,GADK,IAERK,gBAAiB3D,YAAU,GAAD,OAAIsD,EAAYK,gBAAhB,SAC1BT,iBAAkB7E,IAAEmF,IAAID,EAA4B,oBACpDJ,cAAe9E,IAAEmF,IAAID,EAA4B,sBAKzD,OAAOnB,OAAOC,OAAOgB,GAsBQO,CAAmB9D,EAAcyC,GAExDC,EAAiB7C,GAA2BW,kBAAgBC,SAC5DN,EACCN,GAA2BW,kBAAgBE,UACxCL,EACAC,EAEJyD,EAAmBxF,IAAEmF,IAAInF,IAAEgB,OAAOqB,EAAiB,gBAAiB,OAQ1E,OANImD,GAAoBvD,kBAAgBE,YAAcb,GAClDmE,IAAaC,QAAQ,CACjBC,QAAS,+EAIV5B,OAAOC,OAAPD,OAAA,IAAAA,QAAA,IAAAA,CAAA,GACA3C,GADA,IAGHC,WAAYK,EACZyC,gBAEA5C,QAASc,EACTb,aAAc0C,EACdzC,aAAcuD,EACdQ,mBAEA5D,WACAE,gBACAC,gBCNO,kBAA4B,IAA1BV,EAAyB,EAAzBA,WAAYE,EAAa,EAAbA,QAsGzB,MAAO,CACHqE,eAlGJ,WAQI,OAPa9E,EAAM,CAAC,gGAAD,qCAEeO,EAFf,4CAIf,MA8FJwE,kBArFJ,WACI,IAAIC,EAAS,GAMb,OAJA9F,IAAEC,KAAKsB,GAAS,SAACgB,GACbuD,GA/MZ,YAAsD,IAA1BlD,EAAyB,EAAzBA,WAAYH,EAAa,EAAbA,UAChCqD,EAAS,GAEb,OAAQlD,GACJ,KAAKC,eAAaC,MACdgD,GAAM,uBAAmBrD,EAAUK,MAA7B,yBAAqDL,EAAUK,MAA/D,QACNgD,GAAM,uBAAmBrD,EAAUU,aAA7B,yBAA4DV,EAAUU,aAAtE,QACN2C,GAAM,uBAAmBrD,EAAUS,gBAA7B,yBAA+DT,EAAUS,gBAAzE,QACN4C,GAAM,uBAAmBrD,EAAUM,YAA7B,yBAA2DN,EAAUM,YAArE,UACN,MAEJ,KAAKF,eAAae,IACdkC,GAAM,uBAAmBrD,EAAUmB,IAA7B,yBAAmDnB,EAAUmB,IAA7D,QACN,MAEJ,KAAKf,eAAagB,eACdiC,GAAM,uBAAmBrD,EAAUoB,eAA7B,yBAA8DpB,EAAUoB,eAAxE,QACN,MAEJ,KAAKhB,eAAaiB,kBACdgC,GAAM,uBAAmBrD,EAAUqB,kBAA7B,yBAAiErB,EAAUqB,kBAA3E,QAId,OAAOgC,EAuLSC,CAAiBxD,MAGtBuD,GA+EPE,yBA5EJ,WACI,IAAIF,EAAShF,EAAM,CACf,8FACA,6BAQJ,OALAd,IAAEC,KAAKsB,GAAS,SAACgB,GACbuD,GAhMZ,YAAuF,IAA5CG,EAA2C,EAA3CA,gBAAiBrD,EAA0B,EAA1BA,WAAYS,EAAc,EAAdA,WAChE6C,EAAM,GAEV,OAAQtD,GACJ,KAAKC,eAAaC,MACdoD,EAAMpF,EAAM,CAAC,KAAD,OACHuC,EAAWC,MADR,aACkB2C,EADlB,iBAEH5C,EAAWG,aAFR,OAGR,WAHQ,iBAKHH,EAAWE,WALR,qBAMHF,EAAWI,cANR,gBAQZ,MAEJ,KAAKZ,eAAae,IACdsC,GAAG,YAAS7C,EAAWC,MAApB,aAA8B2C,EAA9B,OAIX,OAAOC,EA4KWC,CAAgC5D,MAE9CuD,GAAS,QAoETM,gBA/DJ,WACI,IAAIN,EAAShF,EAAM,CAAC,kEAAD,8DAiBnB,OAXAd,IAAEC,KAAKsB,GAAS,SAACgB,GACbuD,GApLZ,YAAwE,IAAtClD,EAAqC,EAArCA,WAAYH,EAAyB,EAAzBA,UAAWY,EAAc,EAAdA,WACjDyC,EAAS,GAEb,OAAQlD,GACJ,KAAKC,eAAaC,MACdgD,EAAShF,EAAM,CAAC,YAAD,OACC2B,EAAUU,aADX,KAEX,iBACA,qBAHW,sBAKX,WALW,mBAOCV,EAAUS,gBAPX,KAQX,iBACA,qBATW,UAUAG,EAAWG,aAVX,0BAWaH,EAAWG,aAXxB,wBAcH,KAdG,mBAgBCf,EAAUM,YAhBX,KAiBX,iBACA,qBAlBW,kBAmBAM,EAAWI,cAnBX,cAoBX,iBAEJ,MAEJ,KAAKZ,eAAae,IACdkC,EAAShF,EAAM,CAAC,YAAD,OACC2B,EAAUmB,IADX,KAEX,iBACA,qBAHW,kBAIAP,EAAWC,MAJX,aAKX,iBAEJ,MAEJ,KAAKT,eAAaiB,kBACdgC,EAAShF,EAAM,CAAC,YAAD,OACC2B,EAAUqB,kBADX,KAEX,iBACA,qBACA,iBAKZ,OAAOgC,EAmIWO,CAAuB9D,MAGrCuD,GAAUhF,EAAM,CAAC,eAAD,mCAqDhBwF,kBA3CJ,WACI,IAAIJ,EAAMpF,EAAM,CAAC,kGAsBjB,OAlBAd,IAAEC,KAAKsB,GAAS,YAA4C,IAAzCqB,EAAwC,EAAxCA,WAAYc,EAA4B,EAA5BA,UAAWL,EAAiB,EAAjBA,WACtC,OAAQT,GACJ,KAAKC,eAAaC,MACdoD,GAAOpF,EAAM,CAAC,gBAAD,OACO4C,EAAUJ,MADjB,2CACyDD,EAAWC,MADpE,4BAEOI,EAAUH,WAFjB,2CAE8DF,EAAWE,WAFzE,4BAGOG,EAAUF,aAHjB,2CAGgEH,EAAWG,aAH3E,4BAIOE,EAAUD,cAJjB,2CAIiEJ,EAAWI,cAJ5E,YAOb,MAEJ,KAAKZ,eAAae,IACdsC,GAAG,uBAAoBxC,EAAUJ,MAA9B,2CAAsED,EAAWC,MAAjF,WAKR4C,GAqBPK,uBAlBJ,WACI,IAAIT,EAAShF,EAAM,CAAC,6FAQpB,OAJAd,IAAEC,KAAKsB,GAAS,SAACgB,GACbuD,GA1KZ,YAAmG,IAAlElD,EAAiE,EAAjEA,WAAwBF,GAAyC,EAArDO,WAAqD,EAAzCP,gBAAgBD,EAAyB,EAAzBA,UAAWY,EAAc,EAAdA,WAC5E6C,EAAM,GAEV,OAAQtD,GACJ,KAAKC,eAAaC,MACdoD,GAAOpF,EAAM,CAAC,gBAAD,OACO4B,EAAeI,MADtB,mCAEIL,EAAUK,MAFd,KAGT,QAHS,uBAKOJ,EAAeS,aALtB,gBAK0CE,EAAWC,MALrD,aAK+DD,EAAWE,WAL1E,gCAMId,EAAUU,aANd,2BAOME,EAAWC,MAPjB,aAO2BD,EAAWE,WAPtC,KAQT,QARS,qZAeOb,EAAeQ,gBAftB,gFAkBYT,EAAUS,gBAlBtB,iDAqBWR,EAAeI,MArB1B,4CAyBOJ,EAAeK,YAzBtB,wCA0BIN,EAAUM,YA1Bd,KA2BT,mBACA,YAEJ,MAEJ,KAAKF,eAAae,IACdsC,GAAOpF,EAAM,CAAC,gBAAD,OACO4B,EAAekB,IADtB,wCAEInB,EAAUmB,IAFd,KAGT,mBACA,UAEJ,MAEJ,KAAKf,eAAagB,eACdqC,GAAOpF,EAAM,CAAC,gBAAD,OACO4B,EAAemB,eADtB,mCAEIpB,EAAUoB,eAFd,KAGT,UAEJ,MAEJ,KAAKhB,eAAaiB,kBACdoC,GAAOpF,EAAM,CAAC,gBAAD,OACO4B,EAAeoB,kBADtB,mCAEIrB,EAAUqB,kBAFd,KAGT,UAKZ,OAAOoC,EA2GWM,CAAsBjE,MAG7BuD,K,QCtRA,WAAC1E,GAmFZ,MAAO,CACHqF,iBAjFqB,WACrB,MCRO,YAA2D,IAAzD7E,EAAwD,EAAxDA,SAAU8E,EAA8C,EAA9CA,kBAAmBnF,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aA4InD,MAAO,CACHmF,gBA3IoB,WA4CpB,MA3CU,GAEJ7F,EAAM,CAAC,YAAF,0dAkBJd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAElB,EAAF,EAAEA,eAAF,gBAAyBA,EAAekB,IAAxC,SApBG,iBAuBJ5D,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEJ,EAAF,EAAEA,eAAF,gBAAyBA,EAAeI,MAAxC,SAzBG,iBA4BJ9C,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAagB,mBAC/D,gBAAEnB,EAAF,EAAEA,eAAF,gBAAyBA,EAAemB,eAAxC,SA9BG,iBAiCJ7D,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaiB,sBAC/D,gBAAEpB,EAAF,EAAEA,eAAF,gBAAyBA,EAAeoB,kBAAxC,SAnCG,0BAqCWlC,EArCX,0BAyIXgF,wBA7F4B,WAmB5B,OAlBU9F,EAAM,CAAC,uCAAF,mBAERd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEO,EAAF,EAAEA,WAAYK,EAAd,EAAcA,UAAd,OAA6B5C,EAAM,CAAC,GAAD,OAC5BuC,EAAWC,MADiB,aACPI,EAAUJ,MADH,sBAE5BD,EAAWI,cAFiB,aAECC,EAAUD,cAFX,qBAJ5B,iBAWRzD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAEP,EAAF,EAAEA,WAAYK,EAAd,EAAcA,UAAd,gBAAgCL,EAAWC,MAA3C,aAAqDI,EAAUJ,MAA/D,gBAbO,WA6FfuD,2BAxE+B,WAiB/B,OAhBU/F,EAAM,CAAC,iCAAF,mBAERd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,cAAEO,WAAF,IAAcX,EAAd,EAAcA,eAAd,OAAkC5B,EAAM,CAAC,GAAD,OACjC4B,EAAeI,MADkB,WAJjC,iBASR9C,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,cAAEP,WAAF,IAAcX,EAAd,EAAcA,eAAd,gBAAqCA,EAAekB,IAApD,SAXO,WAwEfkD,cArDkB,WAClB,IAAMC,EAAmB/G,IAAEmF,IAAInF,IAAEgB,OAAOQ,EAAc,eAAgB,OA6CtE,OA3CUV,EAAM,CAAC,OAAF,mBAGP4F,EACM1G,IAAEsC,IAAIoE,EAAkBM,MAAM,OAAO,SAACC,GAAD,mBAAeA,MACpD,IALC,oGAUarF,EAVb,0GAiBR5B,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEO,EAAF,EAAEA,WAAF,SAAcK,UAAe5C,EAAM,CAAC,GAAD,OAC5BuC,EAAWC,MADiB,eAE5BD,EAAWI,cAFiB,cAnB5B,iBA0BRzD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAEP,EAAF,EAAEA,WAAF,SAAcK,UAAd,UAAgCL,EAAWC,MAA3C,SA5BO,qEAmCAtD,IAAEmF,IAAI4B,EAAkB,oBAnCxB,6CDjFXG,CAAkB9F,GAJlBuF,EADJ,EACIA,gBACAC,EAFJ,EAEIA,wBACAC,EAHJ,EAGIA,2BACAC,EAJJ,EAIIA,cAGEZ,EAAMpF,EAAM,CACd6F,IACAC,IAFc,GAIdC,IAJc,GAMdC,MAGJ,OAAO3G,EAAS+F,IAkEhBiB,kBA9DsB,WACtB,ME7BO,YAA4F,IAA1FvF,EAAyF,EAAzFA,SAAUE,EAA+E,EAA/EA,cAAe4E,EAAgE,EAAhEA,kBAAmBnF,EAA6C,EAA7CA,QAASiE,EAAoC,EAApCA,iBAAkBhE,EAAkB,EAAlBA,aAuJpF,MAAO,CACHmF,gBAtJoB,WAiDpB,MAhDU,GAEJ7F,EAAM,CAAC,YAAF,8cAeKgB,EAfL,iEAmBJ9B,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAElB,EAAF,EAAEA,eAAF,gBAAyBA,EAAekB,IAAxC,SArBG,iBAwBJ5D,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEJ,EAAF,EAAEA,eAAgBgB,EAAlB,EAAkBA,UAAlB,OAAiC5C,EAAM,CAAC,GAAD,OAChC4B,EAAeI,MADiB,eAEhCY,EAAUJ,MAFsB,eAGhCI,EAAUD,cAHsB,WA1BpC,iBAiCJzD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAagB,mBAC/D,gBAAEnB,EAAF,EAAEA,eAAF,gBAAyBA,EAAemB,eAAxC,SAnCG,iBAsCJ7D,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaiB,sBAC/D,gBAAEpB,EAAF,EAAEA,eAAF,gBAAyBA,EAAeoB,kBAAxC,SAxCG,yBA0CUlC,EA1CV,0BAoJXgF,wBAnG4B,WAmB5B,OAlBU9F,EAAM,CAAC,uCAAF,mBAERd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEO,EAAF,EAAEA,WAAYK,EAAd,EAAcA,UAAd,OAA6B5C,EAAM,CAAC,GAAD,OAC5BuC,EAAWC,MADiB,aACPI,EAAUJ,MADH,sBAE5BD,EAAWI,cAFiB,aAECC,EAAUD,cAFX,qBAJ5B,iBAWRzD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAEP,EAAF,EAAEA,WAAYK,EAAd,EAAcA,UAAd,gBAAgCL,EAAWC,MAA3C,aAAqDI,EAAUJ,MAA/D,gBAbO,WAmGfuD,2BA9E+B,WAiB/B,OAhBU/F,EAAM,CAAC,iCAAF,mBAERd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAGJ,EAAH,EAAGA,eAAH,OAAuB5B,EAAM,CAAC,GAAD,OACtB4B,EAAeI,MADO,WAJtB,iBASR9C,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAGlB,EAAH,EAAGA,eAAH,gBAA0BA,EAAekB,IAAzC,SAXO,WA8EfkD,cA3DkB,WAClB,IAAMC,EAAmB/G,IAAEmF,IAAInF,IAAEgB,OAAOQ,EAAc,eAAgB,OAmDtE,OAjDUV,EAAM,CAAC,OAAF,mBAGP4F,EACM1G,IAAEsC,IAAIoE,EAAkBM,MAAM,OAAO,SAACC,GAAD,mBAAeA,MACpD,IALC,oGAUarF,EAVb,uFAcW5B,IAAEmF,IAAIK,EAAkB,wBAdnC,kDAmBIxF,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEO,EAAF,EAAEA,WAAF,SAAcK,UAAe5C,EAAM,CAAC,GAAD,OAC5BuC,EAAWC,MADiB,eAE5BD,EAAWI,cAFiB,cArBxC,iBA4BIzD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAEP,EAAF,EAAEA,WAAF,SAAcK,UAAd,UAAgCL,EAAWC,MAA3C,SA9BL,qEAqCoBtD,IAAEmF,IAAI4B,EAAkB,oBArC5C,6BAwCiBjF,EAxCjB,sDFjEXsF,CAAmBhG,GAJnBuF,EADJ,EACIA,gBACAC,EAFJ,EAEIA,wBACAC,EAHJ,EAGIA,2BACAC,EAJJ,EAIIA,cAGEZ,EAAMpF,EAAM,CACd6F,IACAC,IAFc,GAIdC,IAJc,GAMdC,MAGJ,OAAO3G,EAAS+F,IA8ChBmB,cA1CkB,WAClB,MGlDO,YAA8E,IAA5EzF,EAA2E,EAA3EA,SAAUE,EAAiE,EAAjEA,cAAe4E,EAAkD,EAAlDA,kBAAmBnF,EAA+B,EAA/BA,QAASiE,EAAsB,EAAtBA,iBA2KlE,MAAO,CACHmB,gBA1KoB,WAuDpB,MAtDU,GAEJ7F,EAAM,CAAC,YAAF,0iBAoBJd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAElB,EAAF,EAAEA,eAAF,gBAAyBA,EAAekB,IAAxC,SAtBG,iBAyBJ5D,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEJ,EAAF,EAAEA,eAAF,OAAsB5B,EAAM,CAAC,GAAD,OACrB4B,EAAeI,MADM,eAErBJ,EAAeQ,gBAFM,WA3BzB,CAgCPpC,EAAM,CAAC,GAAD,OACCd,IAAEmF,IAAIK,EAAkB,mBADzB,eAECxF,IAAEmF,IAAIK,EAAkB,wBAFzB,eAGCxF,IAAEmF,IAAIK,EAAkB,0BAHzB,eAICxF,IAAEmF,IAAIK,EAAkB,2BAJzB,OAhCC,gBAuCJxF,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAagB,mBAC/D,gBAAEnB,EAAF,EAAEA,eAAF,gBAAyBA,EAAemB,eAAxC,SAzCG,iBA4CJ7D,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaiB,sBAC/D,gBAAEpB,EAAF,EAAEA,eAAF,gBAAyBA,EAAeoB,kBAAxC,SA9CG,yBAgDUlC,EAhDV,0BAwKXgF,wBAjH4B,WAqB5B,OApBU9F,EAAM,CAAC,uCAAF,mBAERd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAEO,EAAF,EAAEA,WAAYK,EAAd,EAAcA,UAAd,OAA6B5C,EAAM,CAAC,GAAD,OAC5BuC,EAAWC,MADiB,aACPI,EAAUJ,MADH,sBAE5BD,EAAWE,WAFiB,aAEFG,EAAUH,WAFR,sBAG5BF,EAAWG,aAHiB,aAGAE,EAAUF,aAHV,sBAI5BH,EAAWI,cAJiB,aAICC,EAAUD,cAJX,qBAJ5B,iBAaRzD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAEP,EAAF,EAAEA,WAAYK,EAAd,EAAcA,UAAd,gBAAgCL,EAAWC,MAA3C,aAAqDI,EAAUJ,MAA/D,gBAfO,WAiHfuD,2BA1F+B,WAkB/B,OAjBU/F,EAAM,CAAC,iCAAF,mBAERd,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAGJ,EAAH,EAAGA,eAAH,OAAuB5B,EAAM,CAAC,GAAD,OACtB4B,EAAeI,MADO,eAEtBJ,EAAeQ,gBAFO,WAJtB,iBAURlD,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAGlB,EAAH,EAAGA,eAAH,gBAA0BA,EAAekB,IAAzC,SAZO,WA0FfkD,cAtEkB,WA+DlB,OA9DUhG,EAAM,CAAC,OAAF,mBAGP4F,EACM1G,IAAEsC,IAAIoE,EAAkBM,MAAM,OAAO,SAACC,GAAD,mBAAeA,MACpD,IALC,oGAUanF,EAVb,0GAiBJ9B,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAaC,UAC/D,gBAAGO,EAAH,EAAGA,WAAH,OAAoBvC,EAAM,CAAC,GAAD,OACnBuC,EAAWC,MADQ,eAEnBD,EAAWI,cAFQ,WAnBvB,cAyBJzD,IAAEmF,IAAIK,EAAkB,yBAzBpB,eA0BJxF,IAAEmF,IAAIK,EAAkB,2BA1BpB,eA2BJxF,IAAEmF,IAAIK,EAAkB,kCA3BpB,qBA6BJxF,IAAEsC,IACDtC,IAAEgB,OAAOO,GAAS,qBAAEqB,YAA8BC,eAAae,QAC/D,gBAAGP,EAAH,EAAGA,WAAH,gBAAuBA,EAAWC,MAAlC,SA/BG,yGAsCiBtD,IAAEmF,IAAIK,EAAkB,yBAtCzC,8CAuCSxF,IAAEmF,IAAIK,EAAkB,2BAvCjC,0CAyCIxF,IAAEmF,IAAIK,EAAkB,kCAzC5B,wIAiDyBxF,IAAEmF,IAAIK,EAAkB,oBAjDjD,gFAoDsBxF,IAAEmF,IAAIK,EAAkB,4BApD9C,sEHnDX8B,CAAelG,GAJfuF,EADJ,EACIA,gBACAC,EAFJ,EAEIA,wBACAC,EAHJ,EAGIA,2BACAC,EAJJ,EAIIA,cAGEZ,EAAMpF,EAAM,CACd6F,IACAC,IAFc,GAIdC,IAJc,GAMdC,MAGJ,OAAO3G,EAAS+F,IA0BhBqB,oBAtBwB,WACxB,IAAQC,EIrED,SAACpG,GACZ,IAAQK,EAAiBL,EAAjBK,aA+CR,MAAO,CACH+F,wBA9C4B,WAE5B,OAAO1G,EAAM,CAAC,YAAD,mWAeTd,IAAEsC,IAAIb,GAAc,gBAAE6D,EAAF,EAAEA,gBAAiBmC,EAAnB,EAAmBA,iBAAnB,gBAA4CnC,EAA5C,cAAiEmC,EAAjE,QAAsFtG,KAAK,OAftG,2CAmBTnB,IAAEsC,IAAIb,GAAc,YAAoF,IAAjF6D,EAAgF,EAAhFA,gBAAiBoC,EAA+D,EAA/DA,qBAAsBC,EAAyC,EAAzCA,iBAAkB9C,EAAuB,EAAvBA,iBAC5E,OAAO/D,EAAM,CAAC,aAAD,OACAwE,EADA,sCAEUT,EAFV,4CAGkBS,EAHlB,mCAIUqC,EAJV,oCAKUD,EALV,oCAMUpC,EANV,oBASdnE,KAAK,MA7BC,kBAgCTnB,IAAEsC,IAAIb,GAAc,YAAwB,IAAtB6D,EAAqB,EAArBA,gBAClB,OAAOxE,EAAM,CAAC,WAAD,OACEwE,QAEhBnE,KAAK,OApCC,oBJgEuByG,CAAqBxG,GAAjDoG,wBACR,OAAOrH,EAASqH,MAqBhBK,oBAjBwB,WAExB,OAAOC,EKzCJ,CACHA,uBAhC2B,WAC3B,MAAM,qlBLsEEA,2BAiBRC,wBAZ4B,WAC5B,IAAQC,EMrFD,YAAsB,IAApBlG,EAAmB,EAAnBA,cAMb,MAAO,CACHkG,uBAL2B,WAC3B,MAAM,uBAAN,OAA+BlG,EAA/B,sBAA0DA,EAA1D,QNkFmCmG,CAAqB7G,GAAhD4G,uBACR,OAAO7H,EAAS6H,QOzDT,WAAC5G,GACZ,IAAM8G,EAA2BC,EAAS/G,GAClCE,EAA4B4G,EAA5B5G,wBA4FR,MAAO,CACH8G,iBA3FJ,WACI,MAOIC,EAAcH,GANdtC,EADJ,EACIA,eACAC,EAFJ,EAEIA,kBACAG,EAHJ,EAGIA,yBACAI,EAJJ,EAIIA,gBACAE,EALJ,EAKIA,kBACAC,EANJ,EAMIA,uBAIA+B,EACE1C,IAAmB,OACnBC,IAAsB,KACtBG,IAA6B,KAC7BI,IAAoB,OACpBE,IAAsB,OACtBC,IAA2B,KAEjC,OAAOpG,EAASmI,IAyEhBC,iBAtEJ,WACI,MChDO,YAA2B,EAAzBlH,WAA0B,IAAdE,EAAa,EAAbA,QAEnBiH,EAAexI,IAAEgB,OAAOO,GAAS,SAACrB,GAAD,OAASA,EAAI0C,YAAcC,eAAaC,SACzE2F,EAAkBzI,IAAEgB,OAAOO,GAAS,SAACrB,GAAD,OAASA,EAAI0C,YAAcC,eAAagB,kBAC5E6E,EAAa1I,IAAEgB,OAAOO,GAAS,SAACrB,GAAD,OAASA,EAAI0C,YAAcC,eAAae,OAyG7E,MAAO,CACH+C,gBAxGJ,WAiCI,OAhCa7F,EAAM,CAAC,YAAF,0ZAgBXd,IAAEsC,IAAIkG,GAAc,gBAAE/F,EAAF,EAAEA,UAAF,gBAAoBA,EAAUK,MAA9B,SAhBT,iBAkBX9C,IAAEsC,IAAIkG,GAAc,gBAAE/F,EAAF,EAAEA,UAAF,gBAAoBA,EAAUU,aAA9B,SAlBT,iBAoBXnD,IAAEsC,IAAImG,GAAiB,gBAAEhG,EAAF,EAAEA,UAAF,gBAAoBA,EAAUoB,eAA9B,SApBZ,iBAsBX7D,IAAEsC,IAAIoG,GAAY,gBAAEjG,EAAF,EAAEA,UAAF,kBAAsBA,EAAUmB,IAAhC,SAtBP,oBAyBX5D,IAAEsC,IAAIkG,GAAc,gBAAE9E,EAAF,EAAEA,UAAF,gBAAoBA,EAAUF,aAA9B,SAzBT,iBA2BXxD,IAAEsC,IAAIkG,GAAc,gBAAE9F,EAAF,EAAEA,eAAF,gBAAyBA,EAAeK,YAAxC,SA3BT,YA4BX/C,IAAEsC,IAAIkG,GAAc,gBAAE9F,EAAF,EAAEA,eAAF,gBAAyBA,EAAeS,aAAxC,SA5BT,6BAwGlBwF,cArEJ,WA2CI,OA1Ca3I,IAAEsC,IAAIf,GAAS,YAA0G,IAAxGqB,EAAuG,EAAvGA,WAAYe,EAA2F,EAA3FA,aAAcD,EAA6E,EAA7EA,UAAWjB,EAAkE,EAAlEA,UAAWC,EAAuD,EAAvDA,eAAgBkG,EAAuC,EAAvCA,eAAgBjG,EAAuB,EAAvBA,MAAOU,EAAgB,EAAhBA,WAEjH,OAAQT,GACJ,KAAKC,eAAaC,MACd,OAAOhC,EAAM,CAAC,oBAAD,OACW6B,EAAMS,SADjB,kEAIWX,EAAUK,MAJrB,6BAMQJ,EAAeK,YANvB,mDAO2BW,EAAUF,aAPrC,uEAS+CoF,GAAgC,GAT/E,qCAUCjF,EAVD,aAUkBN,EAAWE,WAV7B,8CAYUb,EAAeS,aAZzB,aAY0CQ,EAZ1C,aAY2DN,EAAWE,WAZtE,iHAgBUb,EAAeK,YAhBzB,sCAsBjB,KAAKF,eAAagB,eACd,OAAO/C,EAAM,CAAC,oBAAD,OACW6B,EAAMS,SADjB,kEAIWX,EAAUoB,eAJrB,6FAatB1C,KAAK,KA6BR0H,mBAxBJ,WAkBI,OAjBa/H,EAAM,CAAC,4BAAF,oCAIXd,IAAEsC,IAAIf,GAAS,YAA0B,IAAxBqB,EAAuB,EAAvBA,WAAYD,EAAW,EAAXA,MAC5B,OAAQC,GACJ,KAAKC,eAAaC,MAClB,KAAKD,eAAagB,eACd,MAAM,YAAN,OAAmBlB,EAAMS,SAAzB,WARE,kBDrCd0F,CAAcZ,GAHdvB,EADJ,EACIA,gBACAgC,EAFJ,EAEIA,cACAE,EAHJ,EAGIA,mBAIAP,EACE3B,IAAoB,OACpBgC,IAAkB,KAClBE,IAAuB,KAE7B,OAAO1I,EAASmI,IA0DhBS,mBAvDJ,WAOI,OAFWC,EEhER,CACHA,kBALsB,WACtB,MAAM,KFgEFA,sBAsDJC,cA1CJ,WACI,MAQIC,EAAchB,GAPdzB,EADJ,EACIA,iBAEAU,EAHJ,EAGIA,kBACAE,EAJJ,EAIIA,cACAE,EALJ,EAKIA,oBACAM,EANJ,EAMIA,oBACAE,EAPJ,EAOIA,wBAGAoB,EAAiB,GAGrB,OAAQ7H,GACJ,KAAKW,kBAAgBC,SACjBiH,EAAejH,SAAWuE,IAE9B,KAAKxE,kBAAgBE,UACjBgH,EAAehH,UAAYgF,IAC3BgC,EAAeC,MAAQ/B,IACvB8B,EAAelE,YAAcsC,IAC7B4B,EAAeE,YAAcxB,IAC7BsB,EAAeG,gBAAkBvB,IAGzC,OAAOoB,GAiBPI,qBAdJ,WAKI,OAAOA,EGhHA,SAACnI,GACZ,IAAQI,EAAiBJ,EAAjBI,aAoBR,MAAO,CACH+H,qBAnByB,WACzB,OAAOzI,EAAM,CAAC,IAAD,YAGTd,IAAEsC,IAAId,GAAc,gBAAG6C,EAAH,EAAGA,WAAH,oBAA2BA,MAAclD,KAAK,OAHzD,mBAOTnB,IAAEsC,IAAId,GAAc,gBAAGmD,EAAH,EAAGA,WAAH,oBAA2BA,MAAcxD,KAAK,OAPzD,mBAWTnB,IAAEsC,IAAId,GAAc,gBAAGiD,EAAH,EAAGA,WAAH,oBAA2BA,MAActD,KAAK,OAXzD,cH0GTqI,CAAkBtB,GADlBqB,2B,2HIvGNE,GAASC,IAAOD,OAShBE,GAAyB,SAAC,EAAoCC,GAAa,IAAhDxE,EAA+C,EAA/CA,IAAKxC,EAA0C,EAA1CA,WAAYgG,EAA8B,EAA9BA,eACtCiB,EAAsBD,EAAtBC,kBAER,OAAQjH,GACJ,KAAKC,eAAaC,MACd,OACI,8BACI,cAAC,IAAD,CACIQ,MAAOsF,EACPkB,UAAU,QACVC,YAAY,eACZC,SAAU,SAAC1L,GAAD,OAAOuL,EAAkBzE,EAAK,CAACwD,eAAgBtK,EAAE2L,OAAO3G,aAIlF,KAAKT,eAAae,IACd,OACI,wBAIR,QACI,SAUNsG,GAA2B,SAAC,EAAkDN,GAAa,IAA9DxE,EAA6D,EAA7DA,IAAKxC,EAAwD,EAAxDA,WAAYqD,EAA4C,EAA5CA,gBAAiBkE,EAA2B,EAA3BA,aACzDN,EAAsBD,EAAtBC,kBAEFO,EACF,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKC,KAAM,GAAX,6BACA,cAAC,IAAD,CAAKA,KAAM,GAAX,SACI,cAAC,IAAD,CACI/G,MAAO2C,EACP6D,UAAU,SACVC,YAAY,oBACZC,SAAU,SAACM,GAAD,OAAeT,EAAkBzE,EAAK,CAACa,gBAAiBqE,KAJtE,SAMKtK,IAAEsC,IAAIiI,mBAAiB,SAACjH,EAAO8B,GAC5B,OACI,cAACqE,GAAD,CAAQnG,MAAOA,EAAf,SAAuBkH,YAAapF,iBAShE,OAAQxC,GACJ,KAAKC,eAAaC,MACd,OACI,gCACKsH,EACD,eAAC,IAAD,WACI,cAAC,IAAD,CAAKC,KAAM,GAAX,gCACA,cAAC,IAAD,CAAKA,KAAM,GAAX,SACI,cAAC,IAAD,CAAUI,QAASN,EAAcH,SAAU,SAAC1L,GAAD,OAAOuL,EAAkBzE,EAAK,CAAC+E,aAAc7L,EAAE2L,OAAOQ,qBAKrH,KAAK5H,eAAae,IACd,OACI,8BACKwG,IAGb,QACI,SCrFNM,GAAOC,IAAKD,KACZjB,GAASC,IAAOD,OAOhBmB,GAAqB,CACvBlC,gBASEmC,G,4MAKFC,cAAgB,YAAkB,IAAfvJ,EAAc,EAAdA,QACf,EAAuC,EAAKwJ,MAA5C,EAAQC,gBAERtC,EAFA,EAAwBA,YAEZnH,I,EAQhB0J,gBAAkB,WACd,IAAQ1J,EAAY,EAAKwJ,MAAjBxJ,QAER,EAAKuJ,cAAc,CACfvJ,QAAQ,GAAD,mBACAA,GADA,CAEH,CACI0B,WAAY,OACZL,WAAYC,eAAaC,MACzB8F,oBAAgBsC,EAChBjF,gBAAiBsE,kBAAgBY,eACjChB,cAAc,EACd/E,IAAKgG,oB,EAMrBC,aAAe,SAACjG,GACZ,IAAQ7D,EAAY,EAAKwJ,MAAjBxJ,QAER,EAAKuJ,cAAc,CACfvJ,QAAQ,YACDvB,IAAEgB,OAAOO,GAAS,SAAC+J,GAAD,OAAUA,EAAKlG,KAAOA,S,EAYvDyE,kBAAoB,SAACzE,EAAKwE,GACtB,IAAQrI,EAAY,EAAKwJ,MAAjBxJ,QACA4I,EAAiBP,EAAjBO,aAEFoB,EAAiBvL,IAAEsC,IAAIf,GAAS,SAAC+J,GACnC,OAAGA,EAAKlG,KAAOA,EACJ,uCACAkG,GACA1B,GAFP,IAGIO,aAAeA,GAA6BmB,EAAKnB,eAGrD,2BACOmB,GADP,IAEInB,cAAeA,GAAsBmB,EAAKnB,kBAItD,EAAKW,cAAc,CACfvJ,QAASgK,K,4CAIjB,WAAU,IAAD,OACGhK,EAAYiK,KAAKT,MAAjBxJ,QAER,OACI,8BACI,cAAC,IAAD,CACIkK,KAAM,QACNC,UAAQ,EACRC,WAAYpK,EACZqK,OAAQ,CAACC,UAAY,8CACrBC,OACI,8BACI,cAAC,IAAD,CAAQC,QAAS,kBAAM,EAAKd,mBAAmB5L,KAAK,UAApD,gCAGR2M,WAAY,SAAAV,GAAI,OACZ,cAACZ,GAAD,CACInJ,QAAS,CAED,cAAC,IAAD,CACI/B,QACI,qBAAKsK,UAAW,iBAAhB,SACKI,GAAyBoB,EAAM,CAACzB,kBAAmB,EAAKA,sBAGjEoC,MAAM,sBACNC,QAAQ,QAPZ,SASI,cAAC,IAAD,CAAQH,QAAS,kBAAMlL,QAAQsL,IAAI,OAAO9M,KAAK,UAA/C,SAAyD,cAAC+M,EAAA,EAAD,QAI7D,cAAC,IAAD,CAAQL,QAAS,kBAAM,EAAKV,aAAaC,EAAKlG,MAA9C,SAAoD,cAACiH,EAAA,EAAD,OAhBhE,SAqBI,sBAAKvC,UAAW,OAAhB,UACI,cAAC,IAAD,CACIxG,MAAOtD,IAAEmF,IAAImG,EAAM,cACnBxB,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKuL,kBAAkByB,EAAKlG,IAAK,CAACnC,WAAY3E,EAAE2L,OAAO3G,WAG5E,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,cACnBxB,UAAU,SACVE,SAAU,SAAC5E,GAAD,OAAS,EAAKyE,kBAAkByB,EAAKlG,IAAK,CAACxC,WAAYwC,KAHrE,SAKKpF,IAAEsC,IAAIO,gBAAc,SAACS,EAAO8B,GAAR,OAAiB,cAAC,GAAD,CAAQ9B,MAAOA,EAAf,SAAuBN,YAAaoC,UAG9E,8BACKuE,GAAuB2B,EAAM,CAACzB,kBAAmB,EAAKA,0BAlB1DyB,EAAKlG,c,GA7GXkH,IAAMvN,WA0IlBwN,gBAxJS,SAAAC,GAAK,MAAK,CAC9BjL,QAASkL,YAAcD,MAuJa5B,GAAzB2B,CAA6C1B,ICrJtDX,I,OARSR,IAAOD,OAQW,SAAC,EAAoBG,GAAa,IAAhCxE,EAA+B,EAA/BA,IAAKsH,EAA0B,EAA1BA,YAC5BC,EAAsB/C,EAAtB+C,kBAER,OACI,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAKtC,KAAM,GAAX,+BACA,cAAC,IAAD,CAAKA,KAAM,GAAX,SACI,cAAC,IAAD,CAAUI,QAASiC,EAAa1C,SAAU,SAAC1L,GAAD,OAAOqO,EAAkBvH,EAAK,CAACsH,YAAapO,EAAE2L,OAAOQ,sBCf7GC,GAAOC,IAAKD,KAOZE,GAAqB,CACvBgC,qBAQE/B,G,4MAKFgC,mBAAqB,YAAuB,IAApBrL,EAAmB,EAAnBA,cAGpBoL,EAF4B,EAAK7B,MAAzB6B,iBAESpL,I,EAMrBsL,kBAAoB,WAChB,IAAQtL,EAAiB,EAAKuJ,MAAtBvJ,aAER,EAAKqL,mBAAmB,CACpBrL,aAAa,GAAD,mBACLA,GADK,CAER,CACI+C,gBAAiB,OACjBC,mBAAe0G,EACfxG,mBAAewG,EACftG,mBAAesG,EACfwB,aAAa,EACbtH,IAAKgG,oB,EAMrB2B,kBAAoB,SAAC3H,GACjB,IAAQ5D,EAAiB,EAAKuJ,MAAtBvJ,aAER,EAAKqL,mBAAmB,CACpBrL,aAAa,YACNxB,IAAEgB,OAAOQ,GAAc,SAAC8J,GAAD,OAAUA,EAAKlG,KAAOA,S,EAU5DuH,kBAAoB,SAACvH,EAAKwE,GACtB,IAAQpI,EAAiB,EAAKuJ,MAAtBvJ,aAGFwL,GAFkBpD,EAAhB8C,YAEoB1M,IAAEsC,IAAId,GAAc,SAAC8J,GAC7C,OAAGA,EAAKlG,KAAOA,EACJ,2BACAkG,GACA1B,GAGP,2BACO0B,GADP,IAEIoB,cAAc,gBAAiB9C,IAEzB0B,EAAKoB,kBAIvB,EAAKG,mBAAmB,CACpBrL,aAAcwL,K,4CAKtB,WAAU,IAAD,OACGxL,EAAiBgK,KAAKT,MAAtBvJ,aAER,OACI,8BACI,cAAC,IAAD,CACIiK,KAAM,QACNC,UAAQ,EACRC,WAAYnK,EACZoK,OAAQ,CAACC,UAAY,mDACrBC,OACI,cAAC,IAAD,CAAQC,QAAS,kBAAM,EAAKe,qBAAqBzN,KAAK,UAAtD,8BAEJ2M,WAAY,SAAAV,GAAI,OACZ,cAAC,GAAD,CACI/J,QAAS,CAED,cAAC,IAAD,CACI/B,QACI,qBAAKsK,UAAW,iBAAhB,SACKI,GAAyBoB,EAAM,CAACqB,kBAAmB,EAAKA,sBAGjEV,MAAM,sBACNC,QAAQ,QAPZ,SASI,cAAC,IAAD,CAAQH,QAAS,kBAAMlL,QAAQsL,IAAI,OAAO9M,KAAK,UAA/C,SAAyD,cAAC+M,EAAA,EAAD,QAI7D,cAAC,IAAD,CAAQL,QAAS,kBAAM,EAAKgB,kBAAkBzB,EAAKlG,MAAnD,SAAyD,cAACiH,EAAA,EAAD,OAhBrE,SAqBI,sBAAKvC,UAAW,OAAhB,UACI,cAAC,IAAD,CACIxG,MAAOtD,IAAEmF,IAAImG,EAAM,mBACnBvB,YAAY,OACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqO,kBAAkBrB,EAAKlG,IAAK,CAACb,gBAAiBjG,EAAE2L,OAAO3G,WAEjF,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,iBACnBvB,YAAY,UACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqO,kBAAkBrB,EAAKlG,IAAK,CAACZ,cAAelG,EAAE2L,OAAO3G,WAE/E,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,iBACnBvB,YAAY,+DACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqO,kBAAkBrB,EAAKlG,IAAK,CAACV,cAAepG,EAAE2L,OAAO3G,WAE/E,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,iBACnBvB,YAAY,6CACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqO,kBAAkBrB,EAAKlG,IAAK,CAACR,cAAetG,EAAE2L,OAAO3G,eAzB9EgI,EAAKlG,c,GAzGXkH,IAAMvN,WA6IlBwN,gBA1JS,SAAAC,GAAK,MAAK,CAC9BhL,aAAcyL,YAAmBT,MAyJG5B,GAAzB2B,CAA6C1B,IC/KtDqC,I,OAAQnJ,OAAOC,OAAO,CACxBmJ,KAAM,OACNC,MAAO,QACPC,OAAQ,YCcN3C,GAAOC,IAAKD,KACZjB,GAASC,IAAOD,OAQhBmB,GAAqB,CACvB0C,qBAOEC,G,4MAGFC,mBAAqB,YAAuB,IAApB/L,EAAmB,EAAnBA,cAGpB6L,EAF4B,EAAKvC,MAAzBuC,iBAES7L,I,EAGrBgM,kBAAoB,WAChB,IAAQhM,EAAiB,EAAKsJ,MAAtBtJ,aAER,EAAK+L,mBAAmB,CACpB/L,aAAa,GAAD,mBACLA,GADK,CAER,CACI4D,+BAA2B6F,EAC3B5F,gBAAiB,OACjBmC,sBAAkByD,EAClBxD,0BAAsBwD,EACtBvD,iBAAkBuF,GAAME,MACxBhI,IAAKgG,oB,EAMrBsC,kBAAoB,SAACtI,GACjB,IAAQ3D,EAAiB,EAAKsJ,MAAtBtJ,aAER,EAAK+L,mBAAmB,CACpB/L,aAAa,YACNzB,IAAEgB,OAAOS,GAAc,SAAC6J,GAAD,OAAUA,EAAKlG,KAAOA,S,EAK5DuI,kBAAoB,SAACvI,EAAKwE,GACtB,IAAQnI,EAAiB,EAAKsJ,MAAtBtJ,aAEFmM,EAAsB5N,IAAEsC,IAAIb,GAAc,SAAC6J,GAC7C,OAAGA,EAAKlG,KAAOA,EACJ,2BACAkG,GADP,IAEIjG,0BAA4B,8BAA+BuE,EACrDA,EAAQvE,0BACRiG,EAAKjG,0BAEXC,gBAAkB,oBAAqBsE,EACjCA,EAAQtE,gBACRgG,EAAKhG,gBAEXmC,iBAAmB,qBAAsBmC,EACnCA,EAAQnC,iBACR6D,EAAK7D,iBAEXC,qBAAuB,yBAA0BkC,EAC3CA,EAAQlC,qBACR4D,EAAK5D,qBAEXC,iBAAmB,qBAAsBiC,EACnCA,EAAQjC,iBACR2D,EAAK3D,mBAGR2D,KAGf,EAAKkC,mBAAmB,CACpB/L,aAAcmM,K,4CAKtB,WAAU,IAAD,OACL,EAAuCpC,KAAKT,MAApCtJ,EAAR,EAAQA,aAAcD,EAAtB,EAAsBA,aAEtB,OACI,8BACI,cAAC,IAAD,CACIiK,KAAM,QACNC,UAAQ,EACRC,WAAYlK,EACZmK,OAAQ,CAACC,UAAY,oDACrBC,OACI,cAAC,IAAD,CAAQC,QAAS,kBAAM,EAAK0B,qBAAqBpO,KAAK,UAAtD,8BAEJ2M,WAAY,SAAAV,GAAI,OACZ,cAAC,GAAD,CACI/J,QAAS,CACL,cAAC,IAAD,CAAQwK,QAAS,kBAAM,EAAK2B,kBAAkBpC,EAAKlG,MAAnD,SAAyD,cAACiH,EAAA,EAAD,OAFjE,SAMI,sBAAKvC,UAAW,OAAhB,UACI,cAAC,IAAD,CACIxG,MAAOtD,IAAEmF,IAAImG,EAAM,6BACnBxB,UAAU,SACVE,SAAU,SAAC5E,GAAD,OAAS,EAAKuI,kBAAkBrC,EAAKlG,IAAK,CAACC,0BAA2BD,KAHpF,SAKKpF,IAAEsC,IAAId,GAAc,SAAC4C,GAAD,OAAkB,cAAC,GAAD,CAAQd,MAAOc,EAAYgB,IAA3B,SAAiCpF,IAAEmF,IAAIf,EAAa,0BAG/F,cAAC,IAAD,CACId,MAAOtD,IAAEmF,IAAImG,EAAM,mBACnBvB,YAAY,OACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqP,kBAAkBrC,EAAKlG,IAAK,CAACE,gBAAiBhH,EAAE2L,OAAO3G,WAGjF,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,oBACnBvB,YAAY,QACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqP,kBAAkBrC,EAAKlG,IAAK,CAACqC,iBAAkBnJ,EAAE2L,OAAO3G,WAGlF,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,wBACnBvB,YAAY,aACZD,UAAU,QACVE,SAAU,SAAC1L,GAAD,OAAO,EAAKqP,kBAAkBrC,EAAKlG,IAAK,CAACsC,qBAAsBpJ,EAAE2L,OAAO3G,WAGtF,cAAC,IAAD,CACIA,MAAOtD,IAAEmF,IAAImG,EAAM,oBACnBxB,UAAU,SACVE,SAAU,SAAC6D,GAAD,OAAW,EAAKF,kBAAkBrC,EAAKlG,IAAK,CAACuC,iBAAkBkG,KAH7E,SAKK7N,IAAEsC,IAAI4K,IAAO,SAACW,GAAD,OAAY,cAAC,GAAD,CAAQvK,MAAOuK,EAAf,SAAuBA,aArCpDvC,EAAKlG,c,GA5FCkH,IAAMvN,WA4I9BwN,gBAzJS,SAAAC,GAAK,MAAK,CAC9B/K,aAAcqM,YAAmBtB,GACjChL,aAAcyL,YAAmBT,MAuJG5B,GAAzB2B,CAA6CgB,IC9ItDQ,GAAQC,IAASD,MACjBE,GAAUC,IAAKD,QACfE,GAAaC,IAAMC,MACnBC,GAAWC,IAAMD,SAYjB1D,GAAqB,CACvB4D,kBACAC,yBACAC,gCAGEC,G,kDACF,WAAY5D,GAAQ,IAAD,8BACf,cAAMA,IAGV6D,gBAAkB,WACd,MAAwG,EAAK7D,MAArG1J,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,wBAAyBoF,EAA7C,EAA6CA,kBAAmBnF,EAAhE,EAAgEA,QAASC,EAAzE,EAAyEA,aAAcC,EAAvF,EAAuFA,aAEvF,GAAIJ,IAAcrB,IAAE6O,QAAQtN,GAA5B,CAKA,IAAMH,EAAmB,CAAEC,aAAYC,0BAAyBoF,oBAAmBnF,UAASC,eAAcC,gBAE1G,EAAwGqN,EAAW1N,GAA3GgH,EAAR,EAAQA,iBAAkBG,EAA1B,EAA0BA,iBAAkBU,EAA5C,EAA4CA,cAAeM,EAA3D,EAA2DA,qBAAsBR,EAAjF,EAAiFA,mBAE7EgG,OAAgB7D,EACd8D,EAAQ/F,IACRgG,EAAiB9G,EAAS/G,GAE5B+C,EAAgB,GACpB,OAAQ7C,GACJ,KAAKW,kBAAgBC,SACjBiC,EAAgB8K,EAAerN,SAC/BmN,EAAgB,CACZ,CACI1P,KAAMM,iBAAeE,UACrBP,KAAK,GAAD,OAAK6E,GACT3E,QAAS,CACL,CACIH,KAAMM,iBAAeE,UACrBP,KAAM,QACNE,QAAS,CACL,CACIH,KAAMM,iBAAeC,KACrBN,KAAM,OACNC,UAAW,MACXC,QAAS4I,KAEb,CACI/I,KAAMM,iBAAeC,KACrBN,KAAM,OACNC,UAAW,MACXC,QAAS+I,OAIrB,CACIlJ,KAAMM,iBAAeC,KACrBN,KAAM,QACNC,UAAW,MACXC,QAASwP,EAAM9M,UAEnB,CACI7C,KAAMM,iBAAeC,KACrBN,KAAM,SACNC,UAAW,SACXC,QAASuJ,KAEb,CACI1J,KAAMM,iBAAeC,KACrBN,KAAM,WACNC,UAAW,QACXC,QAAS+J,QAKzB,MACJ,KAAKtH,kBAAgBE,UACjBgC,EAAgB8K,EAAerN,SAC/BmN,EAAgB,CACZ,CACI1P,KAAMM,iBAAeE,UACrBP,KAAK,GAAD,OAAK6E,GACT3E,QAAS,CACL,CACIH,KAAMM,iBAAeE,UACrBP,KAAM,aACNE,QAAS,CACL,CACIH,KAAMM,iBAAeE,UACrBP,KAAM,SACNE,QAAS,CACL,CACIH,KAAMM,iBAAeE,UACrBP,KAAM2P,EAAenN,cACrBtC,QAAS,CACL,CACIH,KAAMM,iBAAeC,KACrBN,KAAM,QACNC,UAAW,MACXC,QAASwP,EAAM5F,OAEnB,CACI/J,KAAMM,iBAAeC,KACrBN,KAAM,SACNC,UAAW,SACXC,QAASwP,EAAM3F,aAEnB,CACIhK,KAAMM,iBAAeC,KACrBN,KAAM,SACNC,UAAW,MACXC,QAASwP,EAAM/J,eAI3B,CACI5F,KAAMM,iBAAeC,KACrBN,KAAM,QACNC,UAAW,MACXC,QAASwP,EAAM1F,qBAMnC,CACIjK,KAAMM,iBAAeE,UACrBP,KAAM,QACNE,QAAS,CACL,CACIH,KAAMM,iBAAeC,KACrBN,KAAM,OACNC,UAAW,MACXC,QAAS4I,KAEb,CACI/I,KAAMM,iBAAeC,KACrBN,KAAM,OACNC,UAAW,MACXC,QAAS+I,OAIrB,CACIlJ,KAAMM,iBAAeC,KACrBN,KAAM,QACNC,UAAW,MACXC,QAASwP,EAAM7M,WAEnB,CACI9C,KAAMM,iBAAeC,KACrBN,KAAM,SACNC,UAAW,SACXC,QAASuJ,KAEb,CACI1J,KAAMM,iBAAeC,KACrBN,KAAM,WACNC,UAAW,QACXC,QAAS+J,QAKzB,MACJ,KAAKtH,kBAAgBiN,MACjB/K,EAAgBtC,YAAW,GAAD,OAAIR,EAAJ,YtBrHX,SAAC8N,GAA4D,IAAjDC,EAAgD,uDAArC,SAAUC,EAA2B,uDAAX,OAEtEC,EAAc,EAChBC,EAAM,IAAIC,IAGdxP,IAAEC,KAAKkP,GAAW,SAAAjP,GAAG,OAAIjB,EAAYiB,EAAKqP,EAAKD,MAG/CC,EAAIE,cAAc,CAACpQ,KAAK,SACnBqQ,MAAK,SAASlQ,GACXmQ,iBAAOnQ,EAAD,UAAa4P,GAAb,OAAwBC,OAEjCO,MAAM/O,QAAQsL,KsB4Gf0D,CAAgBd,GAEhBtJ,IAAaqK,KAAK,CACdnK,QACI,8BACI,gDAAiBtE,cAhKzBoE,IAAa7E,MAAM,CAAC+E,QAAS,sCARlB,E,0CA8KnB,WAAU,IAAD,OACL,EAWI6F,KAAKT,MAVLxJ,EADJ,EACIA,QACAF,EAFJ,EAEIA,WACAqF,EAHJ,EAGIA,kBACApF,EAJJ,EAIIA,wBACAE,EALJ,EAKIA,aACAC,EANJ,EAMIA,aAEA+M,EARJ,EAQIA,cACAC,EATJ,EASIA,qBACAC,EAVJ,EAUIA,2BAKEO,EAAiB9G,EADE,CAAE9G,aAAYC,0BAAyBoF,oBAAmBnF,UAASC,eAAcC,iBAEpGsO,EAAuBd,EAAe3N,yBAA2BW,kBAAgBC,UAAY+M,EAAe3N,yBAA2BW,kBAAgBE,UAAYR,YAAUsN,EAAerN,UAAWD,YAAUsN,EAAelN,WAEtO,OACI,sBAAK+H,UAAU,YAAf,UACI,cAAC,IAAD,CAAQA,UAAU,iBAAiBiC,QAAS,kBAAM,EAAK6C,mBAAvD,sBACA,qBAAKoB,MAAO,CAACC,MAAO,QAApB,SACI,oBAAGD,MAAO,CAACC,MAAO,OAAQC,UAAW,OAAQC,SAAU,SAAvD,gDACkCtO,YAAWkO,GAD7C,wBACkFlO,YAAWkO,GAD7F,eAEI,uBAFJ,4CAGwCA,EAHxC,8BAGkFlO,YAAWkO,GAH7F,iBAII,uBAJJ,kCAK8BA,EAL9B,mCAK6EA,EAL7E,+BAKuHlO,YAAWkO,GALlI,sBAQJ,eAAC,IAAD,CAAUjG,UAAU,WAAWsG,iBAAkB,CAAC,YAAlD,UACI,cAACrC,GAAD,CAAOjC,OAAO,WAAd,SACI,sBAAKhC,UAAU,oBAAf,UACI,cAAC,IAAD,CACIC,YAAY,cACZzG,MAAOjC,EACP2I,SAAU,SAAC1L,GAAD,OAAOkQ,EAAclQ,EAAE2L,OAAO3G,UAG5C,cAACgL,GAAD,CACIvE,YAAY,8BACZsG,KAAM,EACNvG,UAAU,WACVE,SAAU,SAAC1L,GAAD,OAAOmQ,EAAqBnQ,EAAE2L,OAAO3G,UAGnD,sBAAKwG,UAAU,YAAf,yBAEI,uBACA,eAACqE,GAAD,CACI7K,MAAOhC,EACP0I,SAAU,SAAC1L,GAAD,OAAOoQ,EAA2BpQ,EAAE2L,OAAO3G,QAFzD,UAII,cAAC,IAAD,CAAOA,MAAOrB,kBAAgBC,SAA9B,uBACA,cAAC,IAAD,CAAOoB,MAAOrB,kBAAgBE,UAA9B,wBACA,cAAC,IAAD,CAAOmB,MAAOrB,kBAAgBiN,MAA9B,6BAxBa,YA8B7B,cAACnB,GAAD,CAAOjC,OAAO,eAAd,SACI,cAACwE,GAAD,KAD6B,gBAIjC,cAACvC,GAAD,CAAOjC,OAAO,sBAAd,SACI,cAAC,GAAD,KADoC,gBAIxC,cAACiC,GAAD,CAAOjC,OAAO,iBAAd,SACI,qBAAKhC,UAAU,oBAAf,SACI,eAAC,IAAD,CAAMA,UAAU,OAAOyG,YAAY,MAAnC,UACI,cAACtC,GAAD,CAASuC,IAAI,oBAAb,SACI,cAAC,GAAD,KADiC,KAGrC,cAACvC,GAAD,CAASuC,IAAI,QAAb,SACI,qBAAK1G,UAAU,gBAAf,SACI,cAAC,IAAD,CACIxK,MAAM,EACNmR,mBAAmB,EACnBC,kBAAkB,EAClBC,4BAA4B,OANf,KAUzB,cAAC1C,GAAD,CAASuC,IAAI,oBAAb,SACI,qBAAK1G,UAAU,gBAAf,SACI,cAAC,IAAD,CACIxK,MAAM,EACNmR,mBAAmB,EACnBC,kBAAkB,EAClBC,4BAA4B,EAC5BC,IAAK3B,OAPoB,WAhBd,qB,GArPR3C,IAAMvN,WAyRtCwN,gBAxSS,SAAAC,GAAK,MAAK,CAC9BnL,WAAYwP,YAAiBrE,GAC7B9F,kBAAmBoK,YAAwBtE,GAC3ClL,wBAAyByP,YAA8BvE,GACvDjL,QAASkL,YAAcD,GACvBhL,aAAcyL,YAAmBT,GACjC/K,aAAcqM,YAAmBtB,MAkSG5B,GAAzB2B,CAA6CoC,ICtUvCqC,I,mKACjB,WAEI,OACI,gCACI,mLAIA,2F,GATkB1E,IAAMvN,Y,SCKnBkS,G,4JACjB,WACI,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CACIC,OAAK,EACLC,UAAYH,GACZI,KAAOC,KAAKC,OAEhB,cAAC,IAAD,CACIJ,OAAK,EACLK,OAAS,SAAAxG,GAAK,OAAI,cAAC,GAAD,eAAuCA,KACzDqG,KAAOC,KAAKG,+BAGhB,cAAC,IAAD,CAAUC,GAAKJ,KAAKC,OAZxB,W,GAHwBvS,c,8WCXrB2S,EAFCC,cCMVC,EAAmBC,YAAuBH,GAC1CI,EAAiBC,cACjBC,EAAa,CAAEC,IAAOH,EAAgBF,GAMlCM,GAASC,EAFUC,EAAQ,KAAzBD,cAEoB,CACxBE,UAAW,EACXC,WAAW,EACXC,WAAW,EACXC,MAAW,EACXC,OAAW,CACPxG,MAAW,iBAAM,eACjByG,UAAW,iBAAM,cACjBnQ,OAAW,iBAAM,eACjBoQ,UAAW,iBAAM,aACjB/R,MAAW,iBAAM,gBAIzBoR,EAAWY,KAAKV,GCvBb,I,mECQMW,EAAgB,CACzBzN,IAAW,iBACX0N,QAAWC,IACXC,UAAW,CACPC,MAKFC,EAAiB,CAEnBC,OAA+BC,YAAc1B,IAI3C2B,EAAQ,eACRJ,IAA4CK,KAG5CC,EAAaC,YAAgB,2BAAKN,GAAmBG,IA4B5CI,EAJKC,YAAeb,GAAe,SAACrG,EAAOjK,GACtD,OAvBY,SAACiK,EAAOjK,GACpB,IAAQlD,EAAkBkD,EAAlBlD,KAAMsU,EAAYpR,EAAZoR,QACVC,EAAe,KAiBnB,OAdIvU,IAASwU,KACT7T,IAAEmF,IAAIwO,EAAS,uBACX3T,IAAEmF,IAAIqH,EAAO,8BAEjBoH,EAAe7P,OAAOtF,KAAKyU,GAAgBY,QACvC,SAACF,EAAcvS,GAGX,OAFAuS,EAAcvS,GAAemL,EAAOnL,GAE7BuS,IAEX,KAIDL,EAAWK,GAAgBpH,EAAOjK,GAIlCwR,CAAQvH,EAAOjK,M,qCCVTyR,GAAV,SAAUA,IAAV,iEACH,OADG,SACGC,YAAI,IADP,uC,eC1CkBC,GAAV,SAAUA,IAAV,iEACX,OADW,SACLD,YAAI,CACNE,MAFO,uCCGf,IAAMC,EAAQC,YACVZ,EJJ4B,WAGXa,OAAOC,qCAExB,OAAoCC,IIApCC,GAAmBC,IAAe,WAAf,cAAmB1C,MAG7B2C,EAAYC,YAAaR,GAEvBA,IAEftC,EAAe+C,IAAIX,G,aCnBJ,MAA0B,iC,oDCiBpBY,G,4JACjB,WACI,MAGItJ,KAAKT,MAFLgK,EADJ,EACIA,MACA3D,EAFJ,EAEIA,KAGJ,OACI,+BACI,eAAC,IAAD,CACIK,GAAIL,EADR,SAGI,sBAAKtH,UAAU,aAAf,SACKiL,Y,GAbqBzI,IAAMvN,WCC/BiW,G,kDACjB,WAAYjK,GAAQ,IAAD,8BACf,cAAMA,IAEDkK,iBCdF,CACH,CACIhJ,MAAO,OACPmF,KAAMC,IAAKC,MAEf,CACIrF,MAAO,kBACPmF,KAAMC,IAAKG,8BAEf,CACIvF,MAAO,iBACPmF,KAAMC,IAAK6D,8BDAA,E,0CAMnB,WACI,IAAQC,EAAa3J,KAAKT,MAAlBoK,SAER,OACI,uBAAKrL,UAAU,WAAf,UACI,0BAAQA,UAAU,SAAlB,UACI,sBAAK8G,IAAKwE,EAAMtL,UAAU,OAAOuL,IAAI,SACrC,sBAAKvL,UAAU,QAAf,oCAIJ,sBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,kBAAf,SACK0B,KAAKyJ,kBAAoBjV,IAAEsC,IAAIkJ,KAAKyJ,kBAAkB,YAAoB,IAAlBhJ,EAAiB,EAAjBA,MAAOmF,EAAU,EAAVA,KAC5D,OACI,eAAC,GAAD,CACI2D,MAAO9I,EACPmF,KAAMA,GACDhG,sBAMzB,sBAAKtB,UAAU,WAAf,SACKqL,W,GAhCmB7I,IAAMvN,WEFzBuW,I,mKACjB,WACI,OACI,eAAC,IAAD,CAAUlB,MAAQA,EAAlB,SACI,eAAC,IAAD,CAAamB,QAAU,KAAOZ,UAAYA,EAA1C,SACX,eAAC,IAAD,CAAiBjD,QAAUA,EAA3B,SACC,sBAAK5H,UAAU,MAAf,SACsB,eAAC,GAAD,UACjB,eAAC,IAAD,kB,GARsB/K,cCVjCyW,IAASjE,OACP,eAAC,IAAMkE,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,U,+gBCLbtU,EAAa,mCACpBuU,EAAM,cAAUvU,GAETwU,EAAe,UAAMD,EAAN,oBACfE,EAAsB,UAAMF,EAAN,2BACtBG,EAA6B,UAAMH,EAAN,kCAE7BI,EAAW,UAAMJ,EAAN,gBACXK,EAAgB,UAAML,EAAN,qBAChBM,EAAiB,UAAMN,EAAN,sBAGxBO,EAAe,CACjB9U,WAAY,OACZqF,uBAAmBwE,EACnB5J,wBAAyBW,kBAAgBC,SACzCX,QAAS,GACTC,aAAc,GACdC,aAAc,IAGH,SAASsS,IAAuC,IAA/BvH,EAA8B,uDAAtB2J,EAAc5T,EAAQ,uCAClDlD,EAAkBkD,EAAlBlD,KAAMsU,EAAYpR,EAAZoR,QACd,OAAQtU,GACJ,KAAKwW,EACD,OAAO,2BACArJ,GADP,IAEInL,WAAYsS,IAGpB,KAAKmC,EACD,OAAO,2BACAtJ,GADP,IAEI9F,kBAAmBiN,IAG3B,KAAKoC,EACD,OAAO,2BACAvJ,GADP,IAEIlL,wBAAyBqS,IAGjC,KAAKqC,EACV,OAAO,2BACHxJ,GADJ,IAECjL,QAASoS,IAGL,KAAKsC,EACD,OAAO,2BACAzJ,GADP,IAEIhL,aAAcmS,IAGtB,KAAKuC,EACV,OAAO,2BACH1J,GADJ,IAEC/K,aAAckS,IAGV,QAAS,OAAOnH,GAMjB,IAAMqE,EAAmB,SAAArE,GAAK,OAAIA,EAAOnL,GAAaA,YAChDyP,EAA0B,SAAAtE,GAAK,OAAIA,EAAOnL,GAAaqF,mBACvDqK,EAAgC,SAAAvE,GAAK,OAAIA,EAAOnL,GAAaC,yBAE7DmL,EAAgB,SAAAD,GAAK,OAAIA,EAAOnL,GAAaE,SAC7C0L,EAAqB,SAAAT,GAAK,OAAIA,EAAOnL,GAAaG,cAClDsM,EAAqB,SAAAtB,GAAK,OAAIA,EAAOnL,GAAaI,cAIlD+M,EAAgB,SAAClL,GAAD,MAAY,CACxCjE,KAAOwW,EACPlC,QAASrQ,IAGGmL,EAAuB,SAACnL,GAAD,MAAY,CAC/CjE,KAAOyW,EACPnC,QAASrQ,IAGGoL,EAA6B,SAACpL,GAAD,MAAY,CACrDjE,KAAO0W,EACPpC,QAASrQ,IAGGoF,EAAa,SAACpF,GAAD,MAAY,CACrCjE,KAAO2W,EACPrC,QAASrQ,IAGGsJ,EAAkB,SAACtJ,GAAD,MAAY,CAC1CjE,KAAO4W,EACPtC,QAASrQ,IAGGgK,EAAkB,SAAChK,GAAD,MAAY,CAC1CjE,KAAO6W,EACPvC,QAASrQ,K,gCC1GV,IAAM+N,EAAOtN,OAAOC,OAAO,CACvBwN,6BAA8B,kCAC9B0D,4BAA6B,iCAC7B5D,KAAM,UAGKD,O,gBCJf,IAAMxO,EAAekB,OAAOC,OAAO,CAC/BlB,MAAO,QACPc,IAAK,MACLC,eAAgB,iBAChBC,kBAAmB,sBAOjByG,EAAkBxG,OAAOC,OAAO,CAClCmH,eAAgB,YAChBiL,UAAW,OACXC,YAAY,KACZC,KAAM,IACNC,YAAa,KACbC,WAAY,KACZC,MAAO,QACPC,KAAM,SAMJzU,EAAkB8B,OAAOC,OAAO,CAClC9B,SAAU,WACVC,UAAW,YACX+M,MAAO,UAGLvP,EAAiBoE,OAAOC,OAAO,CACjCpE,KAAM,OACNC,UAAW,cAGflB,EAAOC,QAAU,CACbiE,eACA0H,kBACAtI,kBACAtC,oB","file":"static/js/main.201257ae.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 155;","// vendor\nimport React, { Component } from \"react\";\nimport { hot } from \"react-hot-loader\";\n\n// proj\n\n// own\nimport Public from \"./Public\";\n\n/**\n * Central route handler, it will decide which routes is currently available\n */\nclass Routes extends Component {\n    render() {\n        return (\n            <Public />\n        );\n    }\n}\n\nexport default hot(module)(Routes)","/*\n    This module is created for handle file saving operations.\n*/\n\n//vendor\nimport _ from \"lodash\";\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\n\n//proj\nimport { TYPES_OF_FILES } from 'globalConstants';\n\n//own\n\nconst MAX_ZIP_DEEP = 10;\n\n/**\n * Save file on user's local machine. Just provide content you wnat to save.\n * @param { String } text - content of a file\n * \n * @example \n * downloadTxtFile(\"Hello world\", \"hello.txt\")\n */\n export const downloadTxtFile = (text, filename = 'myFile.txt') => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}\n\n/**\n * ***Recursive*** function for building zip file structure by creating nested files/folders or just creating a file on current iteration.\n * @param {*} fileBuildingObject This is one of file or folder objects used for generating;\n * @param {*} zipFile - instance of JSZip file on current iteration.\n * @param {*} prevDeep - previous deep value, used to indicate too deep folders nesting(possibly recursive dead loop)\n */\nconst fileBuilder = (fileBuildingObject, zipFile, prevDeep) => {\n    const { type, name, extension, content, fileProps } = fileBuildingObject;\n    const currDeep = prevDeep + 1;\n    \n    if(currDeep >= MAX_ZIP_DEEP) throw \"Error, max folder deep when generating zip file reached. Make sure you do not have recursive dead loop here!\"\n    if(!name) throw \"No name provided for one of the files\";\n    if(!type) throw \"No type provided for one of the files\";\n\n    switch (type) {\n        case TYPES_OF_FILES.file:\n            zipFile.file(`${name}${extension? extension: \"\"}`, content, fileProps);\n            break;\n\n        case TYPES_OF_FILES.directory:\n            const newZipFileInstance = zipFile.folder(name);\n            _.each(content, (obj) => fileBuilder(obj, newZipFileInstance, currDeep));\n            break;\n    }\n}\n\n/**\n * Used to generate zip file and save it on user's local pc vi saveAs. This used recursive method of building directories structure\n * so it can be used for different purposes and file structures. For object reference see examples.\n * @param {*} filesTree \n * @param {*} filename \n * @param {*} fileExtension\n * \n * @example\n * // example of filesTree:\n * const plug = [\n *      {\n *          type: TYPES_OF_FILES.file,\n *          name: 'helloTxt',\n *          content: \"Hello world\",\n *          extension: '.txt',\n *          fileProps: undefined\n *      },\n *      {\n *          type: TYPES_OF_FILES.directory,\n *          name: 'myDir',\n *          content: [\n *              {\n *                  type: TYPES_OF_FILES.file,\n *                  name: 'helloTxt2',\n *                  extension: '.txt',\n *                  content: \"Hello 2\",\n *                  fileProps: undefined\n *              },\n *              {\n *                  type: TYPES_OF_FILES.file,\n *                  name: 'smile',\n *                  extension: '.png',\n *                  content: \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAvUlEQVRIS+2VQQ6AIAwE7f8fjcGIQSJ0FpRw0CuG6W7p1kIIYZv42dJAMzu8GDFFUhiBEZbAPXAMTLCy3apqBKzBEtw7z4t0gfQyavNaQKouWkZ72VRIgRR2FOYNvgelvbseWC+wBHmFYWDen6fITUFA08e19DZDZ9I8Df8nwNpSoXaiR0M211SgAntF4VSgChtSqKRLc1uQqnthVYV5ipRbfQSGLW0VQMZGWsDqhd7/UrR5l5HzH0hckv7ZAQ7W2K0nyHmFAAAAAElFTkSuQmCC\",\n *                  fileProps: {base64: true},\n *              },\n *          ]\n *      }\n *  ];\n */\nexport const downloadZipFile = (filesTree, filename = 'myFile', fileExtension = '.zip') => {\n    \n    const initZipDeep = 0; //How many folders deep created\n    var zip = new JSZip();\n\n    // Build zip file\n    _.each(filesTree, obj => fileBuilder(obj, zip, initZipDeep));\n\n    // Save file\n    zip.generateAsync({type:\"blob\"})\n        .then(function(content) {\n            saveAs(content, `${filename}${fileExtension}`);\n        })\n        .catch(console.log);\n}","/**\n * This module is created for parsing different types of files as fast and easy as possible.\n * Just call function for specific filetype you need and provided text will be parsed to pretty format!\n * \n * Formatter can even validate code you generate!\n * \n * For more information see:\n * @see https://prettier.io/docs/en/api.html - general description of prettier abilities\n * @see https://github.com/prettier/prettier/issues/6264 - each prettier parser has to be imported separately\n * @see https://github.com/GTFTT/boilerplate_react/issues/5 - git hub feature issue\n */\n\nimport prettier from 'prettier';\nimport parserBabel from 'prettier/parser-babel';\n\n/**\n * Parses .js and .jsx files so it appears much better.\n * @param {*} text text to pe parsed\n * @returns Parsed text\n */\nconst parseJsx = (text) => {\n    try{\n        return prettier.format(text, {semi: true, tabWidth: 4, parser: 'babel', plugins: [parserBabel]});\n    } catch(error) {\n        console.error(error);\n    }\n    return text; //If error occurs while parsing we have to return at least text\n}\n\nexport {\n    parseJsx\n};","//vendor\nimport _ from \"lodash\";\n\n/**\n * Generate text from array of lines with new line at the end of each.\n * Last line does not have a new line character.\n * All falsy lines will be removed (but empty string remains)\n * @param { Array } text - array of strings\n */\nexport const lines = (textArr) => {\n    const filteredLines = _.filter(textArr, (line) => Boolean(line) || line === \"\"); // Remove all false values except of empty string\n    \n    return filteredLines.join(\"\\n\");\n}\n\nexport * from './fileSaver';\nexport * from './fileParsers';","//vendor\nimport { constantCase, camelCase, capitalCase, pascalCase, snakeCase } from 'change-case'; //For converting different types of variables(camelCase, snake case, etc.)\nimport _ from 'lodash';\nimport { notification } from \"antd\";\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\n\n/**\n * Actions enriching - generating more fields that can be used later\n * @param {*} actions \n * @returns Enriched actions\n */\nfunction enrichActions(actions) {\n    const enrichedActions = _.map(actions, (action) => {\n        let enriched =  {\n            ...action,\n            constants: {}, //Constant names, can be more than one\n            actionCreators: {}, //Action function names, different for different types of actions\n            sagas: {}, //Action function names, different for different types of actions\n        };\n\n        switch (action.actionType) {\n            case ACTION_TYPES.fetch:\n                enriched.constants = {\n                    setFetching: constantCase(`set fetching ${action.actionName}`),\n                    setValueFilters: constantCase(`set ${action.actionName} filters`),\n                    fetch: constantCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: constantCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.actionCreators = {\n                    setFetching: camelCase(`set fetching ${action.actionName}`),\n                    setValueFilters: camelCase(`set ${action.actionName} filters`),\n                    fetch: camelCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: camelCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionType} ${action.actionName} saga`)\n                }\n\n                //Used to store data inside them\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`),\n                    statsValue: camelCase(`${action.actionName} stats`),\n                    filtersValue: camelCase(`${action.actionName} filters`),\n                    fetchingValue: camelCase(`fetching ${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                    statsValue: camelCase(`select ${action.actionName} stats`),\n                    filtersValue: camelCase(`select ${action.actionName} filters`),\n                    fetchingValue: camelCase(`select fetching ${action.actionName}`)\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.set:\n                enriched.constants = {\n                    set: constantCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    set: camelCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.poorSagaAction:\n                enriched.constants = {\n                    poorSagaAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionName} saga`)\n                }\n\n                enriched.actionCreators = {\n                    poorSagaAction: camelCase(`${action.actionName}`),\n                }\n                break;\n\n            case ACTION_TYPES.poorReducerAction:\n                enriched.constants = {\n                    poorReducerAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    poorReducerAction: camelCase(`${action.actionName}`),\n                }\n                break;\n        }\n\n        return enriched;\n    })\n    return Object.freeze(enrichedActions);\n}\n\n/**\n * Enrich translations that will be used for a whole generated module\n * @param {*} componentName - name of a component for which translations are generated\n * @param {*} translations - translations object\n * @returns \n */\nfunction enrichTranslations(componentName, translations) {\n\n    const enrichedTranslations = _.map(translations, (translation) => {\n        let enriched =  {\n            ...translation,\n            constantEn: `\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\": \"${translation.translationEn || ''}\"`,\n            constantUk: `\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\": \"${translation.translationUk || ''}\"`,\n            constantRu: `\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\": \"${translation.translationRu || ''}\"`,\n            formattedMessage: `<FormattedMessage id=\"${snakeCase(componentName )}.${snakeCase(translation.translationName)}\" />`,\n            formatMessage: `formatMessage({ id: '${snakeCase(componentName )}.${snakeCase(translation.translationName)}' })`,\n        };\n\n        return enriched;\n    })\n    return Object.freeze(enrichedTranslations);\n}\n\nfunction enrichTableConfigs(tableConfigs, enrichedTranslations) {\n\n    const enrichedTableConfigs = _.map(tableConfigs, (tableConfig) => {\n        const translationOfCurrentConfig = _.get(_.filter(enrichedTranslations, obj => obj.key === tableConfig.tableConfigTranslationKey), '[0]')\n        let enriched =  {\n            ...tableConfig,\n            tableConfigName: camelCase(`${tableConfig.tableConfigName} col`),\n            formattedMessage: _.get(translationOfCurrentConfig, 'formattedMessage'),\n            formatMessage: _.get(translationOfCurrentConfig, 'formatMessage'),\n        };\n\n        return enriched;\n    })\n    return Object.freeze(enrichedTableConfigs);\n}\n\n\n/**\n * Before we start generation we have to enrich generation object - add more fields and pre-generate some variables.\n */\nexport default (generationObject) => {\n    const { moduleName, generationComponentType, actions, translations, tableConfigs } = generationObject;\n\n    const moduleNameCamelCase = camelCase(moduleName);\n    const pageName = pascalCase(`${moduleName} page`);\n    const pageTableName = pascalCase(`${moduleName} table`);\n    const modalName = pascalCase(`${moduleName} modal`);\n\n    //Component name for generating translations\n    const translationComponentName = ([COMPONENT_TYPES.poorPage, COMPONENT_TYPES.tablePage].includes(generationComponentType))\n        ? pageName\n        : modalName;\n\n    const enrichedActions = enrichActions(actions);\n    const enrichedTranslations = enrichTranslations(translationComponentName, translations);\n    const enrichedTableConfigs = enrichTableConfigs(tableConfigs, enrichedTranslations);\n\n    const componentName = (generationComponentType == COMPONENT_TYPES.poorPage)\n        ? pageName\n        : (generationComponentType == COMPONENT_TYPES.tablePage)\n            ? pageTableName\n            : modalName;\n\n    const dataSourceAction = _.get(_.filter(enrichedActions, 'isDataSource'), '[0]'); //Action which is selected as data source\n    \n    if(!dataSourceAction && COMPONENT_TYPES.tablePage === generationComponentType) {\n        notification.warning({\n            message: \"Data source action is not selected, this can lead to incorrect generation!\"\n        })\n    }\n\n    return Object.freeze({\n        ...generationObject,\n\n        moduleName: moduleNameCamelCase,\n        componentName, //Current component name\n\n        actions: enrichedActions,\n        translations: enrichedTranslations,\n        tableConfigs: enrichedTableConfigs,\n        dataSourceAction,\n\n        pageName,\n        pageTableName,\n        modalName,\n    });\n}","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\nfunction generateConstant({ actionType, constants }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result +=`export const ${constants.fetch} = \\`\\${prefix}/${constants.fetch}\\`;\\n`;\n            result +=`export const ${constants.fetchSuccess} = \\`\\${prefix}/${constants.fetchSuccess}\\`;\\n`;\n            result +=`export const ${constants.setValueFilters} = \\`\\${prefix}/${constants.setValueFilters}\\`;\\n`;\n            result +=`export const ${constants.setFetching} = \\`\\${prefix}/${constants.setFetching}\\`;\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            result +=`export const ${constants.set} = \\`\\${prefix}/${constants.set}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            result +=`export const ${constants.poorSagaAction} = \\`\\${prefix}/${constants.poorSagaAction}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result +=`export const ${constants.poorReducerAction} = \\`\\${prefix}/${constants.poorReducerAction}\\`;\\n`;\n            break;\n    }\n\n    return result;\n}\n\n/** Reducer snippet is a line that contains variable name */\nfunction generateReducerInitStateSnippet({ actionInitValue, actionType, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res = lines([\n                `\\t${valueNames.value}: ${actionInitValue},`,\n                `\\t${valueNames.filtersValue}: {`,\n                'page: 1,',\n                `},`,\n                `\\t${valueNames.statsValue}: {},`,\n                `\\t${valueNames.fetchingValue}: false,\\n`,\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            break;    \n    }\n\n    return res;\n}\n\n\n/**\n * Reducer's state changer inside switch statement\n */\nfunction generateReducerSnippet({ actionType, constants, valueNames }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result = lines([\n                `\\t\\tcase ${constants.fetchSuccess}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t...payload,`,\n                '\\t\\t\\t};',\n\n                `\\t\\tcase ${constants.setValueFilters}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                        `${valueNames.filtersValue}: {`,\n                            `...state.${valueNames.filtersValue},`,\n                            `...payload,`,\n                            `},`,\n                        '};',\n\n                `\\t\\tcase ${constants.setFetching}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.fetchingValue}: payload,`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            result = lines([\n                `\\t\\tcase ${constants.set}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: payload`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result = lines([\n                `\\t\\tcase ${constants.poorReducerAction}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Actions are functions that can be called when you want to change the state\n */\nfunction generateActionSnippet({ actionType, actionName, actionCreators, constants, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += lines([\n                `export const ${actionCreators.fetch} = () => ({`,\n                `\\ttype: \\t${constants.fetch},`,\n                '});\\n',\n\n                `export const ${actionCreators.fetchSuccess} = ({${valueNames.value}, ${valueNames.statsValue}}) => ({`,\n                `\\ttype: \\t${constants.fetchSuccess},`,\n                `\\tpayload: {${valueNames.value}, ${valueNames.statsValue}}`,\n                '});\\n',\n\n                `/** Provide object with filters field you want to change, if you will not provide some filed, they will not be changed.`,\n                ` * If you provide 'null' or 'undefined', then field will be replaced with appropriate value.`,\n                ` * Automatically triggers data refreshing(action for fetching).`,\n                ` * @param { Object } filters - filters object, can contain any fields you want to override`,\n                ` */`,\n                `export const ${actionCreators.setValueFilters} = (filters) => {`,\n                `return function(dispatch) {`,\n                        `dispatch({`,\n                            `type: ${constants.setValueFilters},`,\n                            `payload: filters`,\n                        `});`,\n                        `dispatch(${actionCreators.fetch}());`,\n                    `}`,\n                `};\\n\\n`,\n\n                `export const ${actionCreators.setFetching} = (value) => ({`,\n                `\\ttype: \\t${constants.setFetching},`,\n                '\\tpayload: value',\n                '});\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += lines([\n                `export const ${actionCreators.set} = (value) => ({`,\n                `\\ttype: \\t${constants.set},`,\n                '\\tpayload: value',\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            res += lines([\n                `export const ${actionCreators.poorSagaAction} = () => ({`,\n                `\\ttype: \\t${constants.poorSagaAction},`,\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            res += lines([\n                `export const ${actionCreators.poorReducerAction} = () => ({`,\n                `\\ttype: \\t${constants.poorReducerAction},`,\n                '});\\n'\n            ]);\n            break;\n    }\n\n    return res;\n}\n\n/**\n * Module pattern is used here to generate data. This generator is used for creating duck files.\n * \n * @param { String } moduleName - name of the module you want to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    /**\n     * @returns Header of a duck file\n     */\n    function generateHeader() {\n        let result = lines([\n            `/** ------------------------------------- Constants ------------------------------------- **/`,\n            `export const moduleName = '${moduleName}';`,\n            `const prefix = \\`cpb/\\${moduleName}\\`;`,\n            '',\n        ]);\n    \n        return result;\n    }\n\n    /**\n     * @param {*} params.actions - actions to generate constants for\n     */\n    function generateConstants() {\n        let result = \"\";\n\n        _.each(actions, (action) => {\n            result+=generateConstant(action);\n        });\n\n        return result;\n    }\n\n    function generateReducerInitState() {\n        let result = lines([\n            '/** ------------------------------------- Reducer ------------------------------------- **/',\n            'const ReducerState = {\\n',\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerInitStateSnippet(action);\n        });\n        result+= '};\\n';\n\n        return result;\n    }\n\n    function generateReducer() {\n        let result = lines([\n            `export default function reducer(state = ReducerState, action) {`,\n            `\\tconst { type, payload } = action;`,\n            `\\tswitch (type) {\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerSnippet(action);\n        })\n\n        result += lines([\n            `\\t\\tdefault:`,\n            `\\t\\t\\treturn state;`,\n            `\\t}`,\n            `}`,\n        ]);\n    \n        return result;\n    }\n\n    function generateSelectors() {\n        let res = lines([\n            `/* ------------------------------------- Selectors ------------------------------------- */\\n`,\n        ]);\n\n        _.each(actions, ({ actionType, selectors, valueNames }) => {\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    res += lines([\n                        `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};`,\n                        `export const ${selectors.statsValue} = state => state[ moduleName ].${valueNames.statsValue};`,\n                        `export const ${selectors.filtersValue} = state => state[ moduleName ].${valueNames.filtersValue};`,\n                        `export const ${selectors.fetchingValue} = state => state[ moduleName ].${valueNames.fetchingValue};`,\n                        `\\n`,\n                    ]);\n                    break;\n        \n                case ACTION_TYPES.set:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    break;    \n            }\n        });\n    \n        return res;\n    }\n\n    function generateActionCreators() {\n        let result = lines([\n            `/* ------------------------------------- Action Creators -------------------------- */\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateActionSnippet(action);\n        });\n    \n        return result;\n    }\n\n    return {\n        generateHeader,\n        generateConstants,\n        generateReducerInitState,\n        generateReducer,\n        generateSelectors,\n        generateActionCreators,\n    }\n};","//proj\nimport { lines, parseJsx } from \"utils\";\n\n//own\nimport poorPageGenerator from \"./poorPageGenerator/poorPageGenerator\";\n\nimport tablePageGenerator from \"./tablePageGenerator/tablePageGenerator\";\nimport tableGenerator from \"./tablePageGenerator/tableGenerator\";\nimport tableConfigGenerator from \"./tablePageGenerator/tableConfigGenerator\";\nimport tableStylesGenerator from \"./tablePageGenerator/tableStylesGenerator\";\nimport tablesIndexGenerator from \"./tablePageGenerator/tablesIndexGenerator\";\n\nexport default (generationObject) => {\n    \n    /** Poor page, contains nothing except basic layout. */\n    const generatePoorPage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = poorPageGenerator(generationObject);\n\n        const res = lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n\n        return parseJsx(res);\n    };\n\n    /** This is the page where table is invoked for rendering, there can be placed filters, modals, main description of the module etc. */\n    const generateTablePage = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = tablePageGenerator(generationObject);\n\n        const res = lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n\n        return parseJsx(res);\n    }\n\n    /** This file contains table file, there configs and styles are connected */\n    const generateTable = () => {\n        const {\n            generateImports,\n            generateMapStateToProps,\n            generateMapDispatchToProps,\n            generateClass,\n        } = tableGenerator(generationObject);\n\n        const res = lines([\n            generateImports(),\n            generateMapStateToProps(),\n            ``,\n            generateMapDispatchToProps(),\n            ``,\n            generateClass(),\n        ]);\n\n        return parseJsx(res);\n    }\n\n    /** File that contains table's columns configuration */\n    const generateTableConfig = () => {\n        const { generateTableConfigFile } = tableConfigGenerator(generationObject);\n        return parseJsx(generateTableConfigFile());\n    }\n\n    /** Basic table styles and styles for fixing known issues */\n    const generateTableStyles = () => {\n        const { generateTableStyleFile } = tableStylesGenerator(generationObject);\n        return generateTableStyleFile();\n    }\n\n    /** index.js file for exporting table from tables directory */\n    const generateTablesIndexFile = () => {\n        const { generateTableIndexFile } = tablesIndexGenerator(generationObject);\n        return parseJsx(generateTableIndexFile());\n    }\n\n    return {\n        generatePoorPage,\n\n        generateTablePage,\n        generateTable,\n        generateTableConfig,\n        generateTableStyles,\n        generateTablesIndexFile,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, moduleDescription, actions, translations}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => `${actionCreators.fetch},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `${actionCreators.poorReducerAction},`\n            ),\n            `}  from 'pages/${pageName}/redux/duck';`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `${valueNames.value}: ${selectors.value}(state),`,\n                    `${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, actionCreators}) => lines([\n                    `${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, actionCreators}) => `${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        const titleTranslation = _.get(_.filter(translations, 'isPageTitle'), '[0]');\n\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n            `constructor(props) {`,\n            `super(props);`,\n            `}`,\n            ``,\n            `render() {`,\n            `const {`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `${valueNames.value},`,\n                    `${valueNames.fetchingValue},`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `${valueNames.value},`\n            ),\n            `} = this.props;`,\n            ``,\n            `return (`,\n            `<div>`,\n            `<Layout`,\n            `title={ ${_.get(titleTranslation, 'formattedMessage')} }`,\n            `></Layout>`,\n            `</div>`,\n            `)`,\n            `}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, pageTableName, moduleDescription, actions, dataSourceAction, translations}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import Styles from './styles.m.css';`,\n            `import { ${pageTableName} } from './components/tables';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators, selectors}) => lines([\n                    `${actionCreators.fetch},`,\n                    `${selectors.value},`,\n                    `${selectors.fetchingValue},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `${actionCreators.poorReducerAction},`\n            ),\n            `} from 'pages/${pageName}/redux/duck';`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `${valueNames.value}: ${selectors.value}(state),`,\n                    `${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ actionCreators}) => lines([\n                    `${actionCreators.fetch},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ actionCreators}) => `${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        const titleTranslation = _.get(_.filter(translations, 'isPageTitle'), '[0]');\n\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageName} extends Component {`,\n                `constructor(props) {`,\n                    `super(props);`,\n                    ``,\n                    `this.props.${_.get(dataSourceAction, 'actionCreators.fetch')}();`,\n                `}`,\n                ``,\n                `render() {`,\n                    `const {`,\n                        ..._.map(\n                            _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                            ({valueNames, selectors}) => lines([\n                                `${valueNames.value},`,\n                                `${valueNames.fetchingValue},`,\n                                ``,\n                            ])\n                        ),\n                        ``,\n                        ..._.map(\n                            _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                            ({valueNames, selectors}) => `${valueNames.value},`\n                        ),\n                    `} = this.props;`,\n                    ``,\n                    `return (`,\n                        `<div>`,\n                            `<Layout`,\n                                `title={ ${_.get(titleTranslation, 'formattedMessage')} }`,\n                            `>`,\n                                `<div>`,\n                                    `<${pageTableName} />`,\n                                `</div>`,\n                            `</Layout>`,\n                        `</div>`,\n                    `)`,\n                `}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\nexport default ({pageName, pageTableName, moduleDescription, actions, dataSourceAction}) => {\n\n    const generateImports = () => {\n        let res = \"\";\n\n        res+= lines([\n            `// vendor`,\n            `import React, {Component} from 'react';`,\n            `import {FormattedMessage, injectIntl } from 'react-intl';`,\n            `import { connect } from 'react-redux';`,\n            `import { Tabs, Icon, Col, Row, Input, Select, Button, Table } from 'antd';`,\n            `import _ from 'lodash';`,\n            `import { fetchAPI } from 'utils';`,\n            `import { v4 } from 'uuid';`,\n            ``,\n            `// proj`,\n            `import { Layout, StyledButton } from 'commons';`,\n            `import { setModal, MODALS } from 'core/modals/duck';`,\n            ``,\n            `//own`,\n            `import { columnsConfig } from './config';`,\n            `import Styles from './styles.m.css';`,\n            `import {`,\n\n            //Print each action separately\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({actionCreators}) => `${actionCreators.set},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({actionCreators}) => lines([\n                    `${actionCreators.fetch},`,\n                    `${actionCreators.setValueFilters},`,\n                ])\n            ),\n            lines([\n                `${_.get(dataSourceAction, 'selectors.value')},`,\n                `${_.get(dataSourceAction, 'selectors.statsValue')},`,\n                `${_.get(dataSourceAction, 'selectors.filtersValue')},`,\n                `${_.get(dataSourceAction, 'selectors.fetchingValue')},`,\n            ]),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorSagaAction),\n                ({actionCreators}) => `${actionCreators.poorSagaAction},`\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.poorReducerAction),\n                ({actionCreators}) => `${actionCreators.poorReducerAction},`\n            ),\n            `} from 'pages/${pageName}/redux/duck';`,\n            `\\n`\n        ]);\n\n        return res;\n    }\n\n    const generateMapStateToProps = () => {\n        let res = lines([\n            `const mapStateToProps = state => ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({valueNames, selectors}) => lines([\n                    `${valueNames.value}: ${selectors.value}(state),`,\n                    `${valueNames.statsValue}: ${selectors.statsValue}(state),`,\n                    `${valueNames.filtersValue}: ${selectors.filtersValue}(state),`,\n                    `${valueNames.fetchingValue}: ${selectors.fetchingValue}(state),`,\n                    ``,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({valueNames, selectors}) => `${valueNames.value}: ${selectors.value}(state),`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateMapDispatchToProps = () => {\n        let res = lines([\n            `const mapDispatchToProps = ({`,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                ({ actionCreators}) => lines([\n                    `${actionCreators.fetch},`,\n                    `${actionCreators.setValueFilters},`,\n                ])\n            ),\n            ``,\n            ..._.map(\n                _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                ({ actionCreators}) => `${actionCreators.set},`\n            ), \n            `});`,\n        ]);\n\n        return res;\n    }\n\n    const generateClass = () => {\n        let res = lines([\n            `/**`,\n            ...(\n                moduleDescription\n                    ? _.map(moduleDescription.split('\\n'), (str) => ` * ${str}`)\n                    : []\n            ),\n            ` */`,\n            `@injectIntl`,\n            `@connect(mapStateToProps, mapDispatchToProps)`,\n            `export default class ${pageTableName} extends Component {`,\n            `constructor(props) {`,\n            `super(props);`,\n            `}`,\n            ``,\n            `render() {`,\n                `const {`,\n                ..._.map(\n                    _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.fetch),\n                    ({ valueNames }) => lines([\n                        `${valueNames.value},`,\n                        `${valueNames.fetchingValue},`,\n                    ])\n                ),\n                ``,\n                `${_.get(dataSourceAction, 'valueNames.statsValue')},`,\n                `${_.get(dataSourceAction, 'valueNames.filtersValue')},`,\n                `${_.get(dataSourceAction, 'actionCreators.setValueFilters')},`,\n                ``,\n                ..._.map(\n                    _.filter(actions, ({actionType}) => actionType == ACTION_TYPES.set),\n                    ({ valueNames }) => `${valueNames.value},`\n                ),\n                `} = this.props;`,\n                ``,\n                `const pagination = {`,\n                    `pageSize: 25,`,\n                    `size: \"large\",`,\n                    `total: Math.ceil(${_.get(dataSourceAction, 'valueNames.statsValue')}.totalCount / 25) * 25,`,\n                    `current: ${_.get(dataSourceAction, 'valueNames.filtersValue')}.page,`,\n                    `onChange: page => {`,\n                        `${_.get(dataSourceAction, 'actionCreators.setValueFilters')}({page})`,\n                    `},`,\n                `}`,\n                ``,\n                `return (`,\n                        `<div className={Styles.tableContainer}>`,\n                            `<Table`,\n                                `className={Styles.table}`,\n                                `dataSource={ ${_.get(dataSourceAction, 'valueNames.value')} }`,\n                                `columns={columnsConfig()}`,\n                                `pagination={pagination}`,\n                                `loading={ ${_.get(dataSourceAction, 'valueNames.fetchingValue')} }`,\n                                `rowKey={() => v4()}`,\n                                `bordered`,\n                            `/>`,\n                        `</div>`,\n                    `)`,\n                `}`,\n            `}`,\n        ]);\n\n        return res;\n    }\n\n    return {\n        generateImports,\n        generateMapStateToProps,\n        generateMapDispatchToProps,\n        generateClass,\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { lines } from 'utils';\n\n\n/**\n * This file created for generating config of a table component.\n */\nexport default (generationObject) => {\n    const { tableConfigs } = generationObject;\n\n    const generateTableConfigFile = () => {\n\n        return lines([\n            `// vendor`, \n            `import React from 'react';`, \n            `import { FormattedMessage } from 'react-intl';`, \n            `import _ from 'lodash';`, \n            `import moment from 'moment';`, \n            `import { DatePicker, InputNumber } from 'antd';`, \n            ``, \n            `//Proj`,\n            `import { Numeral } from 'commons';`, \n            ``, \n            `//Own`, \n            ``, \n            `//Choose width for each col, (100% in total or less than 100% if 'auto' is present)`, \n            `const defWidth = {`,\n            _.map(tableConfigs, ({tableConfigName, tableConfigWidth}) => `${tableConfigName}: '${tableConfigWidth}'`).join(\",\\n\"),\n            `}`, \n            ``,\n            `export function columnsConfig() {`, \n            _.map(tableConfigs, ({ tableConfigName, tableConfigDataIndex, tableConfigAlign, formattedMessage }) => {\n                return lines([\n                `    const ${tableConfigName} = {`, \n                `        title:     (${formattedMessage}),`, \n                `        width:     defWidth.${tableConfigName},`,\n                `        align:     '${tableConfigAlign}',`,\n                `        dataIndex: '${tableConfigDataIndex}',`, \n                `        key:       '${tableConfigName}',`,\n                `    };`\n                ]);\n            }).join(\"\\n\"),\n            ``,\n            `    return [`, \n            _.map(tableConfigs, ({tableConfigName}) => {\n                return lines([\n                    `        ${tableConfigName}`, \n                ]);\n            }).join(\",\\n\"),\n            `    ];`, \n            `}`, \n            ``\n        ]);\n    };\n\n    return {\n        generateTableConfigFile\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\n\n/**\n * This module created for generating styles of a table component. But there is no need for generating it, we can just take one and return it as a string.\n */\nexport default () => {\n\n    const generateTableStyleFile = () => {\n        return (`    \n.table {\n    min-width: 0 !important;\n    width: 100%;\n}\n\n.table :global(.ant-table-header) {\n    text-transform: uppercase;\n    min-width: 0 !important; /*IMPORTANT it solves antd table issue when scrolling is added*/\n    padding: 0;\n}\n\n.table :global(.ant-pagination) {\n    float: none;\n    justify-content: center;\n    display: flex;\n}\n\n.table :global(th) {\n    padding: 6px 4px 6px 4px !important; /*Remove bug: when text overflows, header shifts left*/\n}\n\n.tableContainer {\n    background-color: transparent;\n    margin: 0.1em 0.2em 2em 0.2em;\n}\n\n        `);\n    }\n\n    return {\n        generateTableStyleFile\n    };\n}","//vendor\nimport _ from 'lodash';\n\n/**\n * index.js file for exporting table from tables directory\n */\nexport default ({pageTableName}) => {\n\n    const generateTableIndexFile = () => {\n        return (`export { default as ${pageTableName} } from './${pageTableName}';`);\n    }\n\n    return {\n        generateTableIndexFile\n    };\n}","//vendor\nimport { constantCase, camelCase, capitalCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES, COMPONENT_TYPES } from 'globalConstants';\nimport { parseJsx } from 'utils';\n\n//own\nimport enricher from './enricher';\nimport duckGenerator from './duckGenerator';\nimport sagaGenerator from './sagaGenerator';\nimport pageGenerator from './pageGenerator';\nimport messagesGenerator from './messagesGenerator';\nimport stylesGenerator from './stylesGenerator';\n\n/**\n * \n * @param {*} params.moduleName \n * @param {*} params.actions  - Array of action objects\n * @example\n *  const actions = [\n *      {\n *          actionName: 'vehicles',\n *          actionType: ACTION_TYPES.fetch,\n *          actionFetchURL: undefined,\n *          actionInitValue: 'undefined',\n *      },\n *      {\n *          actionName: 'vehiclesFetching',\n *          actionType: ACTION_TYPES.set,\n *          actionInitValue: 'undefined',\n *      },\n *  ];\n */\nexport default (generationObject) => {\n    const enrichedGenerationObject = enricher(generationObject);\n    const { generationComponentType } = enrichedGenerationObject;\n\n    function generateDuckFile() {\n        const {\n            generateHeader,\n            generateConstants,\n            generateReducerInitState,\n            generateReducer,\n            generateSelectors,\n            generateActionCreators,\n        } = duckGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateHeader() + \"\\n\\n\"\n            + generateConstants() + \"\\n\"\n            + generateReducerInitState() + \"\\n\"\n            + generateReducer() + \"\\n\\n\"\n            + generateSelectors() + \"\\n\\n\"\n            + generateActionCreators() + \"\\n\";\n\n        return parseJsx(data);\n    }\n\n    function generateSagaFile() {\n        const {\n            generateImports,\n            generateSagas,\n            generateCommonSaga,\n        } = sagaGenerator(enrichedGenerationObject);\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateImports() + \"\\n\\n\"\n            + generateSagas() + \"\\n\"\n            + generateCommonSaga() + \"\\n\";\n\n        return parseJsx(data);\n    }\n\n    function generateStylesFile() {\n        const {\n            generateStyleFile,\n        } = stylesGenerator(enrichedGenerationObject);\n\n        let data = generateStyleFile();\n\n        return data;\n    }\n\n    /**\n     * Generates pages depending on selected page mode(poor page, modal or something else)\n     * @returns Object that contains string representation of different files based on generation mode\n     */\n    function generatePages() {\n        const {\n            generatePoorPage,\n\n            generateTablePage,\n            generateTable,\n            generateTableConfig,\n            generateTableStyles,\n            generateTablesIndexFile,\n        } = pageGenerator(enrichedGenerationObject);\n\n        let generatedPages = {};\n\n        //Return specific object for selected type of page\n        switch (generationComponentType) {\n            case COMPONENT_TYPES.poorPage:\n                generatedPages.poorPage = generatePoorPage();\n\n            case COMPONENT_TYPES.tablePage:\n                generatedPages.tablePage = generateTablePage();\n                generatedPages.table = generateTable();\n                generatedPages.tableConfig = generateTableConfig();\n                generatedPages.tableStyles = generateTableStyles();        \n                generatedPages.tablesIndexFile = generateTablesIndexFile();        \n        };\n\n        return generatedPages;\n    }\n\n    function generateMessagesFile() {\n        const {\n            generateMessagesFile\n        } = messagesGenerator(enrichedGenerationObject);\n\n        return generateMessagesFile();\n\n    }\n\n    return {\n        generateDuckFile,\n        generateSagaFile,\n        generateStylesFile,\n        generatePages,\n        generateMessagesFile,\n    };\n};","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from \"utils\";\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    const fetchActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.fetch)\n    const poorSagaActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.poorSagaAction)\n    const setActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.set)\n\n    function generateImports() {\n        let result = lines([\n            `// vendor`,\n            `import { call, put, all, take, select } from 'redux-saga/effects';`,\n            `import nprogress from 'nprogress';`,\n            `import _ from 'lodash';`,\n            `import moment from 'moment';`,\n            `import { notification } from 'antd';`,\n            ``,\n            `//proj`,\n            `import history from 'store/history';`,\n            `import book from 'routes/book';`,\n            `import { emitError } from 'core/ui/duck';`,\n            `import { fetchAPI } from 'utils';`,\n            ``,\n            `// own`,\n            `import {`,\n            ..._.map(fetchActions, ({constants}) => `${constants.fetch},`),\n            ``,\n            ..._.map(fetchActions, ({constants}) => `${constants.fetchSuccess},`),\n            ``,\n            ..._.map(poorSagaActions, ({constants}) => `${constants.poorSagaAction},`),\n            ``,\n            ..._.map(setActions, ({constants}) => `\\t${constants.set},`),\n            ``,\n            ``,\n            ..._.map(fetchActions, ({selectors}) => `${selectors.filtersValue},`),\n            ``,\n            ..._.map(fetchActions, ({actionCreators}) => `${actionCreators.setFetching},`),\n            ..._.map(fetchActions, ({actionCreators}) => `${actionCreators.fetchSuccess},`),\n            `} from './duck';`,\n            `\\n`,\n        ]);\n        return result;\n    }\n\n    function generateSagas() {\n        let result = _.map(actions, ({actionType, propertyName, selectors, constants, actionCreators, actionFetchURL, sagas, valueNames}) => {\n\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.fetch});`,\n                        ``,\n                            `yield put(${actionCreators.setFetching}(true));`,\n                            `const filters = yield select(${selectors.filtersValue});`,\n                        ``,\n                        `\\t\\t\\tconst response = yield call(fetchAPI, 'GET', \\`${actionFetchURL? actionFetchURL: \"\"}\\`, { filters });`,\n                        `const {${propertyName}, ${valueNames.statsValue}} = response;`,\n                        ``,\n                        `\\t\\t\\tyield put(${actionCreators.fetchSuccess}({${propertyName}, ${valueNames.statsValue}}));`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t} finally {`,\n                        `\\t\\t\\tyield put(${actionCreators.setFetching}(false));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}`,\n                        `\\n`\n                    ]);\n                case ACTION_TYPES.poorSagaAction:\n                    return lines([\n                        `export function* ${sagas.sagaName}() {`,\n                        `\\twhile (true) {`,\n                        `\\t\\ttry {`,\n                        `\\t\\t\\tyield take(${constants.poorSagaAction});`,\n                        `\\t\\t} catch (error) {`,\n                        `\\t\\t\\tyield put(emitError(error));`,\n                        `\\t\\t}`,\n                        `\\t}`,\n                        `}\\n`,\n                    ]);\n            }\n            \n        }).join(\"\");\n\n        return result;\n    }\n\n    function generateCommonSaga() {\n        let result = lines([\n            `export function* saga() {`,\n            `\\tyield all([`,\n\n            ..._.map(actions, ({actionType, sagas}) => {\n                switch (actionType) {\n                    case ACTION_TYPES.fetch:\n                    case ACTION_TYPES.poorSagaAction:\n                        return `\\t\\tcall(${sagas.sagaName}),`;\n                }\n                \n            }),\n\n            `\\t]);`,\n            `}`,\n        ]);\n\n        return result;\n    }\n\n    return {\n        generateImports,\n        generateSagas,\n        generateCommonSaga,\n    }\n};","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\n\n/**\n * Component styles\n */\nexport default () => {\n\n    const generateStyleFile = () => {\n        return (``);\n    }\n\n    return {\n        generateStyleFile\n    };\n}","//vendor\nimport _ from 'lodash';\n\n//project\nimport { ACTION_TYPES } from 'globalConstants';\nimport { lines } from 'utils';\n\n\n\n/**\n * This module generates messages.json file, it contains all the translations of a component.\n * Those translations can be used later in other places.\n */\nexport default (generationObject) => {\n    const { translations } = generationObject;\n\n    const generateMessagesFile = () => {\n        return lines([\n            `{`,\n            `\\t\"en\": {`,\n            _.map(translations, ({ constantEn }) => `\\t\\t${constantEn}`).join(',\\n'),\n            `\\t},`,\n\n            `\\t\"ru\": {`,\n            _.map(translations, ({ constantRu }) => `\\t\\t${constantRu}`).join(',\\n'),\n            `\\t},`,\n\n            `\\t\"uk\": {`,\n            _.map(translations, ({ constantUk }) => `\\t\\t${constantUk}`).join(',\\n'),\n            `\\t}`,\n            `}`,\n        ]);\n    }\n\n    return {\n        generateMessagesFile\n    };\n}","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select, Popover, Row, Col, Checkbox } from 'antd';\nimport { DeleteTwoTone, SettingOutlined } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\nimport {\n    setActions,\n    selectActions,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\n\nconst Option = Select.Option;\n\n\n\n/**\n * Each action has its additional fields we have to render\n * @param {*} params.key - action identifier\n * @param {*} params.actionType - type of an action\n */\nconst renderAdditionalFields = ({key, actionType, actionFetchURL }, options) => {\n    const { changeActionProps } = options;\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            return (\n                <div>\n                    <Input\n                        value={actionFetchURL}\n                        className=\"input\"\n                        placeholder=\"Fetching URL\"\n                        onChange={(e) => changeActionProps(key, {actionFetchURL: e.target.value})}\n                    />\n                </div>\n            )\n        case ACTION_TYPES.set:\n            return (\n                <div>\n\n                </div>\n            )\n        default:\n            return undefined;\n    }\n\n}\n/**\n * Each action has its additional settings we have to render components to make it possible to edit them\n * @param {*} params.key - action identifier\n * @param {*} params.actionType - type of an action\n * @param {*} options - Additional functions\n */\nconst renderAdditionalSettings = ({key, actionType, actionInitValue, isDataSource}, options) => {\n    const { changeActionProps } = options;\n\n    const initValueSelect = (\n        <div>\n            <Row>\n                <Col span={12}>Initial value: </Col>\n                <Col span={12}>\n                    <Select\n                        value={actionInitValue}\n                        className=\"select\"\n                        placeholder=\"Select init value\"\n                        onChange={(initValue) => changeActionProps(key, {actionInitValue: initValue})}\n                    >\n                        {_.map(DEF_INIT_VALUES, (value, key) => {\n                            return (\n                                <Option value={value}>{sentenceCase(key)}</Option>\n                            )\n                        })}\n                    </Select>\n                </Col>\n            </Row>\n        </div>\n    );\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            return (\n                <div>\n                    {initValueSelect}\n                    <Row>\n                        <Col span={12}>Make data source: </Col>\n                        <Col span={12}>\n                            <Checkbox checked={isDataSource} onChange={(e) => changeActionProps(key, {isDataSource: e.target.checked})} />\n                        </Col>\n                    </Row>\n                </div>\n            )\n        case ACTION_TYPES.set:\n            return (\n                <div>\n                    {initValueSelect}\n                </div>\n            );\n        default:\n            return undefined;\n    }\n\n}\n\nexport {\n    renderAdditionalFields,\n    renderAdditionalSettings,\n};","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select, Popover } from 'antd';\nimport { DeleteTwoTone, SettingOutlined } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\nimport {\n    setActions,\n    selectActions,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport { renderAdditionalFields, renderAdditionalSettings } from \"./actionsAdditionalFields\";\nimport './styles.css';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n\nconst mapStateToProps = state => ({\n    actions: selectActions(state),\n});\n\nconst mapDispatchToProps = {\n    setActions,\n};\n\n\n/**\n * Generate array which represents one action. This action contains basic variables gained from the user.\n * \n * @property { Function(actions) } actionsChanged - callback, called when actions are changed\n */\nclass ActionsArray extends React.Component {\n    /**\n     * Used to update actions.\n     * @param {*} params.actions - new actions to replace old with \n     */\n    updateActions = ({ actions }) => {\n        const { actionsChanged, setActions } = this.props;\n\n        setActions( actions );\n\n        // this.setState({actions}, () => actionsChanged && actionsChanged(_.get(this, 'state.actions')))\n    }\n\n    /**\n     * Generate new action with initial values setup\n     */\n    createNewAction = () => {\n        const { actions } = this.props;\n\n        this.updateActions({\n            actions: [\n                ...actions,\n                {\n                    actionName: \"test\",\n                    actionType: ACTION_TYPES.fetch,\n                    actionFetchURL: undefined,\n                    actionInitValue: DEF_INIT_VALUES.undefinedValue,\n                    isDataSource: false,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteAction = (key) => {\n        const { actions } = this.props;\n\n        this.updateActions({\n            actions: [\n                ..._.filter(actions, (item) => item.key != key),\n            ]\n        })\n    }\n\n    /**\n     * When changed input value of an action.\n     * Values will be replaced only if they are provided\n     * @param {*} key - uuid\n     * @param {*} params - action\n     * @param {*} params.isDataSource - if provided  only one action can be data source, other will becabe plain actions(isDataSource = undefined)\n     */\n    changeActionProps = (key, options) => {\n        const { actions } = this.props;\n        const { isDataSource } = options;\n\n        const updatedActions = _.map(actions, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    ...options,\n                    isDataSource: (isDataSource)? isDataSource: item.isDataSource\n                }\n            else\n                return {\n                    ...item,\n                    isDataSource: (isDataSource)? false: item.isDataSource, //Remove other values\n                };\n        })\n\n        this.updateActions({\n            actions: updatedActions\n        })\n    } \n\n    render() {\n        const { actions } = this.props;\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={actions}\n                    locale={{emptyText: (<div>No actions</div>)}}\n                    header={\n                        <div>\n                            <Button onClick={() => this.createNewAction()} type=\"primary\">Create a new one</Button>\n                        </div>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                (\n                                    <Popover\n                                        content={\n                                            <div className={\"popoverContent\"}>\n                                                {renderAdditionalSettings(item, {changeActionProps: this.changeActionProps})}\n                                            </div>\n                                        }\n                                        title=\"Additional settings\"\n                                        trigger=\"click\"\n                                    >\n                                        <Button onClick={() => console.log(\"OK\")} type=\"primary\"><SettingOutlined /></Button>\n                                    </Popover>\n                                ),\n                                (\n                                    <Button onClick={() => this.deleteAction(item.key)}><DeleteTwoTone /></Button>\n                                ),\n                            ]}\n                            key={item.key}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'actionName')}\n                                    className=\"input\"\n                                    onChange={(e) => this.changeActionProps(item.key, {actionName: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'actionType')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeActionProps(item.key, {actionType: key})}\n                                >\n                                    {_.map(ACTION_TYPES, (value, key) => (<Option value={value}>{constantCase(key)}</Option>))}\n                                </Select>\n\n                                <div>\n                                    {renderAdditionalFields(item, {changeActionProps: this.changeActionProps})}\n                                </div>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionsArray);","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select, Popover, Row, Col, Checkbox } from 'antd';\nimport { DeleteTwoTone, SettingOutlined } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\nimport {\n    setActions,\n    selectActions,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\n\nconst Option = Select.Option;\n\n/**\n * Each action has its additional settings we have to render components to make it possible to edit them\n * @param {*} params.key - action identifier\n * @param {*} params.actionType - type of an action\n * @param {*} options - Additional functions\n */\nconst renderAdditionalSettings = ({key, isPageTitle}, options) => {\n    const { changeTranslation } = options;\n\n    return (\n        <div>\n            <Row>\n                <Col span={12}>Make page title: </Col>\n                <Col span={12}>\n                    <Checkbox checked={isPageTitle} onChange={(e) => changeTranslation(key, {isPageTitle: e.target.checked})} />\n                </Col>\n            </Row>\n        </div>\n    )\n\n}\n\nexport {\n    renderAdditionalSettings,\n};","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select, Popover, Row, Col } from 'antd';\nimport { DeleteTwoTone, SettingOutlined } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\nimport { renderAdditionalSettings } from \"./translationsAdditionalFields\";\nimport {\n    setTranslations,\n    selectTranslations,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\n\n\nconst mapStateToProps = state => ({\n    translations: selectTranslations(state),\n});\n\nconst mapDispatchToProps = {\n    setTranslations,\n};\n\n\n/**\n * Generate array of translations. Used to generate translation files\n * \n */\nclass ActionsArray extends React.Component {\n    /**\n     * Used to update translations.\n     * @param {*} params.translations - new translations to replace old with \n     */\n    updateTranslations = ({ translations }) => {\n        const { setTranslations } = this.props;\n\n        setTranslations( translations );\n    }\n\n    /**\n     * Generate new translation with initial values setup\n     */\n    createTranslation = () => {\n        const { translations } = this.props;\n\n        this.updateTranslations({\n            translations: [\n                ...translations,\n                {\n                    translationName: \"test\",\n                    translationEn: undefined,\n                    translationUk: undefined,\n                    translationRu: undefined,\n                    isPageTitle: false,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteTranslation = (key) => {\n        const { translations } = this.props;\n\n        this.updateTranslations({\n            translations: [\n                ..._.filter(translations, (item) => item.key != key),\n            ]\n        })\n    }\n    /**\n     * Change value of a translation object.\n     * Values will be replaced only if they were provided.\n     * @param {*} key - uuid\n     * @param {*} params - translation\n     */\n    changeTranslation = (key, options) => {\n        const { translations } = this.props;\n        const { isPageTitle } = options;\n\n        const updatedTranslations = _.map(translations, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    ...options,\n                }\n            else\n                return {\n                    ...item,\n                    isPageTitle: (\"isPageTitle\" in options)\n                        ? false\n                        : item.isPageTitle\n                };\n        })\n\n        this.updateTranslations({\n            translations: updatedTranslations\n        })\n    } \n\n\n    render() {\n        const { translations } = this.props;\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={translations}\n                    locale={{emptyText: (<div>No translations</div>)}}\n                    header={\n                        <Button onClick={() => this.createTranslation()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                (\n                                    <Popover\n                                        content={\n                                            <div className={\"popoverContent\"}>\n                                                {renderAdditionalSettings(item, {changeTranslation: this.changeTranslation})}\n                                            </div>\n                                        }\n                                        title=\"Additional settings\"\n                                        trigger=\"click\"\n                                    >\n                                        <Button onClick={() => console.log(\"OK\")} type=\"primary\"><SettingOutlined /></Button>\n                                    </Popover>\n                                ),\n                                (\n                                    <Button onClick={() => this.deleteTranslation(item.key)}><DeleteTwoTone /></Button>\n                                )\n                            ]}\n                            key={item.key}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'translationName')}\n                                    placeholder=\"Name\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationName: e.target.value})}\n                                />\n                                <Input\n                                    value={_.get(item, 'translationEn')}\n                                    placeholder=\"English\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationEn: e.target.value})}\n                                />\n                                <Input\n                                    value={_.get(item, 'translationUk')}\n                                    placeholder=\"Українська\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationUk: e.target.value})}\n                                />\n                                <Input\n                                    value={_.get(item, 'translationRu')}\n                                    placeholder=\"Русский\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTranslation(item.key, {translationRu: e.target.value})}\n                                />\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionsArray);","\n/** Align properties of a table cell of ant.design table */\nconst ALIGN = Object.freeze({\n    left: 'left',\n    right: 'right',\n    center: 'center',\n});\n\nexport {\n    ALIGN,\n}","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { connect } from \"react-redux\";\n\n//proj\nimport {\n    setTableConfigs,\n    selectTableConfigs,\n    selectTranslations,\n} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n//own\nimport './styles.css';\nimport { ALIGN } from './constants';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n\nconst mapStateToProps = state => ({\n    tableConfigs: selectTableConfigs(state),\n    translations: selectTranslations(state),\n});\n\nconst mapDispatchToProps = {\n    setTableConfigs,\n};\n\n\n/**\n * Generate array of table configurations. Used to generate tables and their configs.\n */\nclass TableConfigurationsArray extends React.Component {\n\n\n    updateTableConfigs = ({ tableConfigs }) => {\n        const { setTableConfigs } = this.props;\n\n        setTableConfigs( tableConfigs );\n    }\n\n    createTableConfig = () => {\n        const { tableConfigs } = this.props;\n\n        this.updateTableConfigs({\n            tableConfigs: [\n                ...tableConfigs,\n                {\n                    tableConfigTranslationKey: undefined,\n                    tableConfigName: \"test\",\n                    tableConfigWidth: undefined,\n                    tableConfigDataIndex: undefined,\n                    tableConfigAlign: ALIGN.right,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteTableConfig = (key) => {\n        const { tableConfigs } = this.props;\n\n        this.updateTableConfigs({\n            tableConfigs: [\n                ..._.filter(tableConfigs, (item) => item.key != key),\n            ]\n        })\n    }\n\n    changeTableConfig = (key, options) => {\n        const { tableConfigs } = this.props;\n\n        const updatedTableConfigs = _.map(tableConfigs, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    tableConfigTranslationKey: (\"tableConfigTranslationKey\" in options)\n                        ? options.tableConfigTranslationKey\n                        : item.tableConfigTranslationKey,\n\n                    tableConfigName: (\"tableConfigName\" in options)\n                        ? options.tableConfigName\n                        : item.tableConfigName,\n\n                    tableConfigWidth: (\"tableConfigWidth\" in options)\n                        ? options.tableConfigWidth\n                        : item.tableConfigWidth,\n\n                    tableConfigDataIndex: (\"tableConfigDataIndex\" in options)\n                        ? options.tableConfigDataIndex\n                        : item.tableConfigDataIndex,\n\n                    tableConfigAlign: (\"tableConfigAlign\" in options)\n                        ? options.tableConfigAlign\n                        : item.tableConfigAlign,\n                }\n            else\n                return item;\n        })\n\n        this.updateTableConfigs({\n            tableConfigs: updatedTableConfigs\n        })\n    } \n\n\n    render() {\n        const { tableConfigs, translations } = this.props;\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={tableConfigs}\n                    locale={{emptyText: (<div>No table configs</div>)}}\n                    header={\n                        <Button onClick={() => this.createTableConfig()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteTableConfig(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                            key={item.key}\n                        >\n                            <div className={\"item\"}>\n                                <Select\n                                    value={_.get(item, 'tableConfigTranslationKey')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeTableConfig(item.key, {tableConfigTranslationKey: key})}\n                                >\n                                    {_.map(translations, (translation) => (<Option value={translation.key}>{_.get(translation, 'translationName')}</Option>))}\n                                </Select>\n                                \n                                <Input\n                                    value={_.get(item, 'tableConfigName')}\n                                    placeholder=\"Name\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTableConfig(item.key, {tableConfigName: e.target.value})}\n                                />\n\n                                <Input\n                                    value={_.get(item, 'tableConfigWidth')}\n                                    placeholder=\"Width\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTableConfig(item.key, {tableConfigWidth: e.target.value})}\n                                />\n\n                                <Input\n                                    value={_.get(item, 'tableConfigDataIndex')}\n                                    placeholder=\"Data index\"\n                                    className=\"input\"\n                                    onChange={(e) => this.changeTableConfig(item.key, {tableConfigDataIndex: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'tableConfigAlign')}\n                                    className=\"select\"\n                                    onChange={(align) => this.changeTableConfig(item.key, {tableConfigAlign: align})}\n                                >\n                                    {_.map(ALIGN, (align) => (<Option value={align}>{align}</Option>))}\n                                </Select>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableConfigurationsArray);","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view'\nimport { pascalCase, camelCase } from 'change-case';\nimport { connect } from \"react-redux\";\n\n//proj\nimport generators from \"generators\";\nimport { downloadZipFile } from 'utils';\nimport { COMPONENT_TYPES, TYPES_OF_FILES } from 'globalConstants';\nimport enricher from 'generators/enricher';\n\n//own\nimport \"./styles.css\";\nimport {\n    ActionsArray,\n    TranslationsArray,\n    TableConfigurationsArray,\n} from './components';\nimport {\n    setModuleName,\n    setModuleDescription,\n    setGenerationComponentType,\n\n    selectModuleName,\n    selectModuleDescription,\n    selectGenerationComponentType,\n    selectActions,\n    selectTranslations,\n    selectTableConfigs,\n} from './redux/duck';\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\nconst RadioGroup = Radio.Group;\nconst TextArea = Input.TextArea;\n\n\nconst mapStateToProps = state => ({\n    moduleName: selectModuleName(state),\n    moduleDescription: selectModuleDescription(state),\n    generationComponentType: selectGenerationComponentType(state),\n    actions: selectActions(state),\n    translations: selectTranslations(state),\n    tableConfigs: selectTableConfigs(state),\n});\n\nconst mapDispatchToProps = {\n    setModuleName,\n    setModuleDescription,\n    setGenerationComponentType,\n};\n\nclass FrontendBoilerplateGeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    onGenerateFiles = () => {\n        const { moduleName, generationComponentType, moduleDescription, actions, translations, tableConfigs } = this.props;\n\n        if(!moduleName || _.isEmpty(actions)) {\n            notification.error({message: \"Not enough information provided!\"});\n            return;\n        }\n\n        const generationObject = { moduleName, generationComponentType, moduleDescription, actions, translations, tableConfigs };\n\n        const { generateDuckFile, generateSagaFile, generatePages, generateMessagesFile, generateStylesFile } = generators(generationObject);\n\n        let fileStructure = undefined;\n        const pages = generatePages();\n        const enrichedValues = enricher(generationObject);\n\n        let componentName = \"\";\n        switch (generationComponentType) {\n            case COMPONENT_TYPES.poorPage:\n                componentName = enrichedValues.pageName;\n                fileStructure = [\n                    {\n                        type: TYPES_OF_FILES.directory,\n                        name: `${componentName}`,\n                        content: [\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'redux',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'duck',\n                                        extension: '.js',\n                                        content: generateDuckFile(),\n                                    },\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'saga',\n                                        extension: '.js',\n                                        content: generateSagaFile(),\n                                    },\n                                ]\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'index',\n                                extension: '.js',\n                                content: pages.poorPage,\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'styles',\n                                extension: '.m.css',\n                                content: generateStylesFile(),\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'messages',\n                                extension: '.json',\n                                content: generateMessagesFile(),\n                            },\n                        ]\n                    }\n                ];\n                break;\n            case COMPONENT_TYPES.tablePage:\n                componentName = enrichedValues.pageName;\n                fileStructure = [\n                    {\n                        type: TYPES_OF_FILES.directory,\n                        name: `${componentName}`,\n                        content: [\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'components',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.directory,\n                                        name: 'tables',\n                                        content: [\n                                            {\n                                                type: TYPES_OF_FILES.directory,\n                                                name: enrichedValues.pageTableName,\n                                                content: [\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'index',\n                                                        extension: '.js',\n                                                        content: pages.table,\n                                                    },\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'styles',\n                                                        extension: '.m.css',\n                                                        content: pages.tableStyles,\n                                                    },\n                                                    {\n                                                        type: TYPES_OF_FILES.file,\n                                                        name: 'config',\n                                                        extension: '.js',\n                                                        content: pages.tableConfig,\n                                                    },\n                                                ],\n                                            },\n                                            {\n                                                type: TYPES_OF_FILES.file,\n                                                name: 'index',\n                                                extension: '.js',\n                                                content: pages.tablesIndexFile,\n                                            }\n                                        ],\n                                    }\n                                ],\n                            },\n                            {\n                                type: TYPES_OF_FILES.directory,\n                                name: 'redux',\n                                content: [\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'duck',\n                                        extension: '.js',\n                                        content: generateDuckFile(),\n                                    },\n                                    {\n                                        type: TYPES_OF_FILES.file,\n                                        name: 'saga',\n                                        extension: '.js',\n                                        content: generateSagaFile(),\n                                    },\n                                ]\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'index',\n                                extension: '.js',\n                                content: pages.tablePage,\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'styles',\n                                extension: '.m.css',\n                                content: generateStylesFile(),\n                            },\n                            {\n                                type: TYPES_OF_FILES.file,\n                                name: 'messages',\n                                extension: '.json',\n                                content: generateMessagesFile(),\n                            },\n                        ]\n                    }\n                ];\n                break;\n            case COMPONENT_TYPES.modal:\n                componentName = pascalCase(`${moduleName} modal`);\n                break;\n        }\n        \n        downloadZipFile(fileStructure);\n\n        notification.info({\n            message: (\n                <div>\n                    <div>{`Module: ${moduleName}`}</div>\n                </div>\n            )\n        });\n    }\n\n    render() {\n        const {\n            actions,\n            moduleName,\n            moduleDescription,\n            generationComponentType,\n            translations,\n            tableConfigs,\n\n            setModuleName,\n            setModuleDescription,\n            setGenerationComponentType,\n        } = this.props;\n        \n        \n        const generationObject = { moduleName, generationComponentType, moduleDescription, actions, translations, tableConfigs };\n        const enrichedValues = enricher(generationObject);\n        const parentComponentName = (enrichedValues.generationComponentType == COMPONENT_TYPES.poorPage || enrichedValues.generationComponentType == COMPONENT_TYPES.tablePage)? camelCase(enrichedValues.pageName): camelCase(enrichedValues.modalName);\n\n        return (\n            <div className=\"mainConst\">\n                <Button className=\"generateButton\" onClick={() => this.onGenerateFiles()}>Generate</Button>\n                <div style={{width: '90vw'}}>\n                    <p style={{width: '90vw', textAlign: 'left', fontSize: '0.6em'}}>\n                        Connect messages: {`import ${ pascalCase(parentComponentName) } from 'pages/${pascalCase(parentComponentName)}/messages';`}\n                        <br />\n                        Connect saga: {`import { saga as ${ parentComponentName }Saga } from 'pages/${pascalCase(parentComponentName)}/redux/saga';`}\n                        <br />\n                        Connect duck: {`import ${ parentComponentName }Reducer, {moduleName as ${parentComponentName}Module} from 'pages/${pascalCase(parentComponentName)}/redux/duck';`}\n                    </p>\n                </div>\n                <Collapse className=\"collapse\" defaultActiveKey={['settings']}>\n                    <Panel header=\"Settings\" key=\"settings\">\n                        <div className=\"settingsContainer\">\n                            <Input\n                                placeholder=\"Module name\"\n                                value={moduleName}\n                                onChange={(e) => setModuleName(e.target.value)}\n                            />\n\n                            <TextArea\n                                placeholder=\"Module description(comment)\"\n                                rows={2}\n                                className=\"textArea\"\n                                onChange={(e) => setModuleDescription(e.target.value)}\n                            />\n\n                            <div className=\"radioCont\">\n                                Module type:\n                                <br /> \n                                <RadioGroup\n                                    value={generationComponentType}\n                                    onChange={(e) => setGenerationComponentType(e.target.value)}\n                                >\n                                    <Radio value={COMPONENT_TYPES.poorPage}>Poor page</Radio>\n                                    <Radio value={COMPONENT_TYPES.tablePage}>Table page</Radio>\n                                    <Radio value={COMPONENT_TYPES.modal}>Modal</Radio>\n                                </RadioGroup>\n                            </div>\n                        </div>\n                    </Panel>\n\n                    <Panel header=\"Translations\" key=\"translations\">\n                        <TranslationsArray />\n                    </Panel>\n\n                    <Panel header=\"Table configuration\" key=\"tableConfigs\">\n                        <TableConfigurationsArray />\n                    </Panel>\n                    \n                    <Panel header=\"Create actions\" key=\"actions\">\n                        <div className=\"settingsContainer\">\n                            <Tabs className=\"tabs\" tabPosition=\"top\">\n                                <TabPane tab=\"Actions generator\" key=\"1\">\n                                    <ActionsArray />\n                                </TabPane>\n                                <TabPane tab=\"Input\" key=\"2\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                        />\n                                    </div>\n                                </TabPane>\n                                <TabPane tab=\"Generation object\" key=\"3\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={enrichedValues}\n                                        />\n                                    </div>\n                                </TabPane>\n                            </Tabs>\n                        </div>\n                    </Panel>\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FrontendBoilerplateGeneratorPage);","//vendor\nimport React from 'react';\nimport _ from 'lodash';\n\n//own\nimport \"./styles.css\";\n\n/**\n * Home page, contains basic information about the project.\n */\nexport default class Home extends React.Component {\n    render() {\n\n        return (\n            <div>\n                <p>\n                    This project is supposed to reduce boilerplate by providing tool for auto generating code patterns.\n                    This program can generate redux files for now.\n                </p>\n                <p>\n                    To navigate hover black box on the top left corner.\n                </p>\n            </div>\n        );\n    }\n}","// vendor\nimport React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router';\n\n// proj\nimport {\n    FrontendBoilerplateGeneratorPage,\n    Home,\n } from 'pages';\n\nimport book from './book';\n\n/**\n * All those components will be available by users without authentication\n */\nexport default class Public extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route\n                    exact\n                    component={ Home }\n                    path={ book.home }\n                />\n                <Route\n                    exact\n                    render={ props => <FrontendBoilerplateGeneratorPage { ...props } /> }\n                    path={ book.frontendBoilerplateGenerator }\n                />\n\n                <Redirect to={ book.home } /> {/*Redirect to the default page*/}\n            </Switch>\n        );\n    }\n}\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;","// vendor\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport thunk from 'redux-thunk';\n\n// proj\nimport history from './history';\n\nconst routerMiddleware = createRouterMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [ thunk, sagaMiddleware, routerMiddleware ];\n\n/** redux-logger imported inside if statement to prevent it from being injected into a bundle */\nif (/*__LOCAL__ || __DEV__*/ true) { //TODO Create .env\n    const { createLogger } = require(\"redux-logger\");\n\n    const logger = createLogger({\n        duration:  true,\n        timestamp: true,\n        collapsed: true,\n        diff:      true,\n        colors:    {\n            title:     () => 'deepskyblue',\n            prevState: () => 'dodgerblue',\n            action:    () => 'greenyellow',\n            nextState: () => 'OliveDrab',\n            error:     () => 'firebrick',\n        },\n    });\n\n    middleware.push(logger);\n}\n\nexport { sagaMiddleware, middleware };\n","// Core\nimport { compose } from 'redux'; // Used to compose some other components to enhance store usability, docs: https://redux.js.org/api/compose\n\n/**\n * In development mode add devtools for redux, it is useful for debugging\n * @returns Enhanced compose function\n */\nexport const composeEnhancers = () => {\n    const dev = process.env.NODE_ENV === 'development';\n\n    const devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\n    return devtools && dev ? devtools : compose;\n};\n","// vendor\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { persistReducer } from 'redux-persist';\nimport { default as persistStorage } from 'redux-persist/lib/storage'; // defaults to localStorage for web and AsyncStorage for react-native\nimport { LOCATION_CHANGE } from 'connected-react-router';\nimport _ from 'lodash';\n\n// proj\n\nimport frontendBoilerplateGeneratorPageReducer, {moduleName as frontendBoilerplateGeneratorPageModule} from 'pages/FrontendBoilerplateGeneratorPage/redux/duck';\n\n// own\nimport history from './history';\n\nexport const persistConfig = {\n    key:       'persistedStore',\n    storage:   persistStorage,\n    whitelist: [\n        frontendBoilerplateGeneratorPageModule,\n    ],\n};\n\n/** Persisted state will no change after reloading of the page */\nconst persistedState = {\n    // [ frontendBoilerplateGeneratorPageModule ]:   frontendBoilerplateGeneratorPageReducer,\n    router:                        connectRouter(history),\n};\n\n/** There should be placed object that have storage that will be dropped after reload */\nconst appState = {\n    [ frontendBoilerplateGeneratorPageModule ]:   frontendBoilerplateGeneratorPageReducer,\n};\n\nconst appReducer = combineReducers({ ...persistedState, ...appState });\n\nconst reducer = (state, action) => {\n    const { type, payload } = action;\n    let resetedState = null;\n\n    if (\n        type === LOCATION_CHANGE &&\n        _.get(payload, 'location.pathname') !==\n            _.get(state, 'router.location.pathname')\n    ) {\n        resetedState = Object.keys(persistedState).reduce(\n            (resetedState, moduleName) => {\n                resetedState[ moduleName ] = state[ moduleName ];\n\n                return resetedState;\n            },\n            {},\n        );\n    }\n\n    return appReducer(resetedState || state, action);\n};\n\nconst rootReducer = persistReducer(persistConfig, (state, action) => {\n    return reducer(state, action);\n});\n\nexport default rootReducer;\n","// vendor\nimport { call, put, all, take, select } from 'redux-saga/effects';\nimport _ from 'lodash';\n\n//proj\n\n// own\nimport {\n    fetchVehiclesSuccess,\n    fetchVehicleOrdersSuccess,\n\n    setFetchingVehicleOrders,\n    setFetchingVehicles,\n\n    selectSort,\n    selectFilters,\n    selectExpandedVehicleId,\n\n    FETCH_VEHICLES,\n    FETCH_VEHICLE_ORDERS,\n    selectVehicleOrdersSort,\n\n} from './duck';\n// export function* fetchVehicleOrdersSaga() {\n//     while (true) {\n//         try {\n//             yield take(FETCH_VEHICLE_ORDERS);\n\n//             yield put(setFetchingVehicleOrders(true));\n\n//             const vehicleId = yield select(selectExpandedVehicleId);\n\n//             const sort = yield select(selectVehicleOrdersSort);\n\n//             yield nprogress.start();\n\n//             const {orders, stats} = yield call(fetchAPI, 'GET', `orders/vehicle/${vehicleId}`, {page: sort.page});\n\n//             yield put(fetchVehicleOrdersSuccess({orders, stats}));\n//         } catch (error) {\n//             yield put(emitError(error));\n//         } finally {\n//             yield nprogress.done();\n//             yield put(setFetchingVehicleOrders(false));\n//         }\n//     }\n// }\n\n\nexport function* saga() {\n    yield all([\n        // call(fetchVehiclesSaga),\n        // call(fetchVehicleOrdersSaga),\n    ]);\n}\n","// vendor\nimport { all } from 'redux-saga/effects';\n\n//own\n\nimport { saga as frontendBoilerplateGeneratorPage } from 'pages/FrontendBoilerplateGeneratorPage/redux/saga';\n\nexport default function* rootSaga() {\n    yield all([\n        frontendBoilerplateGeneratorPage(),\n    ]);\n}","// vendor\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\n\n// own\nimport { middleware, sagaMiddleware } from './middleware';\nimport { composeEnhancers } from './enhancers';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers()(applyMiddleware(...middleware)),\n);\n\nexport const persistor = persistStore(store);\n\nexport default store;\n\nsagaMiddleware.run(rootSaga);\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//vendor\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\n\n//proj\n\n//own\nimport \"./styles.css\";\n\n/**\n * Central navigation file, contains controls and commonly used stuff.\n * To configure available nav buttons visit config.js file.\n * \n * @property { * } label - Button text\n * @property { * } path - internal path to the page\n */\nexport default class NavigationButton extends React.Component {\n    render() {\n        const {\n            label,\n            path,\n        } = this.props;\n\n        return (\n            <div>\n                <Link\n                    to={path}\n                >\n                    <div className=\"menuButton\">\n                        {label}\n                    </div>\n                </Link>\n            </div>\n        );\n    }\n}","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport logo from \"./logo.svg\";\nimport { v4 } from 'uuid';\n\n//proj\n\n//own\nimport \"./styles.css\";\nimport config from './config';\nimport NavigationButton from './components/NavigationButton';\n\n/**\n * Central navigation file, contains controls and commonly used stuff.\n * To configure available nav buttons visit config.js file.\n */\nexport default class Navigation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.navigationConfig = config();\n    }\n\n    render() {\n        const { children } = this.props;\n\n        return (\n            <div className=\"mainCont\">\n                <header className=\"header\">\n                    <img src={logo} className=\"logo\" alt=\"logo\" />\n                    <div className=\"title\">\n                        Boilerplate reducer\n                    </div>\n                </header>\n                <div className=\"sideMenu\">\n                    <div className=\"sideMenuContent\">\n                        {this.navigationConfig && _.map(this.navigationConfig, ({title, path}) => {\n                            return (\n                                <NavigationButton\n                                    label={title}\n                                    path={path}\n                                    key={v4()}\n                                />\n                            );\n                        })}\n                    </div>\n                </div>\n                <div className=\"children\">\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}","//proj\nimport book from \"routes/book\";\n\n/**\n * Configure each navigation button\n */\nexport default () => {\n\n    return [\n        {\n            title: \"HOME\",\n            path: book.home\n        },\n        {\n            title: \"FRONT GENERATOR\",\n            path: book.frontendBoilerplateGenerator,\n        },\n        {\n            title: \"BACK GENERATOR\",\n            path: book.backendBoilerplateGenerator,\n        },\n    ];\n}","//vedor\nimport 'antd/dist/antd.css'; //Styles for all antd components, if you remove this - antd will not work\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ConnectedRouter } from 'connected-react-router';\n\n//proj\nimport store, { persistor } from './store/store';\nimport history from './store/history';\nimport Routes from './routes/Main';\nimport { Navigation } from 'UI';\n\n//own\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Provider store={ store }>\n                <PersistGate loading={ null } persistor={ persistor }>\n\t\t\t\t\t<ConnectedRouter history={ history }>\n\t\t\t\t\t\t<div className=\"App\">\n                            <Navigation>\n\t\t\t\t\t\t    \t<Routes />\n                            </Navigation>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ConnectedRouter>\n                </PersistGate>\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n","//proj\nimport { COMPONENT_TYPES, TYPES_OF_FILES } from 'globalConstants';\n\n/** Constants **/\n\nexport const moduleName = 'frontendBoilerplateGeneratorPage';\nconst prefix = `cpb/${moduleName}`;\n\nexport const SET_MODULE_NAME = `${prefix}/SET_MODULE_NAME`;\nexport const SET_MODULE_DESCRIPTION = `${prefix}/SET_MODULE_DESCRIPTION`;\nexport const SET_GENERATION_COMPONENT_TYPE = `${prefix}/SET_GENERATION_COMPONENT_TYPE`;\n\nexport const SET_ACTIONS = `${prefix}/SET_ACTIONS`;\nexport const SET_TRANSLATIONS = `${prefix}/SET_TRANSLATIONS`;\nexport const SET_TABLE_CONFIGS = `${prefix}/SET_TABLE_CONFIGS`;\n\n/** Reducer **/\nconst ReducerState = {\n    moduleName: \"test\",\n    moduleDescription: undefined,\n    generationComponentType: COMPONENT_TYPES.poorPage,\n    actions: [],\n    translations: [],\n    tableConfigs: [],\n};\n\nexport default function reducer(state = ReducerState, action) {\n    const { type, payload } = action;\n    switch (type) {\n        case SET_MODULE_NAME:\n            return {\n                ...state,\n                moduleName: payload\n            };\n\n        case SET_MODULE_DESCRIPTION:\n            return {\n                ...state,\n                moduleDescription: payload\n            };\n\n        case SET_GENERATION_COMPONENT_TYPE:\n            return {\n                ...state, \n                generationComponentType: payload\n            };\n\n        case SET_ACTIONS:\n\t\t\treturn {\n\t\t\t\t...state, \n\t\t\t\tactions: payload\n\t\t\t};\n\n        case SET_TRANSLATIONS:\n            return {\n                ...state, \n                translations: payload\n            };\n        \n        case SET_TABLE_CONFIGS:\n\t\t\treturn {\n\t\t\t\t...state, \n\t\t\t\ttableConfigs: payload\n\t\t\t};\n\n        default: return state;\n    }\n}\n\n/** Selectors **/\n\nexport const selectModuleName = state => state[ moduleName ].moduleName;\nexport const selectModuleDescription = state => state[ moduleName ].moduleDescription;\nexport const selectGenerationComponentType = state => state[ moduleName ].generationComponentType;\n\nexport const selectActions = state => state[ moduleName ].actions;\nexport const selectTranslations = state => state[ moduleName ].translations;\nexport const selectTableConfigs = state => state[ moduleName ].tableConfigs;\n\n/** Action Creators **/\n\nexport const setModuleName = (value) => ({\n\ttype: \tSET_MODULE_NAME,\n\tpayload: value\n});\n\nexport const setModuleDescription = (value) => ({\n\ttype: \tSET_MODULE_DESCRIPTION,\n\tpayload: value\n});\n\nexport const setGenerationComponentType = (value) => ({\n\ttype: \tSET_GENERATION_COMPONENT_TYPE,\n\tpayload: value\n});\n\nexport const setActions = (value) => ({\n\ttype: \tSET_ACTIONS,\n\tpayload: value\n});\n\nexport const setTranslations = (value) => ({\n\ttype: \tSET_TRANSLATIONS,\n\tpayload: value\n});\n\nexport const setTableConfigs = (value) => ({\n\ttype: \tSET_TABLE_CONFIGS,\n\tpayload: value\n});","/** declare routes paths */\n\nconst book = Object.freeze({\n    frontendBoilerplateGenerator: '/frontend_boilerplate_generator',\n    backendBoilerplateGenerator: '/backend_boilerplate_generator',\n    home: '/home',\n});\n\nexport default book;\n","/**\n * Different types of actions require different processing, for example we have to have at\n * least two duck actions created for \"fetch\" type - FETCH_SOMETHING and FETCH_SOMETHING_SUCCESS\n */\nconst ACTION_TYPES = Object.freeze({\n    fetch: \"fetch\",\n    set: \"set\",\n    poorSagaAction: \"poorSagaAction\",\n    poorReducerAction: \"poorReducerAction\",\n});\n\n/**\n * Sometimes you have to specify default init values, those are strings.\n * Each of them represent real JS value which often used as default initializing value.\n */\nconst DEF_INIT_VALUES = Object.freeze({\n    undefinedValue: 'undefined',\n    nullValue: 'null',\n    emptyString: `\\\"\\\"`,\n    zero: '0',\n    emptyObject: '{}',\n    emptyArray: '[]',\n    false: 'false',\n    true: 'true',\n});\n\n/**\n * There are different types of components to generate. We can generate table, modal or something else.\n */\nconst COMPONENT_TYPES = Object.freeze({\n    poorPage: \"poorPage\",\n    tablePage: \"tablePage\",\n    modal: \"modal\",\n});\n\nconst TYPES_OF_FILES = Object.freeze({\n    file: 'file',\n    directory: 'directory',\n});\n\nmodule.exports = {\n    ACTION_TYPES,\n    DEF_INIT_VALUES,\n    COMPONENT_TYPES,\n    TYPES_OF_FILES\n};"],"sourceRoot":""}