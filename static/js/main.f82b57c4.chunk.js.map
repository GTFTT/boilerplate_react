{"version":3,"sources":["generators/duckGenerator/index.js","generators/index.js","generators/sagaGenerator/index.js","utils/index.js","DuckGeneratorPage/InputArray/index.js","DuckGeneratorPage/index.js","logo.svg","App.js","index.js","globalConstants/index.js"],"names":["lines","text","_","compact","join","moduleName","actions","generateHeader","generateConstants","result","each","action","actionType","constants","ACTION_TYPES","fetch","fetchSuccess","setFetching","set","poorSagaAction","poorReducerAction","generateConstant","generateReducerInitState","actionInitValue","valueNames","res","value","fetchingValue","generateReducerInitStateSnippet","generateReducer","generateReducerSnippet","generateSelectors","selectors","actionName","generateActionCreators","actionCreators","generateActionSnippet","moduleNameCamelCase","camelCase","enrichedActions","map","enriched","sagas","constantCase","sagaName","propertyName","Object","freeze","enrichActions","console","log","generateDuckFile","duckGenerator","generateSagaFile","fetchActions","filter","obj","poorSagaActions","setActions","generateImports","generateSagas","actionFetchURL","generateCommonSaga","sagaGenerator","downloadTxtFile","filename","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","Item","List","Option","Select","InputArray","props","updateState","newState","actionsChanged","setState","get","createNewItem","undefined","DEF_INIT_VALUES","undefinedValue","key","v4","deleteItem","item","_renderAdditionalFields","className","placeholder","onChange","e","changeActionProps","target","initValue","sentenceCase","updatedActions","state","size","bordered","dataSource","this","locale","emptyText","header","onClick","renderItem","DeleteTwoTone","React","Component","Panel","Collapse","TabPane","Tabs","RadioGroup","Radio","Group","TextArea","Input","DuckGeneratorPage","onGenerateFiles","isEmpty","generators","notification","info","message","error","moduleDescription","generatingComponent","COMPONENT_TYPES","poorPage","defaultActiveKey","rows","tablePage","modal","tabPosition","tab","name","collapsed","displayObjectSize","displayDataTypes","collapseStringsAfterLength","src","App","logo","alt","ReactDOM","render","StrictMode","getElementById","nullValue","emptyString","zero","emptyObject","emptyArray","module","exports"],"mappings":"oaASA,SAASA,EAAMC,GACX,OAAOC,IAAEC,QAAQF,GAAMG,KAAK,MA0JjB,kBAA4B,IAA1BC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAiGzB,MAAO,CACHC,eA7FJ,WAQI,OAPaP,EAAM,CAAC,gGAAD,qCAEeK,EAFf,4CAIf,MAyFJG,kBAhFJ,WACI,IAAIC,EAAS,GAMb,OAJAP,IAAEQ,KAAKJ,GAAS,SAACK,GACbF,GA9KZ,YAAsD,IAA1BG,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,UAChCJ,EAAS,GAEb,OAAQG,GACJ,KAAKE,eAAaC,MACdN,GAAM,uBAAmBI,EAAUE,MAA7B,yBAAqDF,EAAUE,MAA/D,QACNN,GAAM,uBAAmBI,EAAUG,aAA7B,yBAA4DH,EAAUG,aAAtE,QACNP,GAAM,uBAAmBI,EAAUI,YAA7B,yBAA2DJ,EAAUI,YAArE,UACN,MAEJ,KAAKH,eAAaI,IACdT,GAAM,uBAAmBI,EAAUK,IAA7B,yBAAmDL,EAAUK,IAA7D,QACN,MAEJ,KAAKJ,eAAaK,eACdV,GAAM,uBAAmBI,EAAUM,eAA7B,yBAA8DN,EAAUM,eAAxE,QACN,MAEJ,KAAKL,eAAaM,kBACdX,GAAM,uBAAmBI,EAAUO,kBAA7B,yBAAiEP,EAAUO,kBAA3E,QAId,OAAOX,EAuJSY,CAAiBV,MAGtBF,GA0EPa,yBAvEJ,WACI,IAAIb,EAAST,EAAM,CACf,8FACA,6BAQJ,OALAE,IAAEQ,KAAKJ,GAAS,SAACK,GACbF,GAhKZ,YAAuF,IAA5Cc,EAA2C,EAA3CA,gBAAiBX,EAA0B,EAA1BA,WAAYY,EAAc,EAAdA,WAChEC,EAAM,GAEV,OAAQb,GACJ,KAAKE,eAAaC,MACdU,GAAG,YAASD,EAAWE,MAApB,aAA8BH,EAA9B,OACHE,GAAG,YAASD,EAAWG,cAApB,gBACH,MAEJ,KAAKb,eAAaI,IACdO,GAAG,YAASD,EAAWE,MAApB,aAA8BH,EAA9B,OAIX,OAAOE,EAkJWG,CAAgCjB,MAE9CF,GAAS,QA+DToB,gBA1DJ,WACI,IAAIpB,EAAST,EAAM,CAAC,kEAAD,8DAiBnB,OAXAE,IAAEQ,KAAKJ,GAAS,SAACK,GACbF,GA1JZ,YAAwE,IAAtCG,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,UAAWW,EAAc,EAAdA,WACjDf,EAAS,GAEb,OAAQG,GACJ,KAAKE,eAAaC,MACdN,EAAST,EAAM,CAAC,YAAD,OACCa,EAAUG,aADX,6BAEMQ,EAAWE,MAFjB,iBAGX,iBACA,qBAJW,kBAKAF,EAAWE,MALX,aAKqBF,EAAWE,MALhC,KAMX,WANW,mBAOCb,EAAUI,YAPX,KAQX,iBACA,qBATW,kBAUAO,EAAWG,cAVX,cAWX,iBAEJ,MAEJ,KAAKb,eAAaI,IACdT,EAAST,EAAM,CAAC,YAAD,OACCa,EAAUK,IADX,KAEX,iBACA,qBAHW,kBAIAM,EAAWE,MAJX,aAKX,iBAEJ,MAEJ,KAAKZ,eAAaM,kBACdX,EAAST,EAAM,CAAC,YAAD,OACCa,EAAUO,kBADX,KAEX,iBACA,qBACA,iBAKZ,OAAOX,EAkHWqB,CAAuBnB,MAGrCF,GAAUT,EAAM,CAAC,eAAD,mCAgDhB+B,kBAtCJ,WACI,IAAIN,EAAMzB,EAAM,CAAC,kGAiBjB,OAbAE,IAAEQ,KAAKJ,GAAS,YAAwD,IAArDM,EAAoD,EAApDA,WAAwBoB,GAA4B,EAAxCC,WAAwC,EAA5BD,WAAWR,EAAiB,EAAjBA,WAClD,OAAQZ,GACJ,KAAKE,eAAaC,MACdU,GAAG,uBAAoBO,EAAUN,MAA9B,2CAAsEF,EAAWE,MAAjF,OACHD,GAAG,uBAAoBO,EAAUL,cAA9B,2CAA8EH,EAAWG,cAAzF,SACH,MAEJ,KAAKb,eAAaI,IACdO,GAAG,uBAAoBO,EAAUN,MAA9B,2CAAsEF,EAAWE,MAAjF,WAKRD,GAqBPS,uBAlBJ,WACI,IAAIzB,EAAST,EAAM,CAAC,6FAQpB,OAJAE,IAAEQ,KAAKJ,GAAS,SAACK,GACbF,GApJZ,YAAmG,IAAlEG,EAAiE,EAAjEA,WAAwBuB,GAAyC,EAArDF,WAAqD,EAAzCE,gBAAgBtB,EAAyB,EAAzBA,UAAWW,EAAc,EAAdA,WAC5EC,EAAM,GAEV,OAAQb,GACJ,KAAKE,eAAaC,MACdU,GAAOzB,EAAM,CAAC,gBAAD,OACOmC,EAAepB,MADtB,mCAEIF,EAAUE,MAFd,KAGT,QAHS,uBAIOoB,EAAenB,aAJtB,gBAI0CQ,EAAWE,MAJrD,gCAKIb,EAAUG,aALd,2BAMMQ,EAAWE,MANjB,KAOT,QAPS,uBAQOS,EAAelB,YARtB,wCASIJ,EAAUI,YATd,KAUT,mBACA,YAEJ,MAEJ,KAAKH,eAAaI,IACdO,GAAOzB,EAAM,CAAC,gBAAD,OACOmC,EAAejB,IADtB,wCAEIL,EAAUK,IAFd,KAGT,mBACA,UAEJ,MAEJ,KAAKJ,eAAaK,eACdM,GAAOzB,EAAM,CAAC,gBAAD,OACOmC,EAAehB,eADtB,mCAEIN,EAAUM,eAFd,KAGT,UAEJ,MAEJ,KAAKL,eAAaM,kBACdK,GAAOzB,EAAM,CAAC,gBAAD,OACOmC,EAAef,kBADtB,mCAEIP,EAAUO,kBAFd,KAGT,UAKZ,OAAOK,EAsGWW,CAAsBzB,MAG7BF,KCpIA,kBAA4B,IAA1BJ,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAEnB+B,EAAsBC,YAAUjC,GAChCkC,EAjHV,SAAuBjC,GACnB,IAAMiC,EAAkBrC,IAAEsC,IAAIlC,GAAS,SAACK,GACpC,IAAI8B,EAAQ,2BACL9B,GADK,IAERE,UAAW,GACXsB,eAAgB,GAChBO,MAAO,KAGX,OAAQ/B,EAAOC,YACX,KAAKE,eAAaC,MACd0B,EAAS5B,UAAY,CACjBI,YAAa0B,YAAa,gBAAD,OAAiBhC,EAAOsB,aACjDlB,MAAO4B,YAAa,GAAD,OAAIhC,EAAOC,WAAX,YAAyBD,EAAOsB,aACnDjB,aAAc2B,YAAa,GAAD,OAAIhC,EAAOC,WAAX,YAAyBD,EAAOsB,WAAhC,cAG9BQ,EAASN,eAAiB,CACtBlB,YAAaqB,YAAU,gBAAD,OAAiB3B,EAAOsB,aAC9ClB,MAAOuB,YAAU,GAAD,OAAI3B,EAAOC,WAAX,YAAyBD,EAAOsB,aAChDjB,aAAcsB,YAAU,GAAD,OAAI3B,EAAOC,WAAX,YAAyBD,EAAOsB,WAAhC,cAG3BQ,EAASC,MAAQ,CACbE,SAAUN,YAAU,GAAD,OAAI3B,EAAOC,WAAX,YAAyBD,EAAOsB,WAAhC,WAIvBQ,EAASjB,WAAa,CAClBE,MAAOY,YAAU,GAAD,OAAI3B,EAAOsB,aAC3BN,cAAeW,YAAU,YAAD,OAAa3B,EAAOsB,cAGhDQ,EAAST,UAAY,CACjBN,MAAOY,YAAU,UAAD,OAAW3B,EAAOsB,aAClCN,cAAeW,YAAU,mBAAD,OAAoB3B,EAAOsB,cAGvDQ,EAASI,aAAeP,YAAU3B,EAAOsB,YACzC,MAEJ,KAAKnB,eAAaI,IACduB,EAAS5B,UAAY,CACjBK,IAAKyB,YAAa,GAAD,OAAIhC,EAAOC,WAAX,YAAyBD,EAAOsB,cAGrDQ,EAASN,eAAiB,CACtBjB,IAAKoB,YAAU,GAAD,OAAI3B,EAAOC,WAAX,YAAyBD,EAAOsB,cAGlDQ,EAASjB,WAAa,CAClBE,MAAOY,YAAU,GAAD,OAAI3B,EAAOsB,cAG/BQ,EAAST,UAAY,CACjBN,MAAOY,YAAU,UAAD,OAAW3B,EAAOsB,cAGtCQ,EAASI,aAAeP,YAAU3B,EAAOsB,YACzC,MAEJ,KAAKnB,eAAaK,eACdsB,EAAS5B,UAAY,CACjBM,eAAgBwB,YAAa,GAAD,OAAIhC,EAAOsB,cAG3CQ,EAASC,MAAQ,CACbE,SAAUN,YAAU,GAAD,OAAI3B,EAAOsB,WAAX,WAGvBQ,EAASN,eAAiB,CACtBhB,eAAgBmB,YAAU,GAAD,OAAI3B,EAAOsB,cAG5C,KAAKnB,eAAaM,kBACdqB,EAAS5B,UAAY,CACjBO,kBAAmBuB,YAAa,GAAD,OAAIhC,EAAOsB,cAG9CQ,EAASN,eAAiB,CACtBf,kBAAmBkB,YAAU,GAAD,OAAI3B,EAAOsB,cAKnD,OAAOQ,KAEX,OAAOK,OAAOC,OAAOR,GA0BGS,CAAc1C,GA0CtC,OAxCA2C,QAAQC,IAAI,oBAAqBX,GAwC1B,CACHY,iBAvCJ,WACI,MAOIC,EAAc,CAAC/C,WAAYgC,EAAqB/B,QAASiC,IANzDhC,EADJ,EACIA,eACAC,EAFJ,EAEIA,kBACAc,EAHJ,EAGIA,yBACAO,EAJJ,EAIIA,gBACAE,EALJ,EAKIA,kBACAG,EANJ,EAMIA,uBAYJ,OAPM3B,IAAmB,OACnBC,IAAsB,KACtBc,IAA6B,KAC7BO,IAAoB,OACpBE,IAAsB,OACtBG,IAA2B,MAuBjCmB,iBAlBJ,WACI,MC/IO,YAA2B,EAAzBhD,WAA0B,IAAdC,EAAa,EAAbA,QAEnBgD,EAAepD,IAAEqD,OAAOjD,GAAS,SAACkD,GAAD,OAASA,EAAI5C,YAAcE,eAAaC,SACzE0C,EAAkBvD,IAAEqD,OAAOjD,GAAS,SAACkD,GAAD,OAASA,EAAI5C,YAAcE,eAAaK,kBAC5EuC,EAAaxD,IAAEqD,OAAOjD,GAAS,SAACkD,GAAD,OAASA,EAAI5C,YAAcE,eAAaI,OAgG7E,MAAO,CACHyC,gBA/FJ,WA0BI,MAzBU,mZAiBZzD,IAAEsC,IAAIc,GAAc,qBAAEzC,UAAyBE,SAAOX,KAAK,SAjB/C,iBAkBZF,IAAEsC,IAAIiB,GAAiB,qBAAE5C,UAAyBM,kBAAgBf,KAAK,SAlB3D,mBAoBZF,IAAEsC,IAAIc,GAAc,qBAAEnB,eAAmCnB,gBAAcZ,KAAK,SApBhE,mBAsBZF,IAAEsC,IAAIkB,GAAY,qBAAEvB,eAAmCjB,OAAKd,KAAK,SAtBrD,iCA+FVwD,cAnEJ,WAwCI,OAvCa1D,IAAEsC,IAAIlC,GAAS,YAAmF,IAAjFM,EAAgF,EAAhFA,WAAYiC,EAAoE,EAApEA,aAAchC,EAAsD,EAAtDA,UAAWsB,EAA2C,EAA3CA,eAAgB0B,EAA2B,EAA3BA,eAAgBnB,EAAW,EAAXA,MAE/F,OAAQ9B,GACJ,KAAKE,eAAaC,MACd,MAAM,sBAAN,OACD2B,EAAME,SADL,2EAIK/B,EAAUE,MAJf,uCAMIoB,EAAelB,YANnB,yCAQA4B,EARA,2CAQgDgB,GAAgC,GARhF,wCAUI1B,EAAenB,aAVnB,aAUoC6B,EAVpC,mIAeIV,EAAelB,YAfnB,0DAoBJ,KAAKH,eAAaK,eACd,MAAM,sBAAN,OACDuB,EAAME,SADL,2EAIK/B,EAAUM,eAJf,6HA0CZ2C,mBAzBJ,WAmBI,MAlBU,gEAMN5D,IAAEsC,IAAIlC,GAAS,YAA0B,IAAxBM,EAAuB,EAAvBA,WAAY8B,EAAW,EAAXA,MACzB,OAAQ9B,GACJ,KAAKE,eAAaC,MAClB,KAAKD,eAAaK,eACd,MAAM,QAAN,OAAeuB,EAAME,SAArB,cAVN,4BDoENmB,CAAc,CAAC1D,WAAYgC,EAAqB/B,QAASiC,IAHzDoB,EADJ,EACIA,gBACAC,EAFJ,EAEIA,cACAE,EAHJ,EAGIA,mBASJ,OAJMH,IAAoB,OACpBC,IAAkB,KAClBE,IAAuB,QE/JxBE,EAAkB,SAAC/D,GAAmC,IAA7BgE,EAA4B,uDAAjB,aACvCC,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACrE,GAAO,CAACsE,KAAM,eAErCL,EAAQM,KAAOC,IAAIC,gBAAgBL,GACnCH,EAAQS,SAAWV,EACnBE,SAASS,KAAKC,YAAYX,GAC1BA,EAAQY,S,4ECANC,EAAOC,IAAKD,KACZE,EAASC,IAAOD,OAeDE,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,YAAc,SAACC,GACX,IAAQC,EAAmB,EAAKH,MAAxBG,eAER,EAAKC,SAASF,GAAU,kBAAMC,GAAkBA,EAAerF,IAAEuF,IAAF,eAAY,sBAjB5D,EAuBnBC,cAAgB,WACZ,EAAKL,YAAY,CACb/E,QAAQ,GAAD,mBACAJ,IAAEuF,IAAF,eAAY,kBADZ,CAEH,CACIxD,WAAY,WACZrB,WAAYE,eAAaC,MACzB8C,oBAAgB8B,EAChBpE,gBAAiBqE,kBAAgBC,eACjCC,IAAKC,oBAhCF,EAsCnBC,WAAa,SAACF,GACV,EAAKT,YAAY,CACb/E,QAAQ,YACDJ,IAAEqD,OAAOrD,IAAEuF,IAAF,eAAY,kBAAkB,SAACQ,GAAD,OAAUA,EAAKH,KAAOA,SAzCzD,EAmDnBI,wBAA0B,YAAyD,IAAvDJ,EAAsD,EAAtDA,IAAKlF,EAAiD,EAAjDA,WAAYiD,EAAqC,EAArCA,eAAgBtC,EAAqB,EAArBA,gBACzD,OAAQX,GACJ,KAAKE,eAAaC,MACd,OACI,gCACI,cAAC,IAAD,CACIW,MAAOmC,EACPsC,UAAU,QACVC,YAAY,eACZC,SAAU,SAACC,GAAD,OAAO,EAAKC,kBAAkBT,EAAK,CAACjC,eAAgByC,EAAEE,OAAO9E,WAE3E,cAAC,IAAD,CACIA,MAAOH,EACP4E,UAAU,SACVC,YAAY,aACZC,SAAU,SAACI,GAAD,OAAe,EAAKF,kBAAkBT,EAAK,CAACvE,gBAAiBkF,KAJ3E,SAMKvG,IAAEsC,IAAIoD,mBAAiB,SAAClE,EAAOoE,GAC5B,OACI,cAACb,EAAD,CAAQvD,MAAOA,EAAf,SAAuBgF,YAAaZ,aAM5D,KAAKhF,eAAaI,IAClB,KAAKJ,eAAaK,eAClB,KAAKL,eAAaM,kBACd,OACI,cAAC,IAAD,CACIM,MAAOH,EACP4E,UAAU,SACVC,YAAY,oBACZC,SAAU,SAACI,GAAD,OAAe,EAAKF,kBAAkBT,EAAK,CAACvE,gBAAiBkF,KAJ3E,SAMKvG,IAAEsC,IAAIoD,mBAAiB,SAAClE,EAAOoE,GAC5B,OACI,cAACb,EAAD,CAAQvD,MAAOA,EAAf,SAAuBgF,YAAaZ,UAKxD,QACI,SA9FO,EAyGnBS,kBAAoB,SAACT,EAAD,GAAqE,IAA9D7D,EAA6D,EAA7DA,WAAYrB,EAAiD,EAAjDA,WAAYW,EAAqC,EAArCA,gBAAiBsC,EAAoB,EAApBA,eAC1DvD,EAAUJ,IAAEuF,IAAF,eAAY,iBAEtBkB,EAAiBzG,IAAEsC,IAAIlC,GAAS,SAAC2F,GACnC,OAAGA,EAAKH,KAAOA,EACJ,2BACAG,GADP,IAEIhE,WAAYA,GAAwBgE,EAAKhE,WACzCrB,WAAYA,GAAwBqF,EAAKrF,WACzCW,gBAAiBA,GAAkC0E,EAAK1E,gBACxDsC,eAAiBA,GAAqC,KAAnBA,EAAwBA,EAAgBoC,EAAKpC,iBAG7EoC,KAGf,EAAKZ,YAAY,CACb/E,QAASqG,KAtHb,EAAKC,MAAQ,CACTtG,QAAS,IALE,E,0CA+HnB,WAAU,IAAD,OAEL,OACI,8BACI,cAAC,IAAD,CACIuG,KAAM,QACNC,UAAQ,EACRC,WAAY7G,IAAEuF,IAAIuB,KAAM,iBACxBC,OAAQ,CAACC,UAAY,8CACrBC,OACI,cAAC,IAAD,CAAQC,QAAS,kBAAM,EAAK1B,iBAAiBnB,KAAK,UAAlD,8BAEJ8C,WAAY,SAAApB,GAAI,OACZ,cAAClB,EAAD,CACIzE,QAAS,CACL,cAAC,IAAD,CAAQ8G,QAAS,kBAAM,EAAKpB,WAAWC,EAAKH,MAA5C,SAAkD,cAACwB,EAAA,EAAD,OAF1D,SAKI,sBAAKnB,UAAW,OAAhB,UACI,cAAC,IAAD,CACIzE,MAAOxB,IAAEuF,IAAIQ,EAAM,cACnBE,UAAU,QACVE,SAAU,SAACC,GAAD,OAAO,EAAKC,kBAAkBN,EAAKH,IAAK,CAAC7D,WAAYqE,EAAEE,OAAO9E,WAG5E,cAAC,IAAD,CACIA,MAAOxB,IAAEuF,IAAIQ,EAAM,cACnBE,UAAU,SACVE,SAAU,SAACP,GAAD,OAAS,EAAKS,kBAAkBN,EAAKH,IAAK,CAAClF,WAAYkF,KAHrE,SAKK5F,IAAEsC,IAAI1B,gBAAc,SAACY,EAAOoE,GAAR,OAAiB,cAACb,EAAD,CAAQvD,MAAOA,EAAf,SAAuBiB,YAAamD,UAG9E,8BACK,EAAKI,wBAAwBD,mB,GAlK1BsB,IAAMC,WCfxCC,G,OAAQC,IAASD,OACjBE,EAAUC,IAAKD,QACfE,EAAaC,IAAMC,MACnBC,EAAWC,IAAMD,SAEFE,E,kDACjB,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IAUV+C,gBAAkB,WACd,MAA8B,EAAKvB,MAA5BvG,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,QAEnB,GAAID,IAAcH,IAAEkI,QAAQ9H,GAA5B,CAKA,MAA+C+H,EAAW,CAAC/H,UAASD,eAA5D8C,EAAR,EAAQA,iBAAkBE,EAA1B,EAA0BA,iBAE1BW,EAAgBb,IAAoB,YACpCa,EAAgBX,IAAoB,YAEpCiF,IAAaC,KAAK,CACdC,QACI,8BACI,gDAAiBnI,cAZzBiI,IAAaG,MAAM,CAACD,QAAS,sCAZjC,EAAK5B,MAAQ,CACTvG,gBAAYsF,EACZ+C,uBAAmB/C,EACnBgD,oBAAqBC,kBAAgBC,SACrCvI,QAAS,IAPE,E,0CAiCnB,WAAU,IAAD,OAEL,EAAyC0G,KAAKJ,MAA7B+B,GAAjB,EAAQrI,QAAR,EAAiBqI,qBAEjB,OACI,sBAAKxC,UAAU,YAAf,UACI,eAAC,IAAD,CAAUA,UAAU,WAAW2C,iBAAkB,CAAC,IAAK,KAAvD,UACI,cAACrB,EAAD,CAAON,OAAO,WAAd,SACI,sBAAKhB,UAAU,oBAAf,UACI,cAAC,IAAD,CACIC,YAAY,cACZC,SAAU,SAACC,GAAD,OAAO,EAAKd,SAAS,CAACnF,WAAYiG,EAAEE,OAAO9E,WAGzD,cAACsG,EAAD,CACI5B,YAAY,8BACZ2C,KAAM,EACN5C,UAAU,WACVE,SAAU,SAACC,GAAD,OAAO,EAAKd,SAAS,CAACkD,kBAAmBpC,EAAEE,OAAO9E,WAGhE,sBAAKyE,UAAU,YAAf,yBAEI,uBACA,eAAC0B,EAAD,CAAYnG,MAAOiH,EAAqBtC,SAAU,SAACC,GAAD,OAAO,EAAKd,SAAS,CAACmD,oBAAqBrC,EAAEE,OAAO9E,SAAtG,UACI,cAAC,IAAD,CAAOA,MAAOkH,kBAAgBC,SAA9B,uBACA,cAAC,IAAD,CAAOnH,MAAOkH,kBAAgBI,UAA9B,wBACA,cAAC,IAAD,CAAOtH,MAAOkH,kBAAgBK,MAA9B,6BApBa,KAyB7B,cAACxB,EAAD,CAAON,OAAO,iBAAd,SACI,qBAAKhB,UAAU,oBAAf,SACI,eAAC,IAAD,CAAMA,UAAU,OAAO+C,YAAY,OAAnC,UACI,cAACvB,EAAD,CAASwB,IAAI,oBAAb,SACI,cAAC,EAAD,CACI5D,eAAgB,SAACjF,GACb,EAAKkF,SAAS,CAAElF,gBAHS,KAOrC,cAACqH,EAAD,CAASwB,IAAI,cAAb,SACI,qBAAKhD,UAAU,gBAAf,SACI,cAAC,IAAD,CACIiD,MAAM,EACNC,WAAW,EACXC,mBAAmB,EACnBC,kBAAkB,EAClBC,4BAA4B,EAC5BC,IAAKzC,KAAKJ,WARS,WAVR,QA2BvC,cAAC,IAAD,CAAQT,UAAU,iBAAiBiB,QAAS,kBAAM,EAAKe,mBAAvD,kC,GA7F+BZ,IAAMC,WCpBtC,MAA0B,iC,OC2B1BkC,MAjBf,WACC,OACC,sBAAKvD,UAAU,MAAf,UACC,yBAAQA,UAAU,aAAlB,UACC,qBAAKsD,IAAKE,EAAMxD,UAAU,WAAWyD,IAAI,SACzC,qBAAKzD,UAAU,QAAf,oCAKD,8BACC,cAAC,EAAD,UCfJ0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5F,SAAS6F,eAAe,U,iBCN1B,IAAMlJ,EAAegC,OAAOC,OAAO,CAC/BhC,MAAO,QACPG,IAAK,MACLC,eAAgB,iBAChBC,kBAAmB,sBAOjBwE,EAAkB9C,OAAOC,OAAO,CAClC8C,eAAgB,YAChBoE,UAAW,OACXC,YAAY,KACZC,KAAM,IACNC,YAAa,KACbC,WAAY,OAMVzB,EAAkB9F,OAAOC,OAAO,CAClC8F,SAAU,WACVG,UAAW,YACXC,MAAO,UAGXqB,EAAOC,QAAU,CACbzJ,eACA8E,kBACAgD,qB","file":"static/js/main.f82b57c4.chunk.js","sourcesContent":["import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\n\n/**\n * Geerate lines with new line at the end of each piece of text\n * @param {*} text - array of strings\n */\nfunction lines(text) {\n    return _.compact(text).join(\"\\n\");\n}\n\nfunction generateConstant({ actionType, constants }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result +=`export const ${constants.fetch} = \\`\\${prefix}/${constants.fetch}\\`;\\n`;\n            result +=`export const ${constants.fetchSuccess} = \\`\\${prefix}/${constants.fetchSuccess}\\`;\\n`;\n            result +=`export const ${constants.setFetching} = \\`\\${prefix}/${constants.setFetching}\\`;\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            result +=`export const ${constants.set} = \\`\\${prefix}/${constants.set}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            result +=`export const ${constants.poorSagaAction} = \\`\\${prefix}/${constants.poorSagaAction}\\`;\\n`;\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result +=`export const ${constants.poorReducerAction} = \\`\\${prefix}/${constants.poorReducerAction}\\`;\\n`;\n            break;\n    }\n\n    return result;\n}\n\n/** Reducer snippet is a line that contains variable name */\nfunction generateReducerInitStateSnippet({ actionInitValue, actionType, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            res += `\\t${valueNames.fetchingValue}: false,\\n\\n`;\n            break;\n\n        case ACTION_TYPES.set:\n            res += `\\t${valueNames.value}: ${actionInitValue},\\n`;\n            break;    \n    }\n\n    return res;\n}\n\n\n/**\n * Reducer's state changer inside switch statement\n */\nfunction generateReducerSnippet({ actionType, constants, valueNames }) {\n    let result = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            result = lines([\n                `\\t\\tcase ${constants.fetchSuccess}:`,\n                `\\t\\t\\tconst { ${valueNames.value} } = payload;`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: ${valueNames.value},`,\n                '\\t\\t\\t};',\n                `\\t\\tcase ${constants.setFetching}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.fetchingValue}: payload,`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            result = lines([\n                `\\t\\tcase ${constants.set}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                `\\t\\t\\t\\t${valueNames.value}: payload`,\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            result = lines([\n                `\\t\\tcase ${constants.poorReducerAction}:`,\n                '\\t\\t\\treturn {',\n                '\\t\\t\\t\\t...state, ',\n                '\\t\\t\\t};\\n\\n'\n            ]);\n            break;\n    }\n\n    return result;\n}\n\n/**\n * Actions are functions that can be called when you want to change the state\n */\nfunction generateActionSnippet({ actionType, actionName, actionCreators, constants, valueNames }) {\n    let res = \"\";\n\n    switch (actionType) {\n        case ACTION_TYPES.fetch:\n            res += lines([\n                `export const ${actionCreators.fetch} = () => ({`,\n                `\\ttype: \\t${constants.fetch},`,\n                '});\\n',\n                `export const ${actionCreators.fetchSuccess} = ({${valueNames.value}}) => ({`,\n                `\\ttype: \\t${constants.fetchSuccess},`,\n                `\\tpayload: {${valueNames.value}}`,\n                '});\\n',\n                `export const ${actionCreators.setFetching} = (value) => ({`,\n                `\\ttype: \\t${constants.setFetching},`,\n                '\\tpayload: value',\n                '});\\n\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.set:\n            res += lines([\n                `export const ${actionCreators.set} = (value) => ({`,\n                `\\ttype: \\t${constants.set},`,\n                '\\tpayload: value',\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorSagaAction:\n            res += lines([\n                `export const ${actionCreators.poorSagaAction} = () => ({`,\n                `\\ttype: \\t${constants.poorSagaAction},`,\n                '});\\n'\n            ]);\n            break;\n\n        case ACTION_TYPES.poorReducerAction:\n            res += lines([\n                `export const ${actionCreators.poorReducerAction} = () => ({`,\n                `\\ttype: \\t${constants.poorReducerAction},`,\n                '});\\n'\n            ]);\n            break;\n    }\n\n    return res;\n}\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    /**\n     * @returns Header of a duck file\n     */\n    function generateHeader() {\n        let result = lines([\n            `/** ------------------------------------- Constants ------------------------------------- **/`,\n            `export const moduleName = '${moduleName}';`,\n            `const prefix = \\`cpb/\\${moduleName}\\`;`,\n            '',\n        ]);\n    \n        return result;\n    }\n\n    /**\n     * @param {*} params.actions - actions to generate constants for\n     */\n    function generateConstants() {\n        let result = \"\";\n\n        _.each(actions, (action) => {\n            result+=generateConstant(action);\n        });\n\n        return result;\n    }\n\n    function generateReducerInitState() {\n        let result = lines([\n            '/** ------------------------------------- Reducer ------------------------------------- **/',\n            'const ReducerState = {\\n',\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerInitStateSnippet(action);\n        });\n        result+= '};\\n';\n\n        return result;\n    }\n\n    function generateReducer() {\n        let result = lines([\n            `export default function reducer(state = ReducerState, action) {`,\n            `\\tconst { type, payload } = action;`,\n            `\\tswitch (type) {\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateReducerSnippet(action);\n        })\n\n        result += lines([\n            `\\t\\tdefault:`,\n            `\\t\\t\\treturn state;`,\n            `\\t}`,\n            `}`,\n        ]);\n    \n        return result;\n    }\n\n    function generateSelectors() {\n        let res = lines([\n            `/* ------------------------------------- Selectors ------------------------------------- */\\n`,\n        ]);\n\n        _.each(actions, ({ actionType, actionName, selectors, valueNames }) => {\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    res += `export const ${selectors.fetchingValue} = state => state[ moduleName ].${valueNames.fetchingValue};\\n\\n`;\n                    break;\n        \n                case ACTION_TYPES.set:\n                    res += `export const ${selectors.value} = state => state[ moduleName ].${valueNames.value};\\n`;\n                    break;    \n            }\n        });\n    \n        return res;\n    }\n\n    function generateActionCreators() {\n        let result = lines([\n            `/* ------------------------------------- Action Creators -------------------------- */\\n`,\n        ]);\n\n        _.each(actions, (action) => {\n            result += generateActionSnippet(action);\n        });\n    \n        return result;\n    }\n\n    return {\n        generateHeader,\n        generateConstants,\n        generateReducerInitState,\n        generateReducer,\n        generateSelectors,\n        generateActionCreators,\n    }\n};","//vendor\nimport { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\n//proj\nimport { ACTION_TYPES } from 'globalConstants';\n\n//own\nimport duckGenerator from './duckGenerator';\nimport sagaGenerator from './sagaGenerator';\n\n/**\n * Actions enriching - generating more fields that can be used later\n * @param {*} actions \n * @returns Enriched actions\n */\nfunction enrichActions(actions) {\n    const enrichedActions = _.map(actions, (action) => {\n        let enriched =  {\n            ...action,\n            constants: {}, //Constant names, can be more than one\n            actionCreators: {}, //Action function names, different for different types of actions\n            sagas: {}, //Action function names, different for different types of actions\n        };\n\n        switch (action.actionType) {\n            case ACTION_TYPES.fetch:\n                enriched.constants = {\n                    setFetching: constantCase(`set fetching ${action.actionName}`),\n                    fetch: constantCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: constantCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.actionCreators = {\n                    setFetching: camelCase(`set fetching ${action.actionName}`),\n                    fetch: camelCase(`${action.actionType} ${action.actionName}`),\n                    fetchSuccess: camelCase(`${action.actionType} ${action.actionName} success`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionType} ${action.actionName} saga`)\n                }\n\n                //Used to store data inside them\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`),\n                    fetchingValue: camelCase(`fetching ${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                    fetchingValue: camelCase(`select fetching ${action.actionName}`)\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.set:\n                enriched.constants = {\n                    set: constantCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    set: camelCase(`${action.actionType} ${action.actionName}`),\n                }\n\n                enriched.valueNames = {\n                    value: camelCase(`${action.actionName}`)\n                }\n\n                enriched.selectors = {\n                    value: camelCase(`select ${action.actionName}`),\n                }\n\n                enriched.propertyName = camelCase(action.actionName);\n                break;\n\n            case ACTION_TYPES.poorSagaAction:\n                enriched.constants = {\n                    poorSagaAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.sagas = {\n                    sagaName: camelCase(`${action.actionName} saga`)\n                }\n\n                enriched.actionCreators = {\n                    poorSagaAction: camelCase(`${action.actionName}`),\n                }\n\n            case ACTION_TYPES.poorReducerAction:\n                enriched.constants = {\n                    poorReducerAction: constantCase(`${action.actionName}`),\n                }\n\n                enriched.actionCreators = {\n                    poorReducerAction: camelCase(`${action.actionName}`),\n                }\n                break;\n        }\n\n        return enriched;\n    })\n    return Object.freeze(enrichedActions);\n}\n\n\n/**\n * \n * @param {*} params.moduleName \n * @param {*} params.actions  - Array of action objects\n * @example\n *  const actions = [\n *      {\n *          actionName: 'vehicles',\n *          actionType: ACTION_TYPES.fetch,\n *          actionFetchURL: undefined,\n *          actionInitValue: 'undefined',\n *      },\n *      {\n *          actionName: 'vehiclesFetching',\n *          actionType: ACTION_TYPES.set,\n *          actionInitValue: 'undefined',\n *      },\n *  ];\n */\nexport default ({moduleName, actions}) => {\n\n    const moduleNameCamelCase = camelCase(moduleName);\n    const enrichedActions = enrichActions(actions);\n\n    console.log(\"enrichedActions: \", enrichedActions);\n    \n    function generateDuckFile() {\n        const {\n            generateHeader,\n            generateConstants,\n            generateReducerInitState,\n            generateReducer,\n            generateSelectors,\n            generateActionCreators,\n        } = duckGenerator({moduleName: moduleNameCamelCase, actions: enrichedActions});\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateHeader() + \"\\n\\n\"\n            + generateConstants() + \"\\n\"\n            + generateReducerInitState() + \"\\n\"\n            + generateReducer() + \"\\n\\n\"\n            + generateSelectors() + \"\\n\\n\"\n            + generateActionCreators() + \"\\n\";\n\n        return data;\n    }\n\n    function generateSagaFile() {\n        const {\n            generateImports,\n            generateSagas,\n            generateCommonSaga,\n        } = sagaGenerator({moduleName: moduleNameCamelCase, actions: enrichedActions});\n\n        // Data which will write in a file. \n        let data = \"\"\n            + generateImports() + \"\\n\\n\"\n            + generateSagas() + \"\\n\"\n            + generateCommonSaga() + \"\\n\";\n\n        return data;\n    }\n\n    return {\n        generateDuckFile,\n        generateSagaFile,\n    };\n}","import { constantCase, camelCase } from 'change-case'; //For convering different types of variables(camelcase, snake case, etc.)\nimport _ from 'lodash';\n\nimport { ACTION_TYPES } from 'globalConstants';\n\n/**\n * Module pattern is used here to generate data;\n * \n * @param { String } moduleName - name of the module you wnat to create\n * @param { String } actions - actions, will be used to generate duck actions, constants and reducers\n * @param { String } actions.actionName - \n * @param { String } actions.actionType - \n */\nexport default ({moduleName, actions}) => {\n\n    const fetchActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.fetch)\n    const poorSagaActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.poorSagaAction)\n    const setActions = _.filter(actions, (obj) => obj.actionType == ACTION_TYPES.set)\n\n    function generateImports() {\n        let result = \n        `\n// vendor\nimport { call, put, all, take, select } from 'redux-saga/effects';\nimport nprogress from 'nprogress';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { notification } from 'antd';\nimport history from 'store/history';\n\n//proj\nimport book from 'routes/book';\nimport { emitError } from 'core/ui/duck';\nimport { fetchAPI } from 'utils';\n\n// own\nimport {\n    ${_.map(fetchActions, ({constants}) => constants.fetch).join(\",\\n\\t\")}\n    ${_.map(poorSagaActions, ({constants}) => constants.poorSagaAction).join(\",\\n\\t\")}\n\n    ${_.map(fetchActions, ({actionCreators}) => actionCreators.fetchSuccess).join(\",\\n\\t\")}\n\n    ${_.map(setActions, ({actionCreators}) => actionCreators.set).join(\",\\n\\t\")}\n} from './duck';\n        `\n        return result;\n    }\n\n    function generateSagas() {\n        let result = _.map(actions, ({actionType, propertyName, constants, actionCreators, actionFetchURL, sagas}) => {\n\n            switch (actionType) {\n                case ACTION_TYPES.fetch:\n                    return `\nexport function* ${sagas.sagaName}() {\n    while (true) {\n        try {\n            yield take(${constants.fetch});\n\n            yield put(${actionCreators.setFetching}(true));\n\n            const ${propertyName} = yield call(fetchAPI, 'GET', \\`${actionFetchURL? actionFetchURL: \"\"}\\`);\n\n            yield put(${actionCreators.fetchSuccess}({${propertyName}}));\n\n        } catch (error) {\n            yield put(emitError(error));\n        } finally {\n            yield put(${actionCreators.setFetching}(false));\n        }\n    }\n}\\n\n                    `\n                case ACTION_TYPES.poorSagaAction:\n                    return `\nexport function* ${sagas.sagaName}() {\n    while (true) {\n        try {\n            yield take(${constants.poorSagaAction});\n        } catch (error) {\n            yield put(emitError(error));\n        }\n    }\n}\\n\n                    `\n            }\n            \n        })\n        return result;\n    }\n\n    function generateCommonSaga() {\n        let result = \n\n        `\nexport function* saga() {\n    yield all([\n        ${\n            _.map(actions, ({actionType, sagas}) => {\n                switch (actionType) {\n                    case ACTION_TYPES.fetch:\n                    case ACTION_TYPES.poorSagaAction:\n                        return `call(${sagas.sagaName}),\\n\\t`;\n                }\n                \n            })\n        }\n    ]);\n}\n        `\n        return result;\n    }\n\n    return {\n        generateImports,\n        generateSagas,\n        generateCommonSaga,\n    }\n};","\n\n\n/**\n * Save file on user's local machine. Just provide content you wnat to save.\n * @param { String } text - content of a file\n */\nexport const downloadTxtFile = (text, filename = 'myFile.txt') => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], {type: 'text/plain'});\n\n    element.href = URL.createObjectURL(file);\n    element.download = filename;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}","//vendor\nimport React from 'react';\nimport { Input, List, Button, Select } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport _ from 'lodash';\nimport { v4 } from 'uuid';\nimport { camelCase, constantCase, sentenceCase } from 'change-case';\n\n//proj\nimport { ACTION_TYPES, DEF_INIT_VALUES } from 'globalConstants';\n\n//own\nimport './styles.css';\n\nconst Item = List.Item;\nconst Option = Select.Option;\n\n/**\n * Generate array which represents one action. This action contains basic variables gained from the user.\n * \n * action: {\n *      actionName,\n *      actionType,\n *      actionFetchURL,\n *      actionInitValue,\n *      key\n * }\n * \n * @property { Function(actions) } actionsChanged - callback, called when actions are changed\n */\nexport default class InputArray extends React.Component {\n    constructor(props) {\n        super(props);\n\n        //Init state obj\n        this.state = {\n            actions: []\n        };\n    }\n\n    /**\n     * Used to update state and perform additional actions.\n     * Call callback functions if something changed.\n     * @param {*} newState \n     */\n    updateState = (newState) => {\n        const { actionsChanged } = this.props;\n\n        this.setState(newState, () => actionsChanged && actionsChanged(_.get(this, 'state.actions')))\n    }\n\n    /**\n     * Generate new action with initial values setup\n     */\n    createNewItem = () => {\n        this.updateState({\n            actions: [\n                ..._.get(this, 'state.actions'),\n                {\n                    actionName: \"vehicles\",\n                    actionType: ACTION_TYPES.fetch,\n                    actionFetchURL: undefined,\n                    actionInitValue: DEF_INIT_VALUES.undefinedValue,\n                    key: v4(),\n                }\n            ]\n        })\n    }\n\n    deleteItem = (key) => {\n        this.updateState({\n            actions: [\n                ..._.filter(_.get(this, 'state.actions'), (item) => item.key != key),\n            ]\n        })\n    }\n\n    /**\n     * Each action has its additional fields we have to render\n     * @param {*} params.key - action identifier\n     * @param {*} params.actionType - type of an action\n     */\n    _renderAdditionalFields = ({key, actionType, actionFetchURL, actionInitValue}) => {\n        switch (actionType) {\n            case ACTION_TYPES.fetch:\n                return (\n                    <div>\n                        <Input\n                            value={actionFetchURL}\n                            className=\"input\"\n                            placeholder=\"Fetching URL\"\n                            onChange={(e) => this.changeActionProps(key, {actionFetchURL: e.target.value})}\n                        />\n                        <Select\n                            value={actionInitValue}\n                            className=\"select\"\n                            placeholder=\"Init value\"\n                            onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                        >\n                            {_.map(DEF_INIT_VALUES, (value, key) => {\n                                return (\n                                    <Option value={value}>{sentenceCase(key)}</Option>\n                                )\n                            })}\n                        </Select>\n                    </div>\n                )\n            case ACTION_TYPES.set:\n            case ACTION_TYPES.poorSagaAction:\n            case ACTION_TYPES.poorReducerAction:\n                return (\n                    <Select\n                        value={actionInitValue}\n                        className=\"select\"\n                        placeholder=\"Select init value\"\n                        onChange={(initValue) => this.changeActionProps(key, {actionInitValue: initValue})}\n                    >\n                        {_.map(DEF_INIT_VALUES, (value, key) => {\n                            return (\n                                <Option value={value}>{sentenceCase(key)}</Option>\n                            )\n                        })}\n                    </Select>\n                )\n            default:\n                return undefined;\n        }\n\n    }\n\n    /**\n     * When changed input value of an action.\n     * Values will be replaced only if they are provided\n     * @param {*} key - uuid\n     * @param {*} params - action\n     */\n    changeActionProps = (key, {actionName, actionType, actionInitValue, actionFetchURL}) => {\n        const actions = _.get(this, 'state.actions');\n\n        const updatedActions = _.map(actions, (item) => {\n            if(item.key == key)\n                return {\n                    ...item,\n                    actionName: actionName? actionName: item.actionName,\n                    actionType: actionType? actionType: item.actionType,\n                    actionInitValue: actionInitValue? actionInitValue: item.actionInitValue,\n                    actionFetchURL: (actionFetchURL || actionFetchURL === \"\")? actionFetchURL: item.actionFetchURL,\n                }\n            else\n                return item;\n        })\n\n        this.updateState({\n            actions: updatedActions\n        })\n    } \n\n\n    render() {\n\n        return (\n            <div>\n                <List\n                    size={\"small\"}\n                    bordered\n                    dataSource={_.get(this, 'state.actions')}\n                    locale={{emptyText: (<div>No actions</div>)}}\n                    header={\n                        <Button onClick={() => this.createNewItem()} type=\"primary\">Create a new one</Button>\n                    }\n                    renderItem={item => (\n                        <Item\n                            actions={[\n                                <Button onClick={() => this.deleteItem(item.key)}><DeleteTwoTone /></Button>\n                            ]}\n                        >\n                            <div className={\"item\"}>\n                                <Input\n                                    value={_.get(item, 'actionName')}\n                                    className=\"input\"\n                                    onChange={(e) => this.changeActionProps(item.key, {actionName: e.target.value})}\n                                />\n\n                                <Select\n                                    value={_.get(item, 'actionType')}\n                                    className=\"select\"\n                                    onChange={(key) => this.changeActionProps(item.key, {actionType: key})}\n                                >\n                                    {_.map(ACTION_TYPES, (value, key) => (<Option value={value}>{constantCase(key)}</Option>))}\n                                </Select>\n\n                                <div>\n                                    {this._renderAdditionalFields(item)}\n                                </div>\n                            </div>\n                        </Item>\n                    )}\n                />\n            </div>\n        );\n    }\n}","//vendor\nimport React from 'react';\nimport { Collapse, Input, Button, notification, Tabs, Radio } from 'antd';\nimport _ from 'lodash';\nimport ReactJson from 'react-json-view'\n\n//proj\nimport generators from \"generators\";\nimport { downloadTxtFile } from '../utils';\nimport { COMPONENT_TYPES } from 'globalConstants';\n\n//own\nimport InputArray from './InputArray';\nimport \"./styles.css\";\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\nconst RadioGroup = Radio.Group;\nconst TextArea = Input.TextArea;\n\nexport default class DuckGeneratorPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moduleName: undefined,\n            moduleDescription: undefined,\n            generatingComponent: COMPONENT_TYPES.poorPage,\n            actions: [],\n        };\n    }\n\n    onGenerateFiles = () => {\n        const {moduleName, actions} = this.state;\n\n        if(!moduleName || _.isEmpty(actions)) {\n            notification.error({message: \"Not enough information provided!\"});\n            return;\n        }\n\n        const { generateDuckFile, generateSagaFile } = generators({actions, moduleName});\n        \n        downloadTxtFile(generateDuckFile(), \"duck.txt\");\n        downloadTxtFile(generateSagaFile(), \"saga.txt\");\n\n        notification.info({\n            message: (\n                <div>\n                    <div>{`Module: ${moduleName}`}</div>\n                </div>\n            )\n        });\n    }\n\n    render() {\n\n        const { actions, generatingComponent } = this.state;\n\n        return (\n            <div className=\"mainConst\">\n                <Collapse className=\"collapse\" defaultActiveKey={['1', '2']}>\n                    <Panel header=\"Settings\" key=\"1\">\n                        <div className=\"settingsContainer\">\n                            <Input\n                                placeholder=\"Module name\"\n                                onChange={(e) => this.setState({moduleName: e.target.value})}\n                            />\n\n                            <TextArea\n                                placeholder=\"Module description(comment)\"\n                                rows={4}\n                                className=\"textArea\"\n                                onChange={(e) => this.setState({moduleDescription: e.target.value})}\n                            />\n\n                            <div className=\"radioCont\">\n                                Module type:\n                                <br /> \n                                <RadioGroup value={generatingComponent} onChange={(e) => this.setState({generatingComponent: e.target.value})}>\n                                    <Radio value={COMPONENT_TYPES.poorPage}>Poor page</Radio>\n                                    <Radio value={COMPONENT_TYPES.tablePage}>Table page</Radio>\n                                    <Radio value={COMPONENT_TYPES.modal}>Modal</Radio>\n                                </RadioGroup>\n                            </div>\n                        </div>\n                    </Panel>\n                    <Panel header=\"Create actions\" key=\"2\">\n                        <div className=\"settingsContainer\">\n                            <Tabs className=\"tabs\" tabPosition=\"left\">\n                                <TabPane tab=\"Actions generator\" key=\"1\">\n                                    <InputArray\n                                        actionsChanged={(actions) => {\n                                            this.setState({ actions });\n                                        }}\n                                    />\n                                </TabPane>\n                                <TabPane tab=\"Json viewer\" key=\"2\">\n                                    <div className=\"jsonContainer\">\n                                        <ReactJson\n                                            name={false}\n                                            collapsed={false}\n                                            displayObjectSize={false}\n                                            displayDataTypes={false}\n                                            collapseStringsAfterLength={true}\n                                            src={this.state}\n                                        />\n                                    </div>\n                                </TabPane>\n                            </Tabs>\n                        </div>\n                    </Panel>\n                </Collapse>\n\n                <Button className=\"generateButton\" onClick={() => this.onGenerateFiles()}>Generate file</Button>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//vedor\nimport 'antd/dist/antd.css'; //Styles for all antd components, if you remove this - antd will not work\n\n//proj\nimport DuckGeteratorPage from './DuckGeneratorPage';\nimport logo from './logo.svg';\n\n//own\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\tBoilerplate reducer\n\t\t\t\t</div>\n\t\t\t</header>\n\n\t\t\t<div>\n\t\t\t\t<DuckGeteratorPage />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n","/**\n * Different types of actions require different processing, for example we have to have at\n * least two duck actions created for \"fetch\" type - FETCH_SOMETHING and FETCH_SOMETHING_SUCCESS\n */\nconst ACTION_TYPES = Object.freeze({\n    fetch: \"fetch\",\n    set: \"set\",\n    poorSagaAction: \"poorSagaAction\",\n    poorReducerAction: \"poorReducerAction\",\n});\n\n/**\n * Sometimes you have to specify default init values, those are strings.\n * Each of them represent real JS value which often used as default initializing value.\n */\nconst DEF_INIT_VALUES = Object.freeze({\n    undefinedValue: 'undefined',\n    nullValue: 'null',\n    emptyString: `\\\"\\\"`,\n    zero: '0',\n    emptyObject: '{}',\n    emptyArray: '[]',\n});\n\n/**\n * There are different types of components to generate. We can generate table, modal or something else.\n */\nconst COMPONENT_TYPES = Object.freeze({\n    poorPage: \"poorPage\",\n    tablePage: \"tablePage\",\n    modal: \"modal\",\n});\n\nmodule.exports = {\n    ACTION_TYPES,\n    DEF_INIT_VALUES,\n    COMPONENT_TYPES,\n};"],"sourceRoot":""}